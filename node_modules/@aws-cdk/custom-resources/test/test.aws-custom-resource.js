"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../lib");
module.exports = {
    'aws sdk js custom resource with onCreate and onDelete'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.AwsCustomResource(stack, 'AwsSdk', {
            onCreate: {
                service: 'CloudWatchLogs',
                action: 'putRetentionPolicy',
                parameters: {
                    logGroupName: '/aws/lambda/loggroup',
                    retentionInDays: 90
                },
                physicalResourceId: 'loggroup'
            },
            onDelete: {
                service: 'CloudWatchLogs',
                action: 'deleteRetentionPolicy',
                parameters: {
                    logGroupName: '/aws/lambda/loggroup',
                }
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('Custom::AWS', {
            "Create": {
                "service": "CloudWatchLogs",
                "action": "putRetentionPolicy",
                "parameters": {
                    "logGroupName": "/aws/lambda/loggroup",
                    "retentionInDays": 90
                },
                "physicalResourceId": "loggroup"
            },
            "Delete": {
                "service": "CloudWatchLogs",
                "action": "deleteRetentionPolicy",
                "parameters": {
                    "logGroupName": "/aws/lambda/loggroup"
                }
            }
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            "PolicyDocument": {
                "Statement": [
                    {
                        "Action": "logs:PutRetentionPolicy",
                        "Effect": "Allow",
                        "Resource": "*"
                    },
                    {
                        "Action": "logs:DeleteRetentionPolicy",
                        "Effect": "Allow",
                        "Resource": "*"
                    }
                ],
                "Version": "2012-10-17"
            },
        }));
        test.done();
    },
    'onCreate defaults to onUpdate'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.AwsCustomResource(stack, 'AwsSdk', {
            onUpdate: {
                service: 's3',
                action: 'putObject',
                parameters: {
                    Bucket: 'my-bucket',
                    Key: 'my-key',
                    Body: 'my-body'
                },
                physicalResourceIdPath: 'ETag'
            },
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('Custom::AWS', {
            "Create": {
                "service": "s3",
                "action": "putObject",
                "parameters": {
                    "Bucket": "my-bucket",
                    "Key": "my-key",
                    "Body": "my-body"
                },
                "physicalResourceIdPath": "ETag"
            },
            "Update": {
                "service": "s3",
                "action": "putObject",
                "parameters": {
                    "Bucket": "my-bucket",
                    "Key": "my-key",
                    "Body": "my-body"
                },
                "physicalResourceIdPath": "ETag"
            },
        }));
        test.done();
    },
    'with custom policyStatements'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new lib_1.AwsCustomResource(stack, 'AwsSdk', {
            onUpdate: {
                service: 'S3',
                action: 'putObject',
                parameters: {
                    Bucket: 'my-bucket',
                    Key: 'my-key',
                    Body: 'my-body'
                },
                physicalResourceIdPath: 'ETag'
            },
            policyStatements: [
                new iam.PolicyStatement({
                    actions: ['s3:PutObject'],
                    resources: ['arn:aws:s3:::my-bucket/my-key']
                })
            ]
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            "PolicyDocument": {
                "Statement": [
                    {
                        "Action": "s3:PutObject",
                        "Effect": "Allow",
                        "Resource": "arn:aws:s3:::my-bucket/my-key"
                    },
                ],
                "Version": "2012-10-17"
            },
        }));
        test.done();
    },
    'fails when no calls are specified'(test) {
        const stack = new cdk.Stack();
        test.throws(() => {
            new lib_1.AwsCustomResource(stack, 'AwsSdk', {});
        }, /`onCreate`.+`onUpdate`.+`onDelete`/);
        test.done();
    },
    'fails when no physical resource method is specified'(test) {
        const stack = new cdk.Stack();
        test.throws(() => {
            new lib_1.AwsCustomResource(stack, 'AwsSdk', {
                onUpdate: {
                    service: 'CloudWatchLogs',
                    action: 'putRetentionPolicy',
                    parameters: {
                        logGroupName: '/aws/lambda/loggroup',
                        retentionInDays: 90
                    }
                }
            });
        }, /`physicalResourceId`.+`physicalResourceIdPath`/);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,