#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sns = require("@aws-cdk/aws-sns");
const ssm = require("@aws-cdk/aws-ssm");
const cdk = require("@aws-cdk/core");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-sdk-js');
const topic = new sns.Topic(stack, 'Topic');
const snsPublish = new lib_1.AwsCustomResource(stack, 'Publish', {
    onUpdate: {
        service: 'SNS',
        action: 'publish',
        parameters: {
            Message: 'hello',
            TopicArn: topic.topicArn
        },
        physicalResourceId: topic.topicArn,
    }
});
const listTopics = new lib_1.AwsCustomResource(stack, 'ListTopics', {
    onUpdate: {
        service: 'SNS',
        action: 'listTopics',
        physicalResourceIdPath: 'Topics.0.TopicArn'
    }
});
listTopics.node.addDependency(topic);
const ssmParameter = new ssm.StringParameter(stack, 'DummyParameter', {
    stringValue: '1337',
});
const getParameter = new lib_1.AwsCustomResource(stack, 'GetParameter', {
    onUpdate: {
        service: 'SSM',
        action: 'getParameter',
        parameters: {
            Name: ssmParameter.parameterName,
            WithDecryption: true
        },
        physicalResourceIdPath: 'Parameter.ARN'
    }
});
new cdk.CfnOutput(stack, 'MessageId', { value: core_1.Token.asString(snsPublish.getData('MessageId')) });
new cdk.CfnOutput(stack, 'TopicArn', { value: core_1.Token.asString(listTopics.getData('Topics.0.TopicArn')) });
new cdk.CfnOutput(stack, 'ParameterValue', { value: core_1.Token.asString(getParameter.getData('Parameter.Value')) });
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXdzLWN1c3RvbS1yZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmF3cy1jdXN0b20tcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esd0NBQXlDO0FBQ3pDLHdDQUF5QztBQUN6QyxxQ0FBc0M7QUFDdEMsd0NBQXNDO0FBQ3RDLGdDQUEyQztBQUUzQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFFbkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUU1QyxNQUFNLFVBQVUsR0FBRyxJQUFJLHVCQUFpQixDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDekQsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLEtBQUs7UUFDZCxNQUFNLEVBQUUsU0FBUztRQUNqQixVQUFVLEVBQUU7WUFDVixPQUFPLEVBQUUsT0FBTztZQUNoQixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7U0FDekI7UUFDRCxrQkFBa0IsRUFBRSxLQUFLLENBQUMsUUFBUTtLQUNuQztDQUNGLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUFHLElBQUksdUJBQWlCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUM1RCxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsS0FBSztRQUNkLE1BQU0sRUFBRSxZQUFZO1FBQ3BCLHNCQUFzQixFQUFFLG1CQUFtQjtLQUM1QztDQUNGLENBQUMsQ0FBQztBQUNILFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXJDLE1BQU0sWUFBWSxHQUFHLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7SUFDcEUsV0FBVyxFQUFFLE1BQU07Q0FDcEIsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxZQUFZLEdBQUcsSUFBSSx1QkFBaUIsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO0lBQ2hFLFFBQVEsRUFBRTtRQUNSLE9BQU8sRUFBRSxLQUFLO1FBQ2QsTUFBTSxFQUFFLGNBQWM7UUFDdEIsVUFBVSxFQUFFO1lBQ1YsSUFBSSxFQUFFLFlBQVksQ0FBQyxhQUFhO1lBQ2hDLGNBQWMsRUFBRSxJQUFJO1NBQ3JCO1FBQ0Qsc0JBQXNCLEVBQUUsZUFBZTtLQUN4QztDQUNGLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLFlBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6RyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLFlBQUssQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRS9HLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCBzbnMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc25zJyk7XG5pbXBvcnQgc3NtID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXNzbScpO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NvcmUnKTtcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBBd3NDdXN0b21SZXNvdXJjZSB9IGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLXNkay1qcycpO1xuXG5jb25zdCB0b3BpYyA9IG5ldyBzbnMuVG9waWMoc3RhY2ssICdUb3BpYycpO1xuXG5jb25zdCBzbnNQdWJsaXNoID0gbmV3IEF3c0N1c3RvbVJlc291cmNlKHN0YWNrLCAnUHVibGlzaCcsIHtcbiAgb25VcGRhdGU6IHtcbiAgICBzZXJ2aWNlOiAnU05TJyxcbiAgICBhY3Rpb246ICdwdWJsaXNoJyxcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICBNZXNzYWdlOiAnaGVsbG8nLFxuICAgICAgVG9waWNBcm46IHRvcGljLnRvcGljQXJuXG4gICAgfSxcbiAgICBwaHlzaWNhbFJlc291cmNlSWQ6IHRvcGljLnRvcGljQXJuLFxuICB9XG59KTtcblxuY29uc3QgbGlzdFRvcGljcyA9IG5ldyBBd3NDdXN0b21SZXNvdXJjZShzdGFjaywgJ0xpc3RUb3BpY3MnLCB7XG4gIG9uVXBkYXRlOiB7XG4gICAgc2VydmljZTogJ1NOUycsXG4gICAgYWN0aW9uOiAnbGlzdFRvcGljcycsXG4gICAgcGh5c2ljYWxSZXNvdXJjZUlkUGF0aDogJ1RvcGljcy4wLlRvcGljQXJuJ1xuICB9XG59KTtcbmxpc3RUb3BpY3Mubm9kZS5hZGREZXBlbmRlbmN5KHRvcGljKTtcblxuY29uc3Qgc3NtUGFyYW1ldGVyID0gbmV3IHNzbS5TdHJpbmdQYXJhbWV0ZXIoc3RhY2ssICdEdW1teVBhcmFtZXRlcicsIHtcbiAgc3RyaW5nVmFsdWU6ICcxMzM3Jyxcbn0pO1xuY29uc3QgZ2V0UGFyYW1ldGVyID0gbmV3IEF3c0N1c3RvbVJlc291cmNlKHN0YWNrLCAnR2V0UGFyYW1ldGVyJywge1xuICBvblVwZGF0ZToge1xuICAgIHNlcnZpY2U6ICdTU00nLFxuICAgIGFjdGlvbjogJ2dldFBhcmFtZXRlcicsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgTmFtZTogc3NtUGFyYW1ldGVyLnBhcmFtZXRlck5hbWUsXG4gICAgICBXaXRoRGVjcnlwdGlvbjogdHJ1ZVxuICAgIH0sXG4gICAgcGh5c2ljYWxSZXNvdXJjZUlkUGF0aDogJ1BhcmFtZXRlci5BUk4nXG4gIH1cbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ01lc3NhZ2VJZCcsIHsgdmFsdWU6IFRva2VuLmFzU3RyaW5nKHNuc1B1Ymxpc2guZ2V0RGF0YSgnTWVzc2FnZUlkJykpIH0pO1xubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdUb3BpY0FybicsIHsgdmFsdWU6IFRva2VuLmFzU3RyaW5nKGxpc3RUb3BpY3MuZ2V0RGF0YSgnVG9waWNzLjAuVG9waWNBcm4nKSkgfSk7XG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ1BhcmFtZXRlclZhbHVlJywgeyB2YWx1ZTogVG9rZW4uYXNTdHJpbmcoZ2V0UGFyYW1ldGVyLmdldERhdGEoJ1BhcmFtZXRlci5WYWx1ZScpKSB9KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=