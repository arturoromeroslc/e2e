"use strict";
const AWS = require("aws-sdk-mock");
const nock = require("nock");
const sinon = require("sinon");
const aws_custom_resource_provider_1 = require("../lib/aws-custom-resource-provider");
const eventCommon = {
    ServiceToken: 'token',
    ResponseURL: 'https://localhost',
    StackId: 'stackId',
    RequestId: 'requestId',
    LogicalResourceId: 'logicalResourceId',
    ResourceType: 'Custom::AWS',
};
function createRequest(bodyPredicate) {
    return nock('https://localhost')
        .put('/', bodyPredicate)
        .reply(200);
}
module.exports = {
    'tearDown'(callback) {
        AWS.restore();
        nock.cleanAll();
        callback();
    },
    async 'create event with physical resource id path'(test) {
        const listObjectsFake = sinon.fake.resolves({
            Contents: [
                {
                    Key: 'first-key',
                    ETag: 'first-key-etag'
                },
                {
                    Key: 'second-key',
                    ETag: 'second-key-etag',
                }
            ]
        });
        AWS.mock('S3', 'listObjects', listObjectsFake);
        const event = {
            ...eventCommon,
            RequestType: 'Create',
            ResourceProperties: {
                ServiceToken: 'token',
                Create: {
                    service: 'S3',
                    action: 'listObjects',
                    parameters: {
                        Bucket: 'my-bucket'
                    },
                    physicalResourceIdPath: 'Contents.1.ETag'
                }
            }
        };
        const request = createRequest(body => body.Status === 'SUCCESS' &&
            body.PhysicalResourceId === 'second-key-etag' &&
            body.Data['Contents.0.Key'] === 'first-key');
        await aws_custom_resource_provider_1.handler(event, {});
        sinon.assert.calledWith(listObjectsFake, {
            Bucket: 'my-bucket'
        });
        test.equal(request.isDone(), true);
        test.done();
    },
    async 'update event with physical resource id'(test) {
        const publish = sinon.fake.resolves({});
        AWS.mock('SNS', 'publish', publish);
        const event = {
            ...eventCommon,
            RequestType: 'Update',
            PhysicalResourceId: 'physicalResourceId',
            OldResourceProperties: {},
            ResourceProperties: {
                ServiceToken: 'token',
                Update: {
                    service: 'SNS',
                    action: 'publish',
                    parameters: {
                        Message: 'hello',
                        TopicArn: 'topicarn'
                    },
                    physicalResourceId: 'topicarn'
                }
            }
        };
        const request = createRequest(body => body.Status === 'SUCCESS' &&
            body.PhysicalResourceId === 'topicarn');
        await aws_custom_resource_provider_1.handler(event, {});
        test.equal(request.isDone(), true);
        test.done();
    },
    async 'delete event'(test) {
        const listObjectsFake = sinon.fake.resolves({});
        AWS.mock('S3', 'listObjects', listObjectsFake);
        const event = {
            ...eventCommon,
            RequestType: 'Delete',
            PhysicalResourceId: 'physicalResourceId',
            ResourceProperties: {
                ServiceToken: 'token',
                Create: {
                    service: 'S3',
                    action: 'listObjects',
                    parameters: {
                        Bucket: 'my-bucket'
                    },
                    physicalResourceIdPath: 'Contents.1.ETag'
                }
            }
        };
        const request = createRequest(body => body.Status === 'SUCCESS' &&
            body.PhysicalResourceId === 'physicalResourceId' &&
            Object.keys(body.Data).length === 0);
        await aws_custom_resource_provider_1.handler(event, {});
        sinon.assert.notCalled(listObjectsFake);
        test.equal(request.isDone(), true);
        test.done();
    },
    async 'catch errors'(test) {
        const error = new Error();
        error.code = 'NoSuchBucket';
        const listObjectsFake = sinon.fake.rejects(error);
        AWS.mock('S3', 'listObjects', listObjectsFake);
        const event = {
            ...eventCommon,
            RequestType: 'Create',
            ResourceProperties: {
                ServiceToken: 'token',
                Create: {
                    service: 'S3',
                    action: 'listObjects',
                    parameters: {
                        Bucket: 'my-bucket'
                    },
                    physicalResourceId: 'physicalResourceId',
                    catchErrorPattern: 'NoSuchBucket'
                }
            }
        };
        const request = createRequest(body => body.Status === 'SUCCESS' &&
            body.PhysicalResourceId === 'physicalResourceId' &&
            Object.keys(body.Data).length === 0);
        await aws_custom_resource_provider_1.handler(event, {});
        test.equal(request.isDone(), true);
        test.done();
    },
    async 'fixes booleans'(test) {
        const getParameterFake = sinon.fake.resolves({});
        AWS.mock('SSM', 'getParameter', getParameterFake);
        const event = {
            ...eventCommon,
            RequestType: 'Create',
            ResourceProperties: {
                ServiceToken: 'token',
                Create: {
                    service: 'SSM',
                    action: 'getParameter',
                    parameters: {
                        Name: 'my-parameter',
                        WithDecryption: 'true'
                    },
                    physicalResourceId: 'my-parameter'
                }
            }
        };
        const request = createRequest(body => body.Status === 'SUCCESS');
        await aws_custom_resource_provider_1.handler(event, {});
        sinon.assert.calledWith(getParameterFake, {
            Name: 'my-parameter',
            WithDecryption: true // boolean
        });
        test.equal(request.isDone(), true);
        test.done();
    },
    async 'restrict output path'(test) {
        const listObjectsFake = sinon.fake.resolves({
            Contents: [
                {
                    Key: 'first-key',
                    ETag: 'first-key-etag'
                },
                {
                    Key: 'second-key',
                    ETag: 'second-key-etag',
                }
            ]
        });
        AWS.mock('S3', 'listObjects', listObjectsFake);
        const event = {
            ...eventCommon,
            RequestType: 'Create',
            ResourceProperties: {
                ServiceToken: 'token',
                Create: {
                    service: 'S3',
                    action: 'listObjects',
                    parameters: {
                        Bucket: 'my-bucket'
                    },
                    physicalResourceId: 'id',
                    outputPath: 'Contents.0'
                }
            }
        };
        const request = createRequest(body => body.Status === 'SUCCESS' &&
            body.PhysicalResourceId === 'id' &&
            body.Data['Contents.0.Key'] === 'first-key' &&
            body.Data['Contents.1.Key'] === undefined);
        await aws_custom_resource_provider_1.handler(event, {});
        test.equal(request.isDone(), true);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,