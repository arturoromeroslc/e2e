"use strict";
const nodeunit = require("nodeunit");
const lib_1 = require("../../lib");
const physical_name_generator_1 = require("../../lib/private/physical-name-generator");
class TestResource extends lib_1.Resource {
}
module.exports = nodeunit.testCase({
    generatePhysicalName: {
        'generates correct physical names'(test) {
            const app = new lib_1.App();
            const stack = new lib_1.Stack(app, 'TestStack', { env: { account: '012345678912', region: 'bermuda-triangle-1' } });
            const testResourceA = new TestResource(stack, 'A');
            const testResourceB = new TestResource(testResourceA, 'B');
            test.equal(physical_name_generator_1.generatePhysicalName(testResourceA), 'teststackteststackaa164c141d59b37c1b663');
            test.equal(physical_name_generator_1.generatePhysicalName(testResourceB), 'teststackteststackab27595cd34d8188283a1f');
            test.done();
        },
        'generates different names in different accounts'(test) {
            const appA = new lib_1.App();
            const stackA = new lib_1.Stack(appA, 'TestStack', { env: { account: '012345678912', region: 'bermuda-triangle-1' } });
            const resourceA = new TestResource(stackA, 'Resource');
            const appB = new lib_1.App();
            const stackB = new lib_1.Stack(appB, 'TestStack', { env: { account: '012345678913', region: 'bermuda-triangle-1' } });
            const resourceB = new TestResource(stackB, 'Resource');
            test.notEqual(physical_name_generator_1.generatePhysicalName(resourceA), physical_name_generator_1.generatePhysicalName(resourceB));
            test.done();
        },
        'generates different names in different regions'(test) {
            const appA = new lib_1.App();
            const stackA = new lib_1.Stack(appA, 'TestStack', { env: { account: '012345678912', region: 'bermuda-triangle-1' } });
            const resourceA = new TestResource(stackA, 'Resource');
            const appB = new lib_1.App();
            const stackB = new lib_1.Stack(appB, 'TestStack', { env: { account: '012345678912', region: 'bermuda-triangle-2' } });
            const resourceB = new TestResource(stackB, 'Resource');
            test.notEqual(physical_name_generator_1.generatePhysicalName(resourceA), physical_name_generator_1.generatePhysicalName(resourceB));
            test.done();
        },
        'fails when the region is an unresolved token'(test) {
            const app = new lib_1.App();
            const stack = new lib_1.Stack(app, 'TestStack', { env: { account: '012345678912', region: lib_1.Aws.REGION } });
            const testResource = new TestResource(stack, 'A');
            test.throws(() => physical_name_generator_1.generatePhysicalName(testResource), /Cannot generate a physical name for TestStack\/A, because the region is un-resolved or missing/);
            test.done();
        },
        'fails when the region is not provided'(test) {
            const app = new lib_1.App();
            const stack = new lib_1.Stack(app, 'TestStack', { env: { account: '012345678912' } });
            const testResource = new TestResource(stack, 'A');
            test.throws(() => physical_name_generator_1.generatePhysicalName(testResource), /Cannot generate a physical name for TestStack\/A, because the region is un-resolved or missing/);
            test.done();
        },
        'fails when the account is an unresolved token'(test) {
            const app = new lib_1.App();
            const stack = new lib_1.Stack(app, 'TestStack', { env: { account: lib_1.Aws.ACCOUNT_ID, region: 'bermuda-triangle-1' } });
            const testResource = new TestResource(stack, 'A');
            test.throws(() => physical_name_generator_1.generatePhysicalName(testResource), /Cannot generate a physical name for TestStack\/A, because the account is un-resolved or missing/);
            test.done();
        },
        'fails when the account is not provided'(test) {
            const app = new lib_1.App();
            const stack = new lib_1.Stack(app, 'TestStack', { env: { region: 'bermuda-triangle-1' } });
            const testResource = new TestResource(stack, 'A');
            test.throws(() => physical_name_generator_1.generatePhysicalName(testResource), /Cannot generate a physical name for TestStack\/A, because the account is un-resolved or missing/);
            test.done();
        },
    },
    GeneratedWhenNeededMarker: {
        'is correctly recognized'(test) {
            const marker = new physical_name_generator_1.GeneratedWhenNeededMarker();
            const asString = lib_1.Token.asString(marker);
            test.ok(physical_name_generator_1.isGeneratedWhenNeededMarker(asString));
            test.done();
        },
        'throws when resolved'(test) {
            const marker = new physical_name_generator_1.GeneratedWhenNeededMarker();
            const asString = lib_1.Token.asString(marker);
            test.throws(() => new lib_1.Stack().resolve(asString), /Use "this.physicalName" instead/);
            test.done();
        },
    },
    isGeneratedWhenNeededMarker: {
        'correctly response for other tokens'(test) {
            test.ok(!physical_name_generator_1.isGeneratedWhenNeededMarker('this is not even a token!'));
            test.ok(!physical_name_generator_1.isGeneratedWhenNeededMarker(lib_1.Lazy.stringValue({ produce: () => 'Bazinga!' })));
            test.done();
        }
    },
});
//# sourceMappingURL=data:application/json;base64,