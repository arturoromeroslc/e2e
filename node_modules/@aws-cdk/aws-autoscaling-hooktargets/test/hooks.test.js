"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const autoscaling = require("@aws-cdk/aws-autoscaling");
const ec2 = require("@aws-cdk/aws-ec2");
const lambda = require("@aws-cdk/aws-lambda");
const sns = require("@aws-cdk/aws-sns");
const sqs = require("@aws-cdk/aws-sqs");
const core_1 = require("@aws-cdk/core");
const hooks = require("../lib");
describe('given an AutoScalingGroup', () => {
    let stack;
    let asg;
    beforeEach(() => {
        stack = new core_1.Stack();
        const vpc = new ec2.Vpc(stack, 'VPC');
        asg = new autoscaling.AutoScalingGroup(stack, 'ASG', {
            vpc,
            instanceType: new ec2.InstanceType('t2.micro'),
            machineImage: new ec2.AmazonLinuxImage(),
        });
    });
    test('can use queue as hook target', () => {
        // GIVEN
        const queue = new sqs.Queue(stack, 'Queue');
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.QueueHook(queue),
        });
        // THEN
        expect(stack).toHaveResource('AWS::AutoScaling::LifecycleHook', {
            NotificationTargetARN: { "Fn::GetAtt": ["Queue4A7E3555", "Arn"] }
        });
    });
    test('can use topic as hook target', () => {
        // GIVEN
        const topic = new sns.Topic(stack, 'Topic');
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.TopicHook(topic),
        });
        // THEN
        expect(stack).toHaveResource('AWS::AutoScaling::LifecycleHook', {
            NotificationTargetARN: { Ref: "TopicBFC7AF6E" }
        });
    });
    test('can use Lambda function as hook target', () => {
        // GIVEN
        const fn = new lambda.Function(stack, 'Fn', {
            code: lambda.Code.fromInline('foo'),
            runtime: lambda.Runtime.NODEJS_8_10,
            handler: 'index.index',
        });
        // WHEN
        asg.addLifecycleHook('Trans', {
            lifecycleTransition: autoscaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new hooks.FunctionHook(fn),
        });
        // THEN
        expect(stack).toHaveResource('AWS::AutoScaling::LifecycleHook', {
            NotificationTargetARN: { Ref: "ASGLifecycleHookTransTopic9B0D4842" }
        });
        expect(stack).toHaveResource('AWS::SNS::Subscription', {
            Protocol: "lambda",
            TopicArn: { Ref: "ASGLifecycleHookTransTopic9B0D4842" },
            Endpoint: { "Fn::GetAtt": ["Fn9270CBC0", "Arn"] }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhvb2tzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxnQ0FBOEI7QUFDOUIsd0RBQXlEO0FBQ3pELHdDQUF5QztBQUN6Qyw4Q0FBK0M7QUFDL0Msd0NBQXlDO0FBQ3pDLHdDQUF5QztBQUN6Qyx3Q0FBc0M7QUFDdEMsZ0NBQWlDO0FBRWpDLFFBQVEsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7SUFDekMsSUFBSSxLQUFZLENBQUM7SUFDakIsSUFBSSxHQUFpQyxDQUFDO0lBRXRDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxLQUFLLEdBQUcsSUFBSSxZQUFLLEVBQUUsQ0FBQztRQUVwQixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLEdBQUcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO1lBQ25ELEdBQUc7WUFDSCxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztZQUM5QyxZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7U0FDekMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1FBQ3hDLFFBQVE7UUFDUixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTVDLE9BQU87UUFDUCxHQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1lBQzVCLG1CQUFtQixFQUFFLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxrQkFBa0I7WUFDdkUsa0JBQWtCLEVBQUUsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztTQUMvQyxDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQyxpQ0FBaUMsRUFBRTtZQUM5RCxxQkFBcUIsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFFLGVBQWUsRUFBRSxLQUFLLENBQUUsRUFBRTtTQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDeEMsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFNUMsT0FBTztRQUNQLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7WUFDNUIsbUJBQW1CLEVBQUUsV0FBVyxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQjtZQUN2RSxrQkFBa0IsRUFBRSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1NBQy9DLENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLGlDQUFpQyxFQUFFO1lBQzlELHFCQUFxQixFQUFFLEVBQUUsR0FBRyxFQUFFLGVBQWUsRUFBRTtTQUNoRCxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxHQUFHLEVBQUU7UUFDbEQsUUFBUTtRQUNSLE1BQU0sRUFBRSxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQzFDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFDbkMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztZQUNuQyxPQUFPLEVBQUUsYUFBYTtTQUN2QixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtZQUM1QixtQkFBbUIsRUFBRSxXQUFXLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCO1lBQ3ZFLGtCQUFrQixFQUFFLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7U0FDL0MsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUMsaUNBQWlDLEVBQUU7WUFDOUQscUJBQXFCLEVBQUUsRUFBRSxHQUFHLEVBQUUsb0NBQW9DLEVBQUU7U0FDckUsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQyx3QkFBd0IsRUFBRTtZQUNyRCxRQUFRLEVBQUUsUUFBUTtZQUNsQixRQUFRLEVBQUUsRUFBRSxHQUFHLEVBQUUsb0NBQW9DLEVBQUU7WUFDdkQsUUFBUSxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUUsWUFBWSxFQUFFLEtBQUssQ0FBRSxFQUFFO1NBQ3BELENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ0Bhd3MtY2RrL2Fzc2VydC9qZXN0JztcbmltcG9ydCBhdXRvc2NhbGluZyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1hdXRvc2NhbGluZycpO1xuaW1wb3J0IGVjMiA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1lYzInKTtcbmltcG9ydCBsYW1iZGEgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtbGFtYmRhJyk7XG5pbXBvcnQgc25zID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXNucycpO1xuaW1wb3J0IHNxcyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zcXMnKTtcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgaG9va3MgPSByZXF1aXJlKCcuLi9saWInKTtcblxuZGVzY3JpYmUoJ2dpdmVuIGFuIEF1dG9TY2FsaW5nR3JvdXAnLCAoKSA9PiB7XG4gIGxldCBzdGFjazogU3RhY2s7XG4gIGxldCBhc2c6IGF1dG9zY2FsaW5nLkF1dG9TY2FsaW5nR3JvdXA7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVlBDJyk7XG4gICAgYXNnID0gbmV3IGF1dG9zY2FsaW5nLkF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdBU0cnLCB7XG4gICAgICB2cGMsXG4gICAgICBpbnN0YW5jZVR5cGU6IG5ldyBlYzIuSW5zdGFuY2VUeXBlKCd0Mi5taWNybycpLFxuICAgICAgbWFjaGluZUltYWdlOiBuZXcgZWMyLkFtYXpvbkxpbnV4SW1hZ2UoKSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FuIHVzZSBxdWV1ZSBhcyBob29rIHRhcmdldCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHF1ZXVlID0gbmV3IHNxcy5RdWV1ZShzdGFjaywgJ1F1ZXVlJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXNnLmFkZExpZmVjeWNsZUhvb2soJ1RyYW5zJywge1xuICAgICAgbGlmZWN5Y2xlVHJhbnNpdGlvbjogYXV0b3NjYWxpbmcuTGlmZWN5Y2xlVHJhbnNpdGlvbi5JTlNUQU5DRV9MQVVOQ0hJTkcsXG4gICAgICBub3RpZmljYXRpb25UYXJnZXQ6IG5ldyBob29rcy5RdWV1ZUhvb2socXVldWUpLFxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChzdGFjaykudG9IYXZlUmVzb3VyY2UoJ0FXUzo6QXV0b1NjYWxpbmc6OkxpZmVjeWNsZUhvb2snLCB7XG4gICAgICBOb3RpZmljYXRpb25UYXJnZXRBUk46IHsgXCJGbjo6R2V0QXR0XCI6IFsgXCJRdWV1ZTRBN0UzNTU1XCIsIFwiQXJuXCIgXSB9IH0pO1xuICB9KTtcblxuICB0ZXN0KCdjYW4gdXNlIHRvcGljIGFzIGhvb2sgdGFyZ2V0JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMnKTtcblxuICAgIC8vIFdIRU5cbiAgICBhc2cuYWRkTGlmZWN5Y2xlSG9vaygnVHJhbnMnLCB7XG4gICAgICBsaWZlY3ljbGVUcmFuc2l0aW9uOiBhdXRvc2NhbGluZy5MaWZlY3ljbGVUcmFuc2l0aW9uLklOU1RBTkNFX0xBVU5DSElORyxcbiAgICAgIG5vdGlmaWNhdGlvblRhcmdldDogbmV3IGhvb2tzLlRvcGljSG9vayh0b3BpYyksXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KHN0YWNrKS50b0hhdmVSZXNvdXJjZSgnQVdTOjpBdXRvU2NhbGluZzo6TGlmZWN5Y2xlSG9vaycsIHtcbiAgICAgIE5vdGlmaWNhdGlvblRhcmdldEFSTjogeyBSZWY6IFwiVG9waWNCRkM3QUY2RVwiIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdCgnY2FuIHVzZSBMYW1iZGEgZnVuY3Rpb24gYXMgaG9vayB0YXJnZXQnLCAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBmbiA9IG5ldyBsYW1iZGEuRnVuY3Rpb24oc3RhY2ssICdGbicsIHtcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21JbmxpbmUoJ2ZvbycpLFxuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzhfMTAsXG4gICAgICBoYW5kbGVyOiAnaW5kZXguaW5kZXgnLFxuICAgIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGFzZy5hZGRMaWZlY3ljbGVIb29rKCdUcmFucycsIHtcbiAgICAgIGxpZmVjeWNsZVRyYW5zaXRpb246IGF1dG9zY2FsaW5nLkxpZmVjeWNsZVRyYW5zaXRpb24uSU5TVEFOQ0VfTEFVTkNISU5HLFxuICAgICAgbm90aWZpY2F0aW9uVGFyZ2V0OiBuZXcgaG9va3MuRnVuY3Rpb25Ib29rKGZuKSxcbiAgICB9KTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3Qoc3RhY2spLnRvSGF2ZVJlc291cmNlKCdBV1M6OkF1dG9TY2FsaW5nOjpMaWZlY3ljbGVIb29rJywge1xuICAgICAgTm90aWZpY2F0aW9uVGFyZ2V0QVJOOiB7IFJlZjogXCJBU0dMaWZlY3ljbGVIb29rVHJhbnNUb3BpYzlCMEQ0ODQyXCIgfVxuICAgIH0pO1xuICAgIGV4cGVjdChzdGFjaykudG9IYXZlUmVzb3VyY2UoJ0FXUzo6U05TOjpTdWJzY3JpcHRpb24nLCB7XG4gICAgICBQcm90b2NvbDogXCJsYW1iZGFcIixcbiAgICAgIFRvcGljQXJuOiB7IFJlZjogXCJBU0dMaWZlY3ljbGVIb29rVHJhbnNUb3BpYzlCMEQ0ODQyXCIgfSxcbiAgICAgIEVuZHBvaW50OiB7IFwiRm46OkdldEF0dFwiOiBbIFwiRm45MjcwQ0JDMFwiLCBcIkFyblwiIF0gfVxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19