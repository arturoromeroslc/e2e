"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const action_1 = require("./action");
/**
 * Validation function that checks if the number of artifacts is within the given bounds
 */
function validateArtifactBounds(type, artifacts, min, max, category, provider) {
    const ret = [];
    if (artifacts.length < min) {
        ret.push(`${category}/${provider} must have at least ${min} ${type} artifacts`);
    }
    if (artifacts.length > max) {
        ret.push(`${category}/${provider} cannot have more than ${max} ${type} artifacts`);
    }
    return ret;
}
exports.validateArtifactBounds = validateArtifactBounds;
/**
 * Validation function that guarantees that an action is or is not a source action. This is useful because Source actions can only be
 * in the first stage of a pipeline, and the first stage can only contain source actions.
 */
function validateSourceAction(mustBeSource, category, actionName, stageName) {
    if (mustBeSource !== (category === action_1.ActionCategory.SOURCE)) {
        return [`Action ${actionName} in stage ${stageName}: ` + (mustBeSource ? 'first stage may only contain Source actions'
                : 'Source actions may only occur in first stage')];
    }
    return [];
}
exports.validateSourceAction = validateSourceAction;
/**
 * Regex to validate Pipeline, Stage, Action names
 *
 * https://docs.aws.amazon.com/codepipeline/latest/userguide/limits.html
 */
const VALID_IDENTIFIER_REGEX = /^[a-zA-Z0-9.@_-]{1,100}$/;
/**
 * Validate the given name of a pipeline component. Pipeline component names all have the same restrictions.
 * This can be used to validate the name of all components of a pipeline.
 */
function validateName(thing, name) {
    validateAgainstRegex(VALID_IDENTIFIER_REGEX, thing, name);
}
exports.validateName = validateName;
function validateArtifactName(artifactName) {
    // https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_Artifact.html#CodePipeline-Type-Artifact-name
    validateAgainstRegex(/^[a-zA-Z0-9_-]{1,100}$/, 'Artifact', artifactName);
}
exports.validateArtifactName = validateArtifactName;
function validateAgainstRegex(regex, thing, name) {
    // name could be a Token - in that case, skip validation altogether
    if (cdk.Token.isUnresolved(name)) {
        return;
    }
    if (name !== undefined && !regex.test(name)) {
        throw new Error(`${thing} name must match regular expression: ${regex.toString()}, got '${name}'`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZhbGlkYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBc0M7QUFDdEMscUNBQTBDO0FBRzFDOztHQUVHO0FBQ0gsU0FBZ0Isc0JBQXNCLENBQUUsSUFBWSxFQUFFLFNBQXFCLEVBQ25DLEdBQVcsRUFBRSxHQUFXLEVBQ3hCLFFBQWdCLEVBQUUsUUFBZ0I7SUFDeEUsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFDO0lBRXpCLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7UUFDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsSUFBSSxRQUFRLHVCQUF1QixHQUFHLElBQUksSUFBSSxZQUFZLENBQUMsQ0FBQztLQUNqRjtJQUVELElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7UUFDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsSUFBSSxRQUFRLDBCQUEwQixHQUFHLElBQUksSUFBSSxZQUFZLENBQUMsQ0FBQztLQUNwRjtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQWRELHdEQWNDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0Isb0JBQW9CLENBQUMsWUFBcUIsRUFBRSxRQUFnQixFQUFFLFVBQWtCLEVBQUUsU0FBaUI7SUFDakgsSUFBSSxZQUFZLEtBQUssQ0FBQyxRQUFRLEtBQUssdUJBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN6RCxPQUFPLENBQUMsVUFBVSxVQUFVLGFBQWEsU0FBUyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLDZDQUE2QztnQkFDcEgsQ0FBQyxDQUFDLDhDQUE4QyxDQUFDLENBQUMsQ0FBQztLQUN0RDtJQUNELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQztBQU5ELG9EQU1DO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sc0JBQXNCLEdBQUcsMEJBQTBCLENBQUM7QUFFMUQ7OztHQUdHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFDLEtBQWEsRUFBRSxJQUF3QjtJQUNsRSxvQkFBb0IsQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUZELG9DQUVDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsWUFBZ0M7SUFDbkUsaUhBQWlIO0lBQ2pILG9CQUFvQixDQUFDLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBSEQsb0RBR0M7QUFFRCxTQUFTLG9CQUFvQixDQUFDLEtBQWEsRUFBRSxLQUFhLEVBQUUsSUFBd0I7SUFDbEYsbUVBQW1FO0lBQ25FLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDaEMsT0FBTztLQUNSO0lBRUQsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMzQyxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyx3Q0FBd0MsS0FBSyxDQUFDLFFBQVEsRUFBRSxVQUFVLElBQUksR0FBRyxDQUFDLENBQUM7S0FDcEc7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NvcmUnKTtcbmltcG9ydCB7IEFjdGlvbkNhdGVnb3J5IH0gZnJvbSBcIi4vYWN0aW9uXCI7XG5pbXBvcnQgeyBBcnRpZmFjdCB9IGZyb20gXCIuL2FydGlmYWN0XCI7XG5cbi8qKlxuICogVmFsaWRhdGlvbiBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGUgbnVtYmVyIG9mIGFydGlmYWN0cyBpcyB3aXRoaW4gdGhlIGdpdmVuIGJvdW5kc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBcnRpZmFjdEJvdW5kcyggdHlwZTogc3RyaW5nLCBhcnRpZmFjdHM6IEFydGlmYWN0W10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluOiBudW1iZXIsIG1heDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBzdHJpbmcsIHByb3ZpZGVyOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGNvbnN0IHJldDogc3RyaW5nW10gPSBbXTtcblxuICBpZiAoYXJ0aWZhY3RzLmxlbmd0aCA8IG1pbikge1xuICAgIHJldC5wdXNoKGAke2NhdGVnb3J5fS8ke3Byb3ZpZGVyfSBtdXN0IGhhdmUgYXQgbGVhc3QgJHttaW59ICR7dHlwZX0gYXJ0aWZhY3RzYCk7XG4gIH1cblxuICBpZiAoYXJ0aWZhY3RzLmxlbmd0aCA+IG1heCkge1xuICAgIHJldC5wdXNoKGAke2NhdGVnb3J5fS8ke3Byb3ZpZGVyfSBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gJHttYXh9ICR7dHlwZX0gYXJ0aWZhY3RzYCk7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIFZhbGlkYXRpb24gZnVuY3Rpb24gdGhhdCBndWFyYW50ZWVzIHRoYXQgYW4gYWN0aW9uIGlzIG9yIGlzIG5vdCBhIHNvdXJjZSBhY3Rpb24uIFRoaXMgaXMgdXNlZnVsIGJlY2F1c2UgU291cmNlIGFjdGlvbnMgY2FuIG9ubHkgYmVcbiAqIGluIHRoZSBmaXJzdCBzdGFnZSBvZiBhIHBpcGVsaW5lLCBhbmQgdGhlIGZpcnN0IHN0YWdlIGNhbiBvbmx5IGNvbnRhaW4gc291cmNlIGFjdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNvdXJjZUFjdGlvbihtdXN0QmVTb3VyY2U6IGJvb2xlYW4sIGNhdGVnb3J5OiBzdHJpbmcsIGFjdGlvbk5hbWU6IHN0cmluZywgc3RhZ2VOYW1lOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGlmIChtdXN0QmVTb3VyY2UgIT09IChjYXRlZ29yeSA9PT0gQWN0aW9uQ2F0ZWdvcnkuU09VUkNFKSkge1xuICAgIHJldHVybiBbYEFjdGlvbiAke2FjdGlvbk5hbWV9IGluIHN0YWdlICR7c3RhZ2VOYW1lfTogYCArIChtdXN0QmVTb3VyY2UgPyAnZmlyc3Qgc3RhZ2UgbWF5IG9ubHkgY29udGFpbiBTb3VyY2UgYWN0aW9ucydcbiAgICAgIDogJ1NvdXJjZSBhY3Rpb25zIG1heSBvbmx5IG9jY3VyIGluIGZpcnN0IHN0YWdlJyldO1xuICB9XG4gIHJldHVybiBbXTtcbn1cblxuLyoqXG4gKiBSZWdleCB0byB2YWxpZGF0ZSBQaXBlbGluZSwgU3RhZ2UsIEFjdGlvbiBuYW1lc1xuICpcbiAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb2RlcGlwZWxpbmUvbGF0ZXN0L3VzZXJndWlkZS9saW1pdHMuaHRtbFxuICovXG5jb25zdCBWQUxJRF9JREVOVElGSUVSX1JFR0VYID0gL15bYS16QS1aMC05LkBfLV17MSwxMDB9JC87XG5cbi8qKlxuICogVmFsaWRhdGUgdGhlIGdpdmVuIG5hbWUgb2YgYSBwaXBlbGluZSBjb21wb25lbnQuIFBpcGVsaW5lIGNvbXBvbmVudCBuYW1lcyBhbGwgaGF2ZSB0aGUgc2FtZSByZXN0cmljdGlvbnMuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIHZhbGlkYXRlIHRoZSBuYW1lIG9mIGFsbCBjb21wb25lbnRzIG9mIGEgcGlwZWxpbmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU5hbWUodGhpbmc6IHN0cmluZywgbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gIHZhbGlkYXRlQWdhaW5zdFJlZ2V4KFZBTElEX0lERU5USUZJRVJfUkVHRVgsIHRoaW5nLCBuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQXJ0aWZhY3ROYW1lKGFydGlmYWN0TmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gIC8vIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jb2RlcGlwZWxpbmUvbGF0ZXN0L0FQSVJlZmVyZW5jZS9BUElfQXJ0aWZhY3QuaHRtbCNDb2RlUGlwZWxpbmUtVHlwZS1BcnRpZmFjdC1uYW1lXG4gIHZhbGlkYXRlQWdhaW5zdFJlZ2V4KC9eW2EtekEtWjAtOV8tXXsxLDEwMH0kLywgJ0FydGlmYWN0JywgYXJ0aWZhY3ROYW1lKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBZ2FpbnN0UmVnZXgocmVnZXg6IFJlZ0V4cCwgdGhpbmc6IHN0cmluZywgbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gIC8vIG5hbWUgY291bGQgYmUgYSBUb2tlbiAtIGluIHRoYXQgY2FzZSwgc2tpcCB2YWxpZGF0aW9uIGFsdG9nZXRoZXJcbiAgaWYgKGNkay5Ub2tlbi5pc1VucmVzb2x2ZWQobmFtZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAobmFtZSAhPT0gdW5kZWZpbmVkICYmICFyZWdleC50ZXN0KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaW5nfSBuYW1lIG11c3QgbWF0Y2ggcmVndWxhciBleHByZXNzaW9uOiAke3JlZ2V4LnRvU3RyaW5nKCl9LCBnb3QgJyR7bmFtZX0nYCk7XG4gIH1cbn1cbiJdfQ==