"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const default_1 = require("../lib/default");
const aws_entities_1 = require("./aws-entities");
async function main() {
    const lines = [
        "import { Fact, FactName } from './fact';",
        '',
        '// tslint:disable:object-literal-key-quotes',
        '// tslint:disable:max-line-length',
        '',
        '/**',
        ' * Built-in regional information, re-generated by `npm run build`.',
        ' *',
        ` * @generated ${new Date().toISOString()}`,
        ' */',
        'export class BuiltIns {',
        '  /**',
        '   * Registers all the built in regional data in the RegionInfo database.',
        '   */',
        '  public static register(): void {',
    ];
    const AWS_OLDER_REGIONS = new Set([
        'us-east-1',
        'us-west-1',
        'us-west-2',
        'ap-southeast-1',
        'ap-southeast-2',
        'ap-northeast-1',
        'sa-east-1'
    ]);
    const AWS_CDK_METADATA = new Set([
        'us-east-2',
        'us-east-1',
        'us-west-1',
        'us-west-2',
        'ap-south-1',
        'ap-east-1',
        // 'ap-northeast-3',
        'ap-northeast-2',
        'ap-southeast-1',
        'ap-southeast-2',
        'ap-northeast-1',
        'ca-central-1',
        'cn-north-1',
        'cn-northwest-1',
        'eu-central-1',
        'eu-west-1',
        'eu-west-2',
        'eu-west-3',
        'eu-north-1',
        'me-south-1',
        'sa-east-1',
    ]);
    /**
     * The hosted zone Id if using an alias record in Route53.
     *
     * @see https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints
     */
    const ROUTE_53_BUCKET_WEBSITE_ZONE_IDS = {
        'us-east-2': 'Z2O1EMRO9K5GLX',
        'us-east-1': 'Z3AQBSTGFYJSTF',
        'us-west-1': 'Z2F56UZL2M1ACD',
        'us-west-2': 'Z3BJ6K6RIION7M',
        'ap-east-1': 'ZNB98KWMFR0R6',
        'ap-south-1': 'Z11RGJOFQNVJUP',
        'ap-northeast-3': 'Z2YQB5RD63NC85',
        'ap-northeast-2': 'Z3W03O7B5YMIYP',
        'ap-southeast-1': 'Z3O0J2DXBE1FTB',
        'ap-southeast-2': 'Z1WCIGYICN2BYD',
        'ap-northeast-1': 'Z2M4EHUR26P7ZW',
        'ca-central-1': 'Z1QDHH18159H29',
        'eu-central-1': 'Z21DNDUVLTQW6Q',
        'eu-west-1': 'Z1BKCTXD74EZPE',
        'eu-west-2': 'Z3GKZC51ZF0DB4',
        'eu-west-3': 'Z3R1K369G5AVDG',
        'eu-north-1': 'Z3BAZG2TWCNX0D',
        'sa-east-1': 'Z7KQH4QJS55SO',
        'me-south-1': 'Z1MPMWCPA7YB62',
    };
    for (const region of aws_entities_1.AWS_REGIONS) {
        const partition = region.startsWith('cn-') ? 'aws-cn' : 'aws';
        registerFact(region, 'PARTITION', partition);
        const domainSuffix = partition === 'aws' ? 'amazonaws.com' : 'amazonaws.com.cn';
        registerFact(region, 'DOMAIN_SUFFIX', domainSuffix);
        registerFact(region, 'CDK_METADATA_RESOURCE_AVAILABLE', AWS_CDK_METADATA.has(region) ? 'YES' : 'NO');
        registerFact(region, 'S3_STATIC_WEBSITE_ENDPOINT', AWS_OLDER_REGIONS.has(region)
            ? `s3-website-${region}.${domainSuffix}`
            : `s3-website.${region}.${domainSuffix}`);
        registerFact(region, 'S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID', ROUTE_53_BUCKET_WEBSITE_ZONE_IDS[region] || '');
        for (const service of aws_entities_1.AWS_SERVICES) {
            registerFact(region, ['servicePrincipal', service], default_1.Default.servicePrincipal(service, region, domainSuffix));
        }
    }
    lines.push('  }');
    lines.push('');
    lines.push('  private constructor() {}'),
        lines.push('}');
    await fs.writeFile(path.resolve(__dirname, '..', 'lib', 'built-ins.generated.ts'), lines.join('\n'));
    function registerFact(region, name, value) {
        const factName = typeof name === 'string' ? name : `${name[0]}(${name.slice(1).map(s => JSON.stringify(s)).join(', ')})`;
        lines.push(`    Fact.register({ region: ${JSON.stringify(region)}, name: FactName.${factName}, value: ${JSON.stringify(value)} });`);
    }
}
main().catch(e => {
    // tslint:disable-next-line: no-console
    console.error(e);
    process.exit(-1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtc3RhdGljLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnZW5lcmF0ZS1zdGF0aWMtZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFnQztBQUNoQyw2QkFBOEI7QUFDOUIsNENBQXlDO0FBQ3pDLGlEQUEyRDtBQUUzRCxLQUFLLFVBQVUsSUFBSTtJQUNqQixNQUFNLEtBQUssR0FBRztRQUNaLDBDQUEwQztRQUMxQyxFQUFFO1FBQ0YsNkNBQTZDO1FBQzdDLG1DQUFtQztRQUNuQyxFQUFFO1FBQ0YsS0FBSztRQUNMLG9FQUFvRTtRQUNwRSxJQUFJO1FBQ0osaUJBQWlCLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUU7UUFDM0MsS0FBSztRQUNMLHlCQUF5QjtRQUN6QixPQUFPO1FBQ1AsMkVBQTJFO1FBQzNFLE9BQU87UUFDUCxvQ0FBb0M7S0FDckMsQ0FBQztJQUVGLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxHQUFHLENBQUM7UUFDaEMsV0FBVztRQUNYLFdBQVc7UUFDWCxXQUFXO1FBQ1gsZ0JBQWdCO1FBQ2hCLGdCQUFnQjtRQUNoQixnQkFBZ0I7UUFDaEIsV0FBVztLQUNaLENBQUMsQ0FBQztJQUVILE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxHQUFHLENBQUM7UUFDL0IsV0FBVztRQUNYLFdBQVc7UUFDWCxXQUFXO1FBQ1gsV0FBVztRQUNYLFlBQVk7UUFDWixXQUFXO1FBQ1gsb0JBQW9CO1FBQ3BCLGdCQUFnQjtRQUNoQixnQkFBZ0I7UUFDaEIsZ0JBQWdCO1FBQ2hCLGdCQUFnQjtRQUNoQixjQUFjO1FBQ2QsWUFBWTtRQUNaLGdCQUFnQjtRQUNoQixjQUFjO1FBQ2QsV0FBVztRQUNYLFdBQVc7UUFDWCxXQUFXO1FBQ1gsWUFBWTtRQUNaLFlBQVk7UUFDWixXQUFXO0tBQ1osQ0FBQyxDQUFDO0lBRUg7Ozs7T0FJRztJQUNILE1BQU0sZ0NBQWdDLEdBQWlDO1FBQ3JFLFdBQVcsRUFB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QUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3pILEtBQUssQ0FBQyxJQUFJLENBQUMsK0JBQStCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLG9CQUFvQixRQUFRLFlBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkksQ0FBQztBQUNILENBQUM7QUFFRCxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDZix1Q0FBdUM7SUFDdkMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkIsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgeyBEZWZhdWx0IH0gZnJvbSAnLi4vbGliL2RlZmF1bHQnO1xuaW1wb3J0IHsgQVdTX1JFR0lPTlMsIEFXU19TRVJWSUNFUyB9IGZyb20gJy4vYXdzLWVudGl0aWVzJztcblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgbGluZXMgPSBbXG4gICAgXCJpbXBvcnQgeyBGYWN0LCBGYWN0TmFtZSB9IGZyb20gJy4vZmFjdCc7XCIsXG4gICAgJycsXG4gICAgJy8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLWtleS1xdW90ZXMnLFxuICAgICcvLyB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGgnLFxuICAgICcnLFxuICAgICcvKionLFxuICAgICcgKiBCdWlsdC1pbiByZWdpb25hbCBpbmZvcm1hdGlvbiwgcmUtZ2VuZXJhdGVkIGJ5IGBucG0gcnVuIGJ1aWxkYC4nLFxuICAgICcgKicsXG4gICAgYCAqIEBnZW5lcmF0ZWQgJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YCxcbiAgICAnICovJyxcbiAgICAnZXhwb3J0IGNsYXNzIEJ1aWx0SW5zIHsnLFxuICAgICcgIC8qKicsXG4gICAgJyAgICogUmVnaXN0ZXJzIGFsbCB0aGUgYnVpbHQgaW4gcmVnaW9uYWwgZGF0YSBpbiB0aGUgUmVnaW9uSW5mbyBkYXRhYmFzZS4nLFxuICAgICcgICAqLycsXG4gICAgJyAgcHVibGljIHN0YXRpYyByZWdpc3RlcigpOiB2b2lkIHsnLFxuICBdO1xuXG4gIGNvbnN0IEFXU19PTERFUl9SRUdJT05TID0gbmV3IFNldChbXG4gICAgJ3VzLWVhc3QtMScsXG4gICAgJ3VzLXdlc3QtMScsXG4gICAgJ3VzLXdlc3QtMicsXG4gICAgJ2FwLXNvdXRoZWFzdC0xJyxcbiAgICAnYXAtc291dGhlYXN0LTInLFxuICAgICdhcC1ub3J0aGVhc3QtMScsXG4gICAgJ3NhLWVhc3QtMSdcbiAgXSk7XG5cbiAgY29uc3QgQVdTX0NES19NRVRBREFUQSA9IG5ldyBTZXQoW1xuICAgICd1cy1lYXN0LTInLFxuICAgICd1cy1lYXN0LTEnLFxuICAgICd1cy13ZXN0LTEnLFxuICAgICd1cy13ZXN0LTInLFxuICAgICdhcC1zb3V0aC0xJyxcbiAgICAnYXAtZWFzdC0xJyxcbiAgICAvLyAnYXAtbm9ydGhlYXN0LTMnLFxuICAgICdhcC1ub3J0aGVhc3QtMicsXG4gICAgJ2FwLXNvdXRoZWFzdC0xJyxcbiAgICAnYXAtc291dGhlYXN0LTInLFxuICAgICdhcC1ub3J0aGVhc3QtMScsXG4gICAgJ2NhLWNlbnRyYWwtMScsXG4gICAgJ2NuLW5vcnRoLTEnLFxuICAgICdjbi1ub3J0aHdlc3QtMScsXG4gICAgJ2V1LWNlbnRyYWwtMScsXG4gICAgJ2V1LXdlc3QtMScsXG4gICAgJ2V1LXdlc3QtMicsXG4gICAgJ2V1LXdlc3QtMycsXG4gICAgJ2V1LW5vcnRoLTEnLFxuICAgICdtZS1zb3V0aC0xJyxcbiAgICAnc2EtZWFzdC0xJyxcbiAgXSk7XG5cbiAgLyoqXG4gICAqIFRoZSBob3N0ZWQgem9uZSBJZCBpZiB1c2luZyBhbiBhbGlhcyByZWNvcmQgaW4gUm91dGU1My5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vZ2VuZXJhbC9sYXRlc3QvZ3IvcmFuZGUuaHRtbCNzM193ZWJzaXRlX3JlZ2lvbl9lbmRwb2ludHNcbiAgICovXG4gIGNvbnN0IFJPVVRFXzUzX0JVQ0tFVF9XRUJTSVRFX1pPTkVfSURTOiB7IFtyZWdpb246IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgICd1cy1lYXN0LTInOiAnWjJPMUVNUk85SzVHTFgnLFxuICAgICd1cy1lYXN0LTEnOiAnWjNBUUJTVEdGWUpTVEYnLFxuICAgICd1cy13ZXN0LTEnOiAnWjJGNTZVWkwyTTFBQ0QnLFxuICAgICd1cy13ZXN0LTInOiAnWjNCSjZLNlJJSU9ON00nLFxuICAgICdhcC1lYXN0LTEnOiAnWk5COThLV01GUjBSNicsXG4gICAgJ2FwLXNvdXRoLTEnOiAnWjExUkdKT0ZRTlZKVVAnLFxuICAgICdhcC1ub3J0aGVhc3QtMyc6ICdaMllRQjVSRDYzTkM4NScsXG4gICAgJ2FwLW5vcnRoZWFzdC0yJzogJ1ozVzAzTzdCNVlNSVlQJyxcbiAgICAnYXAtc291dGhlYXN0LTEnOiAnWjNPMEoyRFhCRTFGVEInLFxuICAgICdhcC1zb3V0aGVhc3QtMic6ICdaMVdDSUdZSUNOMkJZRCcsXG4gICAgJ2FwLW5vcnRoZWFzdC0xJzogJ1oyTTRFSFVSMjZQN1pXJyxcbiAgICAnY2EtY2VudHJhbC0xJzogJ1oxUURISDE4MTU5SDI5JyxcbiAgICAnZXUtY2VudHJhbC0xJzogJ1oyMURORFVWTFRRVzZRJyxcbiAgICAnZXUtd2VzdC0xJzogJ1oxQktDVFhENzRFWlBFJyxcbiAgICAnZXUtd2VzdC0yJzogJ1ozR0taQzUxWkYwREI0JyxcbiAgICAnZXUtd2VzdC0zJzogJ1ozUjFLMzY5RzVBVkRHJyxcbiAgICAnZXUtbm9ydGgtMSc6ICdaM0JBWkcyVFdDTlgwRCcsXG4gICAgJ3NhLWVhc3QtMSc6ICdaN0tRSDRRSlM1NVNPJyxcbiAgICAnbWUtc291dGgtMSc6ICdaMU1QTVdDUEE3WUI2MicsXG4gIH07XG5cbiAgZm9yIChjb25zdCByZWdpb24gb2YgQVdTX1JFR0lPTlMpIHtcbiAgICBjb25zdCBwYXJ0aXRpb24gPSByZWdpb24uc3RhcnRzV2l0aCgnY24tJykgPyAnYXdzLWNuJyA6ICdhd3MnO1xuICAgIHJlZ2lzdGVyRmFjdChyZWdpb24sICdQQVJUSVRJT04nLCBwYXJ0aXRpb24pO1xuXG4gICAgY29uc3QgZG9tYWluU3VmZml4ID0gcGFydGl0aW9uID09PSAnYXdzJyA/ICdhbWF6b25hd3MuY29tJyA6ICdhbWF6b25hd3MuY29tLmNuJztcbiAgICByZWdpc3RlckZhY3QocmVnaW9uLCAnRE9NQUlOX1NVRkZJWCcsIGRvbWFpblN1ZmZpeCk7XG5cbiAgICByZWdpc3RlckZhY3QocmVnaW9uLCAnQ0RLX01FVEFEQVRBX1JFU09VUkNFX0FWQUlMQUJMRScsIEFXU19DREtfTUVUQURBVEEuaGFzKHJlZ2lvbikgPyAnWUVTJyA6ICdOTycpO1xuXG4gICAgcmVnaXN0ZXJGYWN0KHJlZ2lvbiwgJ1MzX1NUQVRJQ19XRUJTSVRFX0VORFBPSU5UJywgQVdTX09MREVSX1JFR0lPTlMuaGFzKHJlZ2lvbilcbiAgICAgICAgPyBgczMtd2Vic2l0ZS0ke3JlZ2lvbn0uJHtkb21haW5TdWZmaXh9YFxuICAgICAgICA6IGBzMy13ZWJzaXRlLiR7cmVnaW9ufS4ke2RvbWFpblN1ZmZpeH1gKTtcblxuICAgIHJlZ2lzdGVyRmFjdChyZWdpb24sICdTM19TVEFUSUNfV0VCU0lURV9aT05FXzUzX0hPU1RFRF9aT05FX0lEJywgUk9VVEVfNTNfQlVDS0VUX1dFQlNJVEVfWk9ORV9JRFNbcmVnaW9uXSB8fCAnJyk7XG5cbiAgICBmb3IgKGNvbnN0IHNlcnZpY2Ugb2YgQVdTX1NFUlZJQ0VTKSB7XG4gICAgICByZWdpc3RlckZhY3QocmVnaW9uLCBbJ3NlcnZpY2VQcmluY2lwYWwnLCBzZXJ2aWNlXSwgRGVmYXVsdC5zZXJ2aWNlUHJpbmNpcGFsKHNlcnZpY2UsIHJlZ2lvbiwgZG9tYWluU3VmZml4KSk7XG4gICAgfVxuICB9XG4gIGxpbmVzLnB1c2goJyAgfScpO1xuICBsaW5lcy5wdXNoKCcnKTtcbiAgbGluZXMucHVzaCgnICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge30nKSxcbiAgbGluZXMucHVzaCgnfScpO1xuXG4gIGF3YWl0IGZzLndyaXRlRmlsZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnbGliJywgJ2J1aWx0LWlucy5nZW5lcmF0ZWQudHMnKSwgbGluZXMuam9pbignXFxuJykpO1xuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyRmFjdChyZWdpb246IHN0cmluZywgbmFtZTogc3RyaW5nIHwgc3RyaW5nW10sIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmYWN0TmFtZSA9IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyA/IG5hbWUgOiBgJHtuYW1lWzBdfSgke25hbWUuc2xpY2UoMSkubWFwKHMgPT4gSlNPTi5zdHJpbmdpZnkocykpLmpvaW4oJywgJyl9KWA7XG4gICAgbGluZXMucHVzaChgICAgIEZhY3QucmVnaXN0ZXIoeyByZWdpb246ICR7SlNPTi5zdHJpbmdpZnkocmVnaW9uKX0sIG5hbWU6IEZhY3ROYW1lLiR7ZmFjdE5hbWV9LCB2YWx1ZTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9IH0pO2ApO1xuICB9XG59XG5cbm1haW4oKS5jYXRjaChlID0+IHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1jb25zb2xlXG4gIGNvbnNvbGUuZXJyb3IoZSk7XG4gIHByb2Nlc3MuZXhpdCgtMSk7XG59KTtcbiJdfQ==