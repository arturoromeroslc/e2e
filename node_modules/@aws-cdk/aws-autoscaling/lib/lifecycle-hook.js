"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const core_1 = require("@aws-cdk/core");
const autoscaling_generated_1 = require("./autoscaling.generated");
/**
 * Define a life cycle hook
 */
class LifecycleHook extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id, {
            physicalName: props.lifecycleHookName,
        });
        this.role = props.role || new iam.Role(this, 'Role', {
            assumedBy: new iam.ServicePrincipal('autoscaling.amazonaws.com')
        });
        const targetProps = props.notificationTarget.bind(this, this);
        const resource = new autoscaling_generated_1.CfnLifecycleHook(this, 'Resource', {
            autoScalingGroupName: props.autoScalingGroup.autoScalingGroupName,
            defaultResult: props.defaultResult,
            heartbeatTimeout: props.heartbeatTimeout && props.heartbeatTimeout.toSeconds(),
            lifecycleHookName: this.physicalName,
            lifecycleTransition: props.lifecycleTransition,
            notificationMetadata: props.notificationMetadata,
            notificationTargetArn: targetProps.notificationTargetArn,
            roleArn: this.role.roleArn,
        });
        // A LifecycleHook resource is going to do a permissions test upon creation,
        // so we have to make sure the role has full permissions before creating the
        // lifecycle hook.
        resource.node.addDependency(this.role);
        this.lifecycleHookName = resource.ref;
    }
}
exports.LifecycleHook = LifecycleHook;
var DefaultResult;
(function (DefaultResult) {
    DefaultResult["CONTINUE"] = "CONTINUE";
    DefaultResult["ABANDON"] = "ABANDON";
})(DefaultResult = exports.DefaultResult || (exports.DefaultResult = {}));
/**
 * What instance transition to attach the hook to
 */
var LifecycleTransition;
(function (LifecycleTransition) {
    /**
     * Execute the hook when an instance is about to be added
     */
    LifecycleTransition["INSTANCE_LAUNCHING"] = "autoscaling:EC2_INSTANCE_LAUNCHING";
    /**
     * Execute the hook when an instance is about to be terminated
     */
    LifecycleTransition["INSTANCE_TERMINATING"] = "autoscaling:EC2_INSTANCE_TERMINATING";
})(LifecycleTransition = exports.LifecycleTransition || (exports.LifecycleTransition = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlLWhvb2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaWZlY3ljbGUtaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF5QztBQUN6Qyx3Q0FBeUU7QUFFekUsbUVBQTJEO0FBMkUzRDs7R0FFRztBQUNILE1BQWEsYUFBYyxTQUFRLGVBQVE7SUFZekMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF5QjtRQUNqRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLFlBQVksRUFBRSxLQUFLLENBQUMsaUJBQWlCO1NBQ3RDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRTtZQUNuRCxTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsMkJBQTJCLENBQUM7U0FDakUsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFOUQsTUFBTSxRQUFRLEdBQUcsSUFBSSx3Q0FBZ0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQ3RELG9CQUFvQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0I7WUFDakUsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFO1lBQzlFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxZQUFZO1lBQ3BDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxtQkFBbUI7WUFDOUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtZQUNoRCxxQkFBcUIsRUFBRSxXQUFXLENBQUMscUJBQXFCO1lBQ3hELE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87U0FDM0IsQ0FBQyxDQUFDO1FBRUgsNEVBQTRFO1FBQzVFLDRFQUE0RTtRQUM1RSxrQkFBa0I7UUFDbEIsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXZDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQXpDRCxzQ0F5Q0M7QUFFRCxJQUFZLGFBR1g7QUFIRCxXQUFZLGFBQWE7SUFDdkIsc0NBQXFCLENBQUE7SUFDckIsb0NBQW1CLENBQUE7QUFDckIsQ0FBQyxFQUhXLGFBQWEsR0FBYixxQkFBYSxLQUFiLHFCQUFhLFFBR3hCO0FBRUQ7O0dBRUc7QUFDSCxJQUFZLG1CQVVYO0FBVkQsV0FBWSxtQkFBbUI7SUFDN0I7O09BRUc7SUFDSCxnRkFBeUQsQ0FBQTtJQUV6RDs7T0FFRztJQUNILG9GQUE2RCxDQUFBO0FBQy9ELENBQUMsRUFWVyxtQkFBbUIsR0FBbkIsMkJBQW1CLEtBQW5CLDJCQUFtQixRQVU5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpYW0gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtaWFtJyk7XG5pbXBvcnQgeyBDb25zdHJ1Y3QsIER1cmF0aW9uLCBJUmVzb3VyY2UsIFJlc291cmNlIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBJQXV0b1NjYWxpbmdHcm91cCB9IGZyb20gJy4vYXV0by1zY2FsaW5nLWdyb3VwJztcbmltcG9ydCB7IENmbkxpZmVjeWNsZUhvb2sgfSBmcm9tICcuL2F1dG9zY2FsaW5nLmdlbmVyYXRlZCc7XG5pbXBvcnQgeyBJTGlmZWN5Y2xlSG9va1RhcmdldCB9IGZyb20gJy4vbGlmZWN5Y2xlLWhvb2stdGFyZ2V0JztcblxuLyoqXG4gKiBCYXNpYyBwcm9wZXJ0aWVzIGZvciBhIGxpZmVjeWNsZSBob29rXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmFzaWNMaWZlY3ljbGVIb29rUHJvcHMge1xuICAvKipcbiAgICogTmFtZSBvZiB0aGUgbGlmZWN5Y2xlIGhvb2tcbiAgICpcbiAgICogQGRlZmF1bHQgLSBBdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBuYW1lLlxuICAgKi9cbiAgcmVhZG9ubHkgbGlmZWN5Y2xlSG9va05hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBhY3Rpb24gdGhlIEF1dG8gU2NhbGluZyBncm91cCB0YWtlcyB3aGVuIHRoZSBsaWZlY3ljbGUgaG9vayB0aW1lb3V0IGVsYXBzZXMgb3IgaWYgYW4gdW5leHBlY3RlZCBmYWlsdXJlIG9jY3Vycy5cbiAgICpcbiAgICogQGRlZmF1bHQgQ29udGludWVcbiAgICovXG4gIHJlYWRvbmx5IGRlZmF1bHRSZXN1bHQ/OiBEZWZhdWx0UmVzdWx0O1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHRpbWUgYmV0d2VlbiBjYWxscyB0byBSZWNvcmRMaWZlY3ljbGVBY3Rpb25IZWFydGJlYXQgZm9yIHRoZSBob29rXG4gICAqXG4gICAqIElmIHRoZSBsaWZlY3ljbGUgaG9vayB0aW1lcyBvdXQsIHBlcmZvcm0gdGhlIGFjdGlvbiBpbiBEZWZhdWx0UmVzdWx0LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIGhlYXJ0YmVhdCB0aW1lb3V0LlxuICAgKi9cbiAgcmVhZG9ubHkgaGVhcnRiZWF0VGltZW91dD86IER1cmF0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdGUgb2YgdGhlIEFtYXpvbiBFQzIgaW5zdGFuY2UgdG8gd2hpY2ggeW91IHdhbnQgdG8gYXR0YWNoIHRoZSBsaWZlY3ljbGUgaG9vay5cbiAgICovXG4gIHJlYWRvbmx5IGxpZmVjeWNsZVRyYW5zaXRpb246IExpZmVjeWNsZVRyYW5zaXRpb247XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgZGF0YSB0byBwYXNzIHRvIHRoZSBsaWZlY3ljbGUgaG9vayB0YXJnZXRcbiAgICpcbiAgICogQGRlZmF1bHQgLSBObyBtZXRhZGF0YS5cbiAgICovXG4gIHJlYWRvbmx5IG5vdGlmaWNhdGlvbk1ldGFkYXRhPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdGFyZ2V0IG9mIHRoZSBsaWZlY3ljbGUgaG9va1xuICAgKi9cbiAgcmVhZG9ubHkgbm90aWZpY2F0aW9uVGFyZ2V0OiBJTGlmZWN5Y2xlSG9va1RhcmdldDtcblxuICAvKipcbiAgICogVGhlIHJvbGUgdGhhdCBhbGxvd3MgcHVibGlzaGluZyB0byB0aGUgbm90aWZpY2F0aW9uIHRhcmdldFxuICAgKlxuICAgKiBAZGVmYXVsdCAtIEEgcm9sZSBpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQuXG4gICAqL1xuICByZWFkb25seSByb2xlPzogaWFtLklSb2xlO1xufVxuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGEgTGlmZWN5Y2xlIGhvb2tcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaWZlY3ljbGVIb29rUHJvcHMgZXh0ZW5kcyBCYXNpY0xpZmVjeWNsZUhvb2tQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgQXV0b1NjYWxpbmdHcm91cCB0byBhZGQgdGhlIGxpZmVjeWNsZSBob29rIHRvXG4gICAqL1xuICByZWFkb25seSBhdXRvU2NhbGluZ0dyb3VwOiBJQXV0b1NjYWxpbmdHcm91cDtcbn1cblxuLyoqXG4gKiBBIGJhc2ljIGxpZmVjeWNsZSBob29rIG9iamVjdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIElMaWZlY3ljbGVIb29rIGV4dGVuZHMgSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFRoZSByb2xlIGZvciB0aGUgbGlmZWN5Y2xlIGhvb2sgdG8gZXhlY3V0ZVxuICAgKi9cbiAgcmVhZG9ubHkgcm9sZTogaWFtLklSb2xlO1xufVxuXG4vKipcbiAqIERlZmluZSBhIGxpZmUgY3ljbGUgaG9va1xuICovXG5leHBvcnQgY2xhc3MgTGlmZWN5Y2xlSG9vayBleHRlbmRzIFJlc291cmNlIGltcGxlbWVudHMgSUxpZmVjeWNsZUhvb2sge1xuICAvKipcbiAgICogVGhlIHJvbGUgdGhhdCBhbGxvd3MgdGhlIEFTRyB0byBwdWJsaXNoIHRvIHRoZSBub3RpZmljYXRpb24gdGFyZ2V0XG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgcm9sZTogaWFtLklSb2xlO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGlzIGxpZmVjeWNsZSBob29rXG4gICAqIEBhdHRyaWJ1dGVcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBsaWZlY3ljbGVIb29rTmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBMaWZlY3ljbGVIb29rUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHBoeXNpY2FsTmFtZTogcHJvcHMubGlmZWN5Y2xlSG9va05hbWUsXG4gICAgfSk7XG5cbiAgICB0aGlzLnJvbGUgPSBwcm9wcy5yb2xlIHx8IG5ldyBpYW0uUm9sZSh0aGlzLCAnUm9sZScsIHtcbiAgICAgIGFzc3VtZWRCeTogbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdhdXRvc2NhbGluZy5hbWF6b25hd3MuY29tJylcbiAgICB9KTtcblxuICAgIGNvbnN0IHRhcmdldFByb3BzID0gcHJvcHMubm90aWZpY2F0aW9uVGFyZ2V0LmJpbmQodGhpcywgdGhpcyk7XG5cbiAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBDZm5MaWZlY3ljbGVIb29rKHRoaXMsICdSZXNvdXJjZScsIHtcbiAgICAgIGF1dG9TY2FsaW5nR3JvdXBOYW1lOiBwcm9wcy5hdXRvU2NhbGluZ0dyb3VwLmF1dG9TY2FsaW5nR3JvdXBOYW1lLFxuICAgICAgZGVmYXVsdFJlc3VsdDogcHJvcHMuZGVmYXVsdFJlc3VsdCxcbiAgICAgIGhlYXJ0YmVhdFRpbWVvdXQ6IHByb3BzLmhlYXJ0YmVhdFRpbWVvdXQgJiYgcHJvcHMuaGVhcnRiZWF0VGltZW91dC50b1NlY29uZHMoKSxcbiAgICAgIGxpZmVjeWNsZUhvb2tOYW1lOiB0aGlzLnBoeXNpY2FsTmFtZSxcbiAgICAgIGxpZmVjeWNsZVRyYW5zaXRpb246IHByb3BzLmxpZmVjeWNsZVRyYW5zaXRpb24sXG4gICAgICBub3RpZmljYXRpb25NZXRhZGF0YTogcHJvcHMubm90aWZpY2F0aW9uTWV0YWRhdGEsXG4gICAgICBub3RpZmljYXRpb25UYXJnZXRBcm46IHRhcmdldFByb3BzLm5vdGlmaWNhdGlvblRhcmdldEFybixcbiAgICAgIHJvbGVBcm46IHRoaXMucm9sZS5yb2xlQXJuLFxuICAgIH0pO1xuXG4gICAgLy8gQSBMaWZlY3ljbGVIb29rIHJlc291cmNlIGlzIGdvaW5nIHRvIGRvIGEgcGVybWlzc2lvbnMgdGVzdCB1cG9uIGNyZWF0aW9uLFxuICAgIC8vIHNvIHdlIGhhdmUgdG8gbWFrZSBzdXJlIHRoZSByb2xlIGhhcyBmdWxsIHBlcm1pc3Npb25zIGJlZm9yZSBjcmVhdGluZyB0aGVcbiAgICAvLyBsaWZlY3ljbGUgaG9vay5cbiAgICByZXNvdXJjZS5ub2RlLmFkZERlcGVuZGVuY3kodGhpcy5yb2xlKTtcblxuICAgIHRoaXMubGlmZWN5Y2xlSG9va05hbWUgPSByZXNvdXJjZS5yZWY7XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gRGVmYXVsdFJlc3VsdCB7XG4gIENPTlRJTlVFID0gJ0NPTlRJTlVFJyxcbiAgQUJBTkRPTiA9ICdBQkFORE9OJyxcbn1cblxuLyoqXG4gKiBXaGF0IGluc3RhbmNlIHRyYW5zaXRpb24gdG8gYXR0YWNoIHRoZSBob29rIHRvXG4gKi9cbmV4cG9ydCBlbnVtIExpZmVjeWNsZVRyYW5zaXRpb24ge1xuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgaG9vayB3aGVuIGFuIGluc3RhbmNlIGlzIGFib3V0IHRvIGJlIGFkZGVkXG4gICAqL1xuICBJTlNUQU5DRV9MQVVOQ0hJTkcgPSAnYXV0b3NjYWxpbmc6RUMyX0lOU1RBTkNFX0xBVU5DSElORycsXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIGhvb2sgd2hlbiBhbiBpbnN0YW5jZSBpcyBhYm91dCB0byBiZSB0ZXJtaW5hdGVkXG4gICAqL1xuICBJTlNUQU5DRV9URVJNSU5BVElORyA9ICdhdXRvc2NhbGluZzpFQzJfSU5TVEFOQ0VfVEVSTUlOQVRJTkcnLFxufVxuIl19