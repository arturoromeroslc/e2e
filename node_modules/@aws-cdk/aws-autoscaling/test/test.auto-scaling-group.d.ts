import { Test } from 'nodeunit';
declare const _default: {
    'default fleet'(test: Test): void;
    'can set minCapacity, maxCapacity, desiredCapacity to 0'(test: Test): void;
    'validation is not performed when using Tokens'(test: Test): void;
    'userdata can be overriden by image'(test: Test): void;
    'userdata can be overriden at ASG directly'(test: Test): void;
    'can specify only min capacity'(test: Test): void;
    'can specify only max capacity'(test: Test): void;
    'can specify only desiredCount'(test: Test): void;
    'addToRolePolicy can be used to add statements to the role policy'(test: Test): void;
    'can configure replacing update'(test: Test): void;
    'can configure rolling update'(test: Test): void;
    'can configure resource signals'(test: Test): void;
    'can configure EC2 health check'(test: Test): void;
    'can configure EBS health check'(test: Test): void;
    'can add Security Group to Fleet'(test: Test): void;
    'can set tags'(test: Test): void;
    'allows setting spot price'(test: Test): void;
    'allows association of public IP address'(test: Test): void;
    'association of public IP address requires public subnet'(test: Test): void;
    'allows disassociation of public IP address'(test: Test): void;
    'does not specify public IP address association by default'(test: Test): void;
    'an existing role can be specified instead of auto-created'(test: Test): void;
    'defaultChild is available on an ASG'(test: Test): void;
    'can set blockDeviceMappings'(test: Test): void;
    'throws if ephemeral volumeIndex < 0'(test: Test): void;
    'throws if volumeType === IO1 without iops'(test: Test): void;
    'warning if iops without volumeType'(test: Test): void;
    'warning if iops and volumeType !== IO1'(test: Test): void;
};
export = _default;
