"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const elasticloadbalancingv2_generated_1 = require("../elasticloadbalancingv2.generated");
/**
 * The content type for a fixed response
 */
var ContentType;
(function (ContentType) {
    ContentType["TEXT_PLAIN"] = "text/plain";
    ContentType["TEXT_CSS"] = "text/css";
    ContentType["TEXT_HTML"] = "text/html";
    ContentType["APPLICATION_JAVASCRIPT"] = "application/javascript";
    ContentType["APPLICATION_JSON"] = "application/json";
})(ContentType = exports.ContentType || (exports.ContentType = {}));
/**
 * Define a new listener rule
 */
class ApplicationListenerRule extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.conditions = {};
        this.actions = [];
        if (!props.hostHeader && !props.pathPattern) {
            throw new Error(`At least one of 'hostHeader' or 'pathPattern' is required when defining a load balancing rule.`);
        }
        if (props.targetGroups && props.fixedResponse) {
            throw new Error('Cannot combine `targetGroups` with `fixedResponse`.');
        }
        this.listener = props.listener;
        const resource = new elasticloadbalancingv2_generated_1.CfnListenerRule(this, 'Resource', {
            listenerArn: props.listener.listenerArn,
            priority: props.priority,
            conditions: cdk.Lazy.anyValue({ produce: () => this.renderConditions() }),
            actions: cdk.Lazy.anyValue({ produce: () => this.actions }),
        });
        if (props.hostHeader) {
            this.setCondition('host-header', [props.hostHeader]);
        }
        if (props.pathPattern) {
            this.setCondition('path-pattern', [props.pathPattern]);
        }
        (props.targetGroups || []).forEach(this.addTargetGroup.bind(this));
        if (props.fixedResponse) {
            this.addFixedResponse(props.fixedResponse);
        }
        this.listenerRuleArn = resource.ref;
    }
    /**
     * Add a non-standard condition to this rule
     */
    setCondition(field, values) {
        this.conditions[field] = values;
    }
    /**
     * Add a TargetGroup to load balance to
     */
    addTargetGroup(targetGroup) {
        this.actions.push({
            targetGroupArn: targetGroup.targetGroupArn,
            type: 'forward'
        });
        targetGroup.registerListener(this.listener, this);
    }
    /**
     * Add a fixed response
     */
    addFixedResponse(fixedResponse) {
        validateFixedResponse(fixedResponse);
        this.actions.push({
            fixedResponseConfig: fixedResponse,
            type: 'fixed-response'
        });
    }
    /**
     * Validate the rule
     */
    validate() {
        if (this.actions.length === 0) {
            return ['Listener rule needs at least one action'];
        }
        return [];
    }
    /**
     * Render the conditions for this rule
     */
    renderConditions() {
        const ret = [];
        for (const [field, values] of Object.entries(this.conditions)) {
            if (values !== undefined) {
                ret.push({ field, values });
            }
        }
        return ret;
    }
}
exports.ApplicationListenerRule = ApplicationListenerRule;
/**
 * Validate the status code and message body of a fixed response
 *
 * @internal
 */
function validateFixedResponse(fixedResponse) {
    if (fixedResponse.statusCode && !/^(2|4|5)\d\d$/.test(fixedResponse.statusCode)) {
        throw new Error('`statusCode` must be 2XX, 4XX or 5XX.');
    }
    if (fixedResponse.messageBody && fixedResponse.messageBody.length > 1024) {
        throw new Error('`messageBody` cannot have more than 1024 characters.');
    }
}
exports.validateFixedResponse = validateFixedResponse;
//# sourceMappingURL=data:application/json;base64,