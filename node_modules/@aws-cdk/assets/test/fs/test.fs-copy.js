"use strict";
const fs = require("fs");
const os = require("os");
const path = require("path");
const copy_1 = require("../../lib/fs/copy");
const follow_mode_1 = require("../../lib/fs/follow-mode");
function tree(dir, depth = '') {
    const lines = [];
    for (const file of fs.readdirSync(dir).sort()) {
        const filePath = path.join(dir, file);
        const stat = fs.lstatSync(filePath);
        if (stat.isSymbolicLink()) {
            const linkDest = fs.readlinkSync(filePath);
            lines.push(depth + file + ' => ' + linkDest);
        }
        else if (stat.isDirectory()) {
            lines.push(depth + file + ' (D)');
            lines.push(...tree(filePath, depth + '    '));
        }
        else {
            lines.push(depth + file);
        }
    }
    return lines;
}
module.exports = {
    'Default: copies all files and subdirectories, with default follow mode is "External"'(test) {
        // GIVEN
        const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'copy-tests'));
        // WHEN
        copy_1.copyDirectory(path.join(__dirname, 'fixtures', 'test1'), outdir);
        // THEN
        test.deepEqual(tree(outdir), [
            'external-link.txt',
            'file1.txt',
            'local-link.txt => file1.txt',
            'subdir (D)',
            '    file2.txt',
            'subdir2 (D)',
            '    empty-subdir (D)',
            '        .hidden',
            '    subdir3 (D)',
            '        file3.txt'
        ]);
        test.done();
    },
    'Always: follow all symlinks'(test) {
        // GIVEN
        const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'copy-tests'));
        // WHEN
        copy_1.copyDirectory(path.join(__dirname, 'fixtures', 'symlinks'), outdir, {
            follow: follow_mode_1.FollowMode.ALWAYS
        });
        // THEN
        test.deepEqual(tree(outdir), [
            'external-dir-link (D)',
            '    file2.txt',
            'external-link.txt',
            'indirect-external-link.txt',
            'local-dir-link (D)',
            '    file-in-subdir.txt',
            'local-link.txt',
            'normal-dir (D)',
            '    file-in-subdir.txt',
            'normal-file.txt'
        ]);
        test.done();
    },
    'Never: do not follow all symlinks'(test) {
        // GIVEN
        const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'copy-tests'));
        // WHEN
        copy_1.copyDirectory(path.join(__dirname, 'fixtures', 'symlinks'), outdir, {
            follow: follow_mode_1.FollowMode.NEVER
        });
        // THEN
        test.deepEqual(tree(outdir), [
            'external-dir-link => ../test1/subdir',
            'external-link.txt => ../test1/subdir2/subdir3/file3.txt',
            'indirect-external-link.txt => external-link.txt',
            'local-dir-link => normal-dir',
            'local-link.txt => normal-file.txt',
            'normal-dir (D)',
            '    file-in-subdir.txt',
            'normal-file.txt'
        ]);
        test.done();
    },
    'External: follow only external symlinks'(test) {
        // GIVEN
        const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'copy-tests'));
        // WHEN
        copy_1.copyDirectory(path.join(__dirname, 'fixtures', 'symlinks'), outdir, {
            follow: follow_mode_1.FollowMode.EXTERNAL
        });
        // THEN
        test.deepEqual(tree(outdir), [
            'external-dir-link (D)',
            '    file2.txt',
            'external-link.txt',
            'indirect-external-link.txt => external-link.txt',
            'local-dir-link => normal-dir',
            'local-link.txt => normal-file.txt',
            'normal-dir (D)',
            '    file-in-subdir.txt',
            'normal-file.txt'
        ]);
        test.done();
    },
    'exclude'(test) {
        // GIVEN
        const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'copy-tests'));
        // WHEN
        copy_1.copyDirectory(path.join(__dirname, 'fixtures', 'test1'), outdir, {
            exclude: [
                '*',
                '!subdir2',
                '!subdir2/**/*',
                '.*'
            ]
        });
        // THEN
        test.deepEqual(tree(outdir), [
            'subdir2 (D)',
            '    empty-subdir (D)',
            '    subdir3 (D)',
            '        file3.txt'
        ]);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,