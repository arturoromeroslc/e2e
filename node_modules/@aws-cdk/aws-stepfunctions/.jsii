{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch",
          "signAssembly": true,
          "versionSuffix": "-devpreview"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      },
      "version": "1.7.0"
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events",
          "signAssembly": true,
          "versionSuffix": "-devpreview"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      },
      "version": "1.7.0"
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM",
          "signAssembly": true,
          "versionSuffix": "-devpreview"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      },
      "version": "1.7.0"
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK",
          "signAssembly": true,
          "versionSuffix": "-devpreview"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      },
      "version": "1.7.0"
    }
  },
  "dependencyClosure": {
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch",
          "signAssembly": true,
          "versionSuffix": "-devpreview"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      },
      "version": "1.7.0"
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events",
          "signAssembly": true,
          "versionSuffix": "-devpreview"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      },
      "version": "1.7.0"
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM",
          "signAssembly": true,
          "versionSuffix": "-devpreview"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      },
      "version": "1.7.0"
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK",
          "signAssembly": true,
          "versionSuffix": "-devpreview"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      },
      "version": "1.7.0"
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI",
          "signAssembly": true,
          "versionSuffix": "-devpreview"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      },
      "version": "1.7.0"
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo",
          "signAssembly": true,
          "versionSuffix": "-devpreview"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk",
            "versionSuffix": ".DEVPREVIEW"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      },
      "version": "1.7.0"
    }
  },
  "description": "The CDK Construct Library for AWS::StepFunctions",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "0.16.0 (build 98909b5)",
  "license": "Apache-2.0",
  "name": "@aws-cdk/aws-stepfunctions",
  "readme": {
    "markdown": "## AWS Step Functions Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![Stability: Experimental](https://img.shields.io/badge/stability-Experimental-important.svg?style=for-the-badge)\n\n> **This is a _developer preview_ (public beta) module. Releases might lack important features and might have\n> future breaking changes.**\n>\n> This API is still under active development and subject to non-backward\n> compatible changes or removal in any future version. Use of the API is not recommended in production\n> environments. Experimental APIs are not subject to the Semantic Versioning model.\n\n---\n<!--END STABILITY BANNER-->\n\nThe `@aws-cdk/aws-stepfunctions` package contains constructs for building\nserverless workflows using objects. Use this in conjunction with the\n`@aws-cdk/aws-stepfunctions-tasks` package, which contains classes used\nto call other AWS services.\n\nDefining a workflow looks like this (for the [Step Functions Job Poller\nexample](https://docs.aws.amazon.com/step-functions/latest/dg/job-status-poller-sample.html)):\n\n### TypeScript example\n\n```ts\nimport sfn = require('@aws-cdk/aws-stepfunctions');\nimport tasks = require('@aws-cdk/aws-stepfunctions-tasks');\n\nconst submitLambda = new lambda.Function(this, 'SubmitLambda', { ... });\nconst getStatusLambda = new lambda.Function(this, 'CheckLambda', { ... });\n\nconst submitJob = new sfn.Task(this, 'Submit Job', {\n    task: new tasks.InvokeFunction(submitLambda),\n    // Put Lambda's result here in the execution's state object\n    resultPath: '$.guid',\n});\n\nconst waitX = new sfn.Wait(this, 'Wait X Seconds', {\n    duration: sfn.WaitDuration.secondsPath('$.wait_time'),\n});\n\nconst getStatus = new sfn.Task(this, 'Get Job Status', {\n    task: new tasks.InvokeFunction(getStatusLambda),\n    // Pass just the field named \"guid\" into the Lambda, put the\n    // Lambda's result in a field called \"status\"\n    inputPath: '$.guid',\n    resultPath: '$.status',\n});\n\nconst jobFailed = new sfn.Fail(this, 'Job Failed', {\n    cause: 'AWS Batch Job Failed',\n    error: 'DescribeJob returned FAILED',\n});\n\nconst finalStatus = new sfn.Task(this, 'Get Final Job Status', {\n    task: new tasks.InvokeFunction(getStatusLambda),\n    // Use \"guid\" field as input, output of the Lambda becomes the\n    // entire state machine output.\n    inputPath: '$.guid',\n});\n\nconst definition = submitJob\n    .next(waitX)\n    .next(getStatus)\n    .next(new sfn.Choice(this, 'Job Complete?')\n        // Look at the \"status\" field\n        .when(sfn.Condition.stringEquals('$.status', 'FAILED'), jobFailed)\n        .when(sfn.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)\n        .otherwise(waitX));\n\nnew sfn.StateMachine(this, 'StateMachine', {\n    definition,\n    timeout: Duration.minutes(5)\n});\n```\n\n## State Machine\n\nA `stepfunctions.StateMachine` is a resource that takes a state machine\ndefinition. The definition is specified by its start state, and encompasses\nall states reachable from the start state:\n\n```ts\nconst startState = new stepfunctions.Pass(this, 'StartState');\n\nnew stepfunctions.StateMachine(this, 'StateMachine', {\n    definition: startState\n});\n```\n\nState machines execute using an IAM Role, which will automatically have all\npermissions added that are required to make all state machine tasks execute\nproperly (for example, permissions to invoke any Lambda functions you add to\nyour workflow). A role will be created by default, but you can supply an\nexisting one as well.\n\n## Amazon States Language\n\nThis library comes with a set of classes that model the [Amazon States\nLanguage](https://states-language.net/spec.html). The following State classes\nare supported:\n\n* `Task`\n* `Pass`\n* `Wait`\n* `Choice`\n* `Parallel`\n* `Succeed`\n* `Fail`\n\nAn arbitrary JSON object (specified at execution start) is passed from state to\nstate and transformed during the execution of the workflow. For more\ninformation, see the States Language spec.\n\n### Task\n\nA `Task` represents some work that needs to be done. The exact work to be\ndone is determine by a class that implements `IStepFunctionsTask`, a collection\nof which can be found in the `@aws-cdk/aws-stepfunctions-tasks` package. A\ncouple of the tasks available are:\n\n* `tasks.InvokeActivity` -- start an Activity (Activities represent a work\n  queue that you poll on a compute fleet you manage yourself)\n* `tasks.InvokeFunction` -- invoke a Lambda function with function ARN\n* `tasks.RunLambdaTask` -- call Lambda as integrated service with magic ARN\n* `tasks.PublishToTopic` -- publish a message to an SNS topic\n* `tasks.SendToQueue` -- send a message to an SQS queue\n* `tasks.RunEcsFargateTask`/`ecs.RunEcsEc2Task` -- run a container task,\n  depending on the type of capacity.\n* `tasks.SagemakerTrainTask` -- run a SageMaker training job\n* `tasks.SagemakerTransformTask` -- run a SageMaker transform job\n* `tasks.StartExecution` -- call StartExecution to a state machine of Step Functions\n\nExcept `tasks.InvokeActivity` and `tasks.InvokeFunction`, the [service integration\npattern](https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html)\n(`integrationPattern`) are supposed to be given as parameter when customers want\nto call integrated services within a Task state. The default value is `FIRE_AND_FORGET`.\n\n#### Task parameters from the state json\n\nMany tasks take parameters. The values for those can either be supplied\ndirectly in the workflow definition (by specifying their values), or at\nruntime by passing a value obtained from the static functions on `Data`,\nsuch as `Data.stringAt()`.\n\nIf so, the value is taken from the indicated location in the state JSON,\nsimilar to (for example) `inputPath`.\n\n#### Lambda example - InvokeFunction\n\n```ts\nconst task = new sfn.Task(this, 'Invoke1', {\n    task: new tasks.InvokeFunction(myLambda),\n    inputPath: '$.input',\n    timeout: Duration.minutes(5),\n});\n\n// Add a retry policy\ntask.addRetry({\n    interval: Duration.seconds(5),\n    maxAttempts: 10\n});\n\n// Add an error handler\ntask.addCatch(errorHandlerState);\n\n// Set the next state\ntask.next(nextState);\n```\n\n#### Lambda example - RunLambdaTask\n\n```ts\n  const task = new sfn.Task(stack, 'Invoke2', {\n    task: new tasks.RunLambdaTask(myLambda, {\n      integrationPattern: sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN,\n      payload: {\n        token: sfn.Context.taskToken\n      }\n    })\n  });\n```\n\n#### SNS example\n\n```ts\nimport sns = require('@aws-cdk/aws-sns');\n\n// ...\n\nconst topic = new sns.Topic(this, 'Topic');\n\n// Use a field from the execution data as message.\nconst task1 = new sfn.Task(this, 'Publish1', {\n    task: new tasks.PublishToTopic(topic, {\n        integrationPattern: sfn.ServiceIntegrationPattern.FIRE_AND_FORGET,\n        message: TaskInput.fromDataAt('$.state.message'),\n    })\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new sfn.Task(this, 'Publish2', {\n    task: new tasks.PublishToTopic(topic, {\n        message: TaskInput.fromObject({\n            field1: 'somedata',\n            field2: Data.stringAt('$.field2'),\n        })\n    })\n});\n```\n\n#### SQS example\n\n```ts\nimport sqs = require('@aws-cdk/aws-sqs');\n\n// ...\n\nconst queue = new sns.Queue(this, 'Queue');\n\n// Use a field from the execution data as message.\nconst task1 = new sfn.Task(this, 'Send1', {\n    task: new tasks.SendToQueue(queue, {\n        messageBody: TaskInput.fromDataAt('$.message'),\n        // Only for FIFO queues\n        messageGroupId: '1234'\n    })\n});\n\n// Combine a field from the execution data with\n// a literal object.\nconst task2 = new sfn.Task(this, 'Send2', {\n    task: new tasks.SendToQueue(queue, {\n        messageBody: TaskInput.fromObject({\n            field1: 'somedata',\n            field2: Data.stringAt('$.field2'),\n        }),\n        // Only for FIFO queues\n        messageGroupId: '1234'\n    })\n});\n```\n\n#### ECS example\n\n```ts\nimport ecs = require('@aws-cdk/aws-ecs');\n\n// See examples in ECS library for initialization of 'cluster' and 'taskDefinition'\n\nconst fargateTask = new ecs.RunEcsFargateTask({\n  cluster,\n  taskDefinition,\n  containerOverrides: [\n    {\n      containerName: 'TheContainer',\n      environment: [\n        {\n          name: 'CONTAINER_INPUT',\n          value: Data.stringAt('$.valueFromStateData')\n        }\n      ]\n    }\n  ]\n});\n\nfargateTask.connections.allowToDefaultPort(rdsCluster, 'Read the database');\n\nconst task = new sfn.Task(this, 'CallFargate', {\n    task: fargateTask\n});\n```\n\n#### SageMaker Transform example\n\n```ts\nconst transformJob = new tasks.SagemakerTransformTask(\n    transformJobName: \"MyTransformJob\",\n    modelName: \"MyModelName\",\n    role,\n    transformInput: {\n        transformDataSource: {\n            s3DataSource: {\n                s3Uri: 's3://inputbucket/train',\n                s3DataType: S3DataType.S3Prefix,\n            }\n        }\n    },\n    transformOutput: {\n        s3OutputPath: 's3://outputbucket/TransformJobOutputPath',\n    },\n    transformResources: {\n        instanceCount: 1,\n        instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLarge),\n});\n\nconst task = new sfn.Task(this, 'Batch Inference', {\n    task: transformJob\n});\n```\n\n#### Step Functions example\n\n```ts\n// Define a state machine with one Pass state\nconst child = new sfn.StateMachine(stack, 'ChildStateMachine', {\n    definition: sfn.Chain.start(new sfn.Pass(stack, 'PassState')),\n});\n\n// Include the state machine in a Task state with callback pattern\nconst task = new sfn.Task(stack, 'ChildTask', {\n  task: new tasks.ExecuteStateMachine(child, {\n    integrationPattern: sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN,\n    input: {\n      token: sfn.Context.taskToken,\n      foo: 'bar'\n    },\n    name: 'MyExecutionName'\n  })\n});\n\n// Define a second state machine with the Task state above\nnew sfn.StateMachine(stack, 'ParentStateMachine', {\n  definition: task\n});\n```\n\n### Pass\n\nA `Pass` state does no work, but it can optionally transform the execution's\nJSON state.\n\n```ts\n// Makes the current JSON state { ..., \"subObject\": { \"hello\": \"world\" } }\nconst pass = new stepfunctions.Pass(this, 'Add Hello World', {\n    result: { hello: \"world\" },\n    resultPath: '$.subObject',\n});\n\n// Set the next state\npass.next(nextState);\n```\n\n### Wait\n\nA `Wait` state waits for a given number of seconds, or until the current time\nhits a particular time. The time to wait may be taken from the execution's JSON\nstate.\n\n```ts\n// Wait until it's the time mentioned in the the state object's \"triggerTime\"\n// field.\nconst wait = new stepfunctions.Wait(this, 'Wait For Trigger Time', {\n    duration: stepfunctions.WaitDuration.timestampPath('$.triggerTime'),\n});\n\n// Set the next state\nwait.next(startTheWork);\n```\n\n### Choice\n\nA `Choice` state can take a differen path through the workflow based on the\nvalues in the execution's JSON state:\n\n```ts\nconst choice = new stepfunctions.Choice(this, 'Did it work?');\n\n// Add conditions with .when()\nchoice.when(stepfunctions.Condition.stringEqual('$.status', 'SUCCESS'), successState);\nchoice.when(stepfunctions.Condition.numberGreaterThan('$.attempts', 5), failureState);\n\n// Use .otherwise() to indicate what should be done if none of the conditions match\nchoice.otherwise(tryAgainState);\n```\n\nIf you want to temporarily branch your workflow based on a condition, but have\nall branches come together and continuing as one (similar to how an `if ...\nthen ... else` works in a programming language), use the `.afterwards()` method:\n\n```ts\nconst choice = new stepfunctions.Choice(this, 'What color is it?');\nchoice.when(stepfunctions.Condition.stringEqual('$.color', 'BLUE'), handleBlueItem);\nchoice.when(stepfunctions.Condition.stringEqual('$.color', 'RED'), handleRedItem);\nchoice.otherwise(handleOtherItemColor);\n\n// Use .afterwards() to join all possible paths back together and continue\nchoice.afterwards().next(shipTheItem);\n```\n\nIf your `Choice` doesn't have an `otherwise()` and none of the conditions match\nthe JSON state, a `NoChoiceMatched` error will be thrown. Wrap the state machine\nin a `Parallel` state if you want to catch and recover from this.\n\n### Parallel\n\nA `Parallel` state executes one or more subworkflows in parallel. It can also\nbe used to catch and recover from errors in subworkflows.\n\n```ts\nconst parallel = new stepfunctions.Parallel(this, 'Do the work in parallel');\n\n// Add branches to be executed in parallel\nparallel.branch(shipItem);\nparallel.branch(sendInvoice);\nparallel.branch(restock);\n\n// Retry the whole workflow if something goes wrong\nparallel.addRetry({ maxAttempts: 1 });\n\n// How to recover from errors\nparallel.addCatch(sendFailureNotification);\n\n// What to do in case everything succeeded\nparallel.next(closeOrder);\n```\n\n### Succeed\n\nReaching a `Succeed` state terminates the state machine execution with a\nsuccesful status.\n\n```ts\nconst success = new stepfunctions.Succeed(this, 'We did it!');\n```\n\n### Fail\n\nReaching a `Fail` state terminates the state machine execution with a\nfailure status. The fail state should report the reason for the failure.\nFailures can be caught by encompassing `Parallel` states.\n\n```ts\nconst success = new stepfunctions.Fail(this, 'Fail', {\n    error: 'WorkflowFailure',\n    cause: \"Something went wrong\"\n});\n```\n\n## Task Chaining\n\nTo make defining work flows as convenient (and readable in a top-to-bottom way)\nas writing regular programs, it is possible to chain most methods invocations.\nIn particular, the `.next()` method can be repeated. The result of a series of\n`.next()` calls is called a **Chain**, and can be used when defining the jump\ntargets of `Choice.on` or `Parallel.branch`:\n\n```ts\nconst definition = step1\n    .next(step2)\n    .next(choice\n        .when(condition1, step3.next(step4).next(step5))\n        .otherwise(step6)\n        .afterwards())\n    .next(parallel\n        .branch(step7.next(step8))\n        .branch(step9.next(step10)))\n    .next(finish);\n\nnew stepfunctions.StateMachine(this, 'StateMachine', {\n    definition,\n});\n```\n\nIf you don't like the visual look of starting a chain directly off the first\nstep, you can use `Chain.start`:\n\n```ts\nconst definition = stepfunctions.Chain\n    .start(step1)\n    .next(step2)\n    .next(step3)\n    // ...\n```\n\n\n## State Machine Fragments\n\nIt is possible to define reusable (or abstracted) mini-state machines by\ndefining a construct that implements `IChainable`, which requires you to define\ntwo fields:\n\n* `startState: State`, representing the entry point into this state machine.\n* `endStates: INextable[]`, representing the (one or more) states that outgoing\n  transitions will be added to if you chain onto the fragment.\n\nSince states will be named after their construct IDs, you may need to prefix the\nIDs of states if you plan to instantiate the same state machine fragment\nmultiples times (otherwise all states in every instantiation would have the same\nname).\n\nThe class `StateMachineFragment` contains some helper functions (like\n`prefixStates()`) to make it easier for you to do this. If you define your state\nmachine as a subclass of this, it will be convenient to use:\n\n```ts\ninterface MyJobProps {\n    jobFlavor: string;\n}\n\nclass MyJob extends stepfunctions.StateMachineFragment {\n    public readonly startState: State;\n    public readonly endStates: INextable[];\n\n    constructor(parent: cdk.Construct, id: string, props: MyJobProps) {\n        super(parent, id);\n\n        const first = new stepfunctions.Task(this, 'First', { ... });\n        // ...\n        const last = new stepfunctions.Task(this, 'Last', { ... });\n\n        this.startState = first;\n        this.endStates = [last];\n    }\n}\n\n// Do 3 different variants of MyJob in parallel\nnew stepfunctions.Parallel(this, 'All jobs')\n    .branch(new MyJob(this, 'Quick', { jobFlavor: 'quick' }).prefixStates())\n    .branch(new MyJob(this, 'Medium', { jobFlavor: 'medium' }).prefixStates())\n    .branch(new MyJob(this, 'Slow', { jobFlavor: 'slow' }).prefixStates());\n```\n\n## Activity\n\n**Activities** represent work that is done on some non-Lambda worker pool. The\nStep Functions workflow will submit work to this Activity, and a worker pool\nthat you run yourself, probably on EC2, will pull jobs from the Activity and\nsubmit the results of individual jobs back.\n\nYou need the ARN to do so, so if you use Activities be sure to pass the Activity\nARN into your worker pool:\n\n```ts\nconst activity = new stepfunctions.Activity(this, 'Activity');\n\n// Read this CloudFormation Output from your application and use it to poll for work on\n// the activity.\nnew cdk.CfnOutput(this, 'ActivityArn', { value: activity.activityArn });\n```\n\n## Metrics\n\n`Task` object expose various metrics on the execution of that particular task. For example,\nto create an alarm on a particular task failing:\n\n```ts\nnew cloudwatch.Alarm(this, 'TaskAlarm', {\n    metric: task.metricFailed(),\n    threshold: 1,\n    evaluationPeriods: 1,\n});\n```\n\nThere are also metrics on the complete state machine:\n\n```ts\nnew cloudwatch.Alarm(this, 'StateMachineAlarm', {\n    metric: stateMachine.metricFailed(),\n    threshold: 1,\n    evaluationPeriods: 1,\n});\n```\n\nAnd there are metrics on the capacity of all state machines in your account:\n\n```ts\nnew cloudwatch.Alarm(this, 'ThrottledAlarm', {\n    metric: StateTransitionMetrics.metricThrottledEvents(),\n    threshold: 10,\n    evaluationPeriods: 2,\n});\n```\n\n\n## Future work\n\nContributions welcome:\n\n- [ ] A single `LambdaTask` class that is both a `Lambda` and a `Task` in one\n  might make for a nice API.\n- [ ] Expression parser for Conditions.\n- [ ] Simulate state machines in unit tests.\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-stepfunctions",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "assemblyOriginatorKeyFile": "../../key.snk",
      "namespace": "Amazon.CDK.AWS.StepFunctions",
      "packageId": "Amazon.CDK.AWS.StepFunctions",
      "signAssembly": true,
      "versionSuffix": "-devpreview"
    },
    "java": {
      "maven": {
        "artifactId": "stepfunctions",
        "groupId": "software.amazon.awscdk",
        "versionSuffix": ".DEVPREVIEW"
      },
      "package": "software.amazon.awscdk.services.stepfunctions"
    },
    "js": {
      "npm": "@aws-cdk/aws-stepfunctions"
    },
    "python": {
      "distName": "aws-cdk.aws-stepfunctions",
      "module": "aws_cdk.aws_stepfunctions"
    }
  },
  "types": {
    "@aws-cdk/aws-stepfunctions.Activity": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "experimental",
        "summary": "Define a new StepFunctions activity."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Activity",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.ActivityProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IActivity"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/activity.ts",
        "line": 17
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Construct an Activity from an existing Activity ARN."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 21
          },
          "name": "fromActivityArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "activityArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.IActivity"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Construct an Activity from an existing Activity Name."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 35
          },
          "name": "fromActivityName",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "activityName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.IActivity"
            }
          },
          "static": true
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Return the given named metric for this Activity."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 78
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times this activity fails."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 156
          },
          "name": "metricFailed",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times the heartbeat times out for this activity."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 165
          },
          "name": "metricHeartbeatTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "experimental",
            "summary": "The interval, in milliseconds, between the time the activity starts and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 93
          },
          "name": "metricRunTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times this activity is scheduled."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 120
          },
          "name": "metricScheduled",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "experimental",
            "summary": "The interval, in milliseconds, for which the activity stays in the schedule state."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 102
          },
          "name": "metricScheduleTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times this activity is started."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 138
          },
          "name": "metricStarted",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times this activity succeeds."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 147
          },
          "name": "metricSucceeded",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "experimental",
            "summary": "The interval, in milliseconds, between the time the activity is scheduled and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 111
          },
          "name": "metricTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times this activity times out."
          },
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 129
          },
          "name": "metricTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        }
      ],
      "name": "Activity",
      "properties": [
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 47
          },
          "name": "activityArn",
          "overrides": "@aws-cdk/aws-stepfunctions.IActivity",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 52
          },
          "name": "activityName",
          "overrides": "@aws-cdk/aws-stepfunctions.IActivity",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.ActivityProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.ActivityProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/activity.ts",
        "line": 5
      },
      "name": "ActivityProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "If not supplied, a name is generated",
            "stability": "experimental",
            "summary": "The name for this activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 11
          },
          "name": "activityName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.AfterwardsOptions": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for selecting the choice paths."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.AfterwardsOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/choice.ts",
        "line": 104
      },
      "name": "AfterwardsOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If this is true, all states which are error handlers (added through 'onError')\nand states reachable via error handlers will be included as well.",
            "stability": "experimental",
            "summary": "Whether to include error handling states."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 113
          },
          "name": "includeErrorHandlers",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "remarks": "If this is true and the current Choice does not have a default outgoing\ntransition, one will be added included when .next() is called on the chain.",
            "stability": "experimental",
            "summary": "Whether to include the default/otherwise transition for the current Choice state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 123
          },
          "name": "includeOtherwise",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.CatchProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Error handler details."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CatchProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 122
      },
      "name": "CatchProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "All errors",
            "remarks": "A list of error strings to retry, which can be either predefined errors\n(for example Errors.NoChoiceMatched) or a self-defined error.",
            "stability": "experimental",
            "summary": "Errors to recover from by going to the given state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 131
          },
          "name": "errors",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the error\ndata to be discarded.",
            "stability": "experimental",
            "summary": "JSONPath expression to indicate where to inject the error data."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 141
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.CfnActivity": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::StepFunctions::Activity"
        },
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html",
        "stability": "external",
        "summary": "A CloudFormation `AWS::StepFunctions::Activity`."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnActivity",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::StepFunctions::Activity`."
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.CfnActivityProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 71
      },
      "methods": [
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 116
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnActivity",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 75
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Name"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 80
          },
          "name": "attrName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 110
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html#cfn-stepfunctions-activity-tags",
            "stability": "external",
            "summary": "`AWS::StepFunctions::Activity.Tags`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 92
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html#cfn-stepfunctions-activity-name",
            "stability": "external",
            "summary": "`AWS::StepFunctions::Activity.Name`."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 86
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.CfnActivity.TagsEntryProperty": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-activity-tagsentry.html",
        "stability": "external"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnActivity.TagsEntryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 126
      },
      "name": "TagsEntryProperty",
      "namespace": "CfnActivity",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-activity-tagsentry.html#cfn-stepfunctions-activity-tagsentry-key",
            "stability": "external",
            "summary": "`CfnActivity.TagsEntryProperty.Key`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 131
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-activity-tagsentry.html#cfn-stepfunctions-activity-tagsentry-value",
            "stability": "external",
            "summary": "`CfnActivity.TagsEntryProperty.Value`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 136
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.CfnActivityProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html",
        "stability": "external",
        "summary": "Properties for defining a `AWS::StepFunctions::Activity`."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnActivityProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 16
      },
      "name": "CfnActivityProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html#cfn-stepfunctions-activity-name",
            "stability": "external",
            "summary": "`AWS::StepFunctions::Activity.Name`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 22
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html#cfn-stepfunctions-activity-tags",
            "stability": "external",
            "summary": "`AWS::StepFunctions::Activity.Tags`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 28
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.CfnActivity.TagsEntryProperty"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachine": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.CfnResource",
      "docs": {
        "custom": {
          "cloudformationResource": "AWS::StepFunctions::StateMachine"
        },
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html",
        "stability": "external",
        "summary": "A CloudFormation `AWS::StepFunctions::StateMachine`."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine",
      "initializer": {
        "docs": {
          "stability": "external",
          "summary": "Create a new `AWS::StepFunctions::StateMachine`."
        },
        "parameters": [
          {
            "docs": {
              "summary": "- scope in which this resource is defined."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "summary": "- scoped id of the resource."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "summary": "- resource properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachineProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 252
      },
      "methods": [
        {
          "docs": {
            "stability": "external"
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 314
          },
          "name": "renderProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "parameters": [
            {
              "name": "props",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          }
        }
      ],
      "name": "CfnStateMachine",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "external",
            "summary": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 256
          },
          "name": "CFN_RESOURCE_TYPE_NAME",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "cloudformationAttribute": "Name"
            },
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 261
          },
          "name": "attrName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "external"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 306
          },
          "name": "cfnProperties",
          "overrides": "@aws-cdk/core.CfnResource",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-tags",
            "stability": "external",
            "summary": "`AWS::StepFunctions::StateMachine.Tags`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 285
          },
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/core.TagManager"
          }
        },
        {
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definitionstring",
            "stability": "external",
            "summary": "`AWS::StepFunctions::StateMachine.DefinitionString`."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 267
          },
          "name": "definitionString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-rolearn",
            "stability": "external",
            "summary": "`AWS::StepFunctions::StateMachine.RoleArn`."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 273
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-statemachinename",
            "stability": "external",
            "summary": "`AWS::StepFunctions::StateMachine.StateMachineName`."
          },
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 279
          },
          "name": "stateMachineName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachine.TagsEntryProperty": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-tagsentry.html",
        "stability": "external"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.TagsEntryProperty",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 324
      },
      "name": "TagsEntryProperty",
      "namespace": "CfnStateMachine",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-tagsentry.html#cfn-stepfunctions-statemachine-tagsentry-key",
            "stability": "external",
            "summary": "`CfnStateMachine.TagsEntryProperty.Key`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 329
          },
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stepfunctions-statemachine-tagsentry.html#cfn-stepfunctions-statemachine-tagsentry-value",
            "stability": "external",
            "summary": "`CfnStateMachine.TagsEntryProperty.Value`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 334
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.CfnStateMachineProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html",
        "stability": "external",
        "summary": "Properties for defining a `AWS::StepFunctions::StateMachine`."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachineProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/stepfunctions.generated.ts",
        "line": 180
      },
      "name": "CfnStateMachineProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-definitionstring",
            "stability": "external",
            "summary": "`AWS::StepFunctions::StateMachine.DefinitionString`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 186
          },
          "name": "definitionString",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-rolearn",
            "stability": "external",
            "summary": "`AWS::StepFunctions::StateMachine.RoleArn`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 192
          },
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-statemachinename",
            "stability": "external",
            "summary": "`AWS::StepFunctions::StateMachine.StateMachineName`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 198
          },
          "name": "stateMachineName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html#cfn-stepfunctions-statemachine-tags",
            "stability": "external",
            "summary": "`AWS::StepFunctions::StateMachine.Tags`."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/stepfunctions.generated.ts",
            "line": 204
          },
          "name": "tags",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.CfnStateMachine.TagsEntryProperty"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Chain": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "remarks": "A Chain has a start and zero or more chainable ends. If there are\nzero ends, calling next() on the Chain will fail.",
        "stability": "experimental",
        "summary": "A collection of states to chain onto."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Chain",
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IChainable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/chain.ts",
        "line": 11
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Make a Chain with specific start and end states, and a last-added Chainable."
          },
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 29
          },
          "name": "custom",
          "parameters": [
            {
              "name": "startState",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            },
            {
              "name": "endStates",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-stepfunctions.INextable"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "name": "lastAdded",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Make a Chain with the start from one chain and the ends from another."
          },
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 22
          },
          "name": "sequence",
          "parameters": [
            {
              "name": "start",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            },
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Begin a new Chain from one chainable."
          },
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 15
          },
          "name": "start",
          "parameters": [
            {
              "name": "state",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 57
          },
          "name": "next",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "remarks": "This can be used to add error handling to a sequence of states.\n\nBe aware that this changes the result of the inner state machine\nto be an array with the result of the state machine in it. Adjust\nyour paths accordingly. For example, change 'outputPath' to\n'$[0]'.",
            "stability": "experimental",
            "summary": "Return a single state that encompasses all states in the chain."
          },
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 79
          },
          "name": "toSingleState",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.ParallelProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
            }
          }
        }
      ],
      "name": "Chain",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The chainable end state(s) of this chain."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 46
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Identify this Chain."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 36
          },
          "name": "id",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The start state of this chain."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/chain.ts",
            "line": 41
          },
          "name": "startState",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Choice": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "A choice state can be used to make decisions based on the execution\nstate.",
        "stability": "experimental",
        "summary": "Define a Choice in the state machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Choice",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.ChoiceProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/choice.ts",
        "line": 46
      },
      "methods": [
        {
          "docs": {
            "remarks": "Use this to combine all possible choice paths back.",
            "stability": "experimental",
            "summary": "Return a Chain that contains all reachable end states from this Choice."
          },
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 77
          },
          "name": "afterwards",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.AfterwardsOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "remarks": "If no conditions match and no otherwise() has been given, an execution\nerror will be raised.",
            "stability": "experimental",
            "summary": "If none of the given conditions match, continue execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 67
          },
          "name": "otherwise",
          "parameters": [
            {
              "name": "def",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Choice"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 91
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "If the given condition matches, continue execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 56
          },
          "name": "when",
          "parameters": [
            {
              "name": "condition",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Condition"
              }
            },
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Choice"
            }
          }
        }
      ],
      "name": "Choice",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 47
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.ChoiceProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for defining a Choice state."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.ChoiceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/choice.ts",
        "line": 11
      },
      "name": "ChoiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "experimental",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 17
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 27
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/choice.ts",
            "line": 37
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Condition": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "A Condition for use in a Choice state branch."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Condition",
      "initializer": {},
      "kind": "class",
      "locationInModule": {
        "filename": "lib/condition.ts",
        "line": 4
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Combine two or more conditions with a logical AND."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 120
          },
          "name": "and",
          "parameters": [
            {
              "name": "conditions",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Condition"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a boolean field has the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 8
          },
          "name": "booleanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Negate a condition."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 134
          },
          "name": "not",
          "parameters": [
            {
              "name": "condition",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Condition"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a numeric field has the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 50
          },
          "name": "numberEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a numeric field is greater than the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 71
          },
          "name": "numberGreaterThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a numeric field is greater than or equal to the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 78
          },
          "name": "numberGreaterThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a numeric field is less than the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 57
          },
          "name": "numberLessThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a numeric field is less than or equal to the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 64
          },
          "name": "numberLessThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Combine two or more conditions with a logical OR."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 127
          },
          "name": "or",
          "parameters": [
            {
              "name": "conditions",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Condition"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a string field has the given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 15
          },
          "name": "stringEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a string field sorts after a given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 36
          },
          "name": "stringGreaterThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a string field sorts after or equal to a given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 43
          },
          "name": "stringGreaterThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a string field sorts before a given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 22
          },
          "name": "stringLessThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a string field sorts equal to or before a given value."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 29
          },
          "name": "stringLessThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a timestamp field is the same time as the given timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 85
          },
          "name": "timestampEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a timestamp field is after the given timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 106
          },
          "name": "timestampGreaterThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a timestamp field is after or equal to the given timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 113
          },
          "name": "timestampGreaterThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a timestamp field is before the given timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 92
          },
          "name": "timestampLessThan",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Matches if a timestamp field is before or equal to the given timestamp."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 99
          },
          "name": "timestampLessThanEquals",
          "parameters": [
            {
              "name": "variable",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Condition"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Render Amazon States Language JSON for the condition."
          },
          "locationInModule": {
            "filename": "lib/condition.ts",
            "line": 141
          },
          "name": "renderCondition",
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        }
      ],
      "name": "Condition"
    },
    "@aws-cdk/aws-stepfunctions.Context": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "see": "https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#wait-token-contextobject",
        "stability": "experimental",
        "summary": "Extract a field from the State Machine Context data."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Context",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fields.ts",
        "line": 55
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Instead of using a literal number, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 67
          },
          "name": "numberAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Instead of using a literal string, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 59
          },
          "name": "stringAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Context",
      "properties": [
        {
          "docs": {
            "remarks": "Will be an object at invocation time, but is represented in the CDK\napplication as a string.",
            "stability": "experimental",
            "summary": "Use the entire context data structure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 89
          },
          "name": "entireContext",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "remarks": "External actions will need this token to report step completion\nback to StepFunctions using the `SendTaskSuccess` or `SendTaskFailure`\ncalls.",
            "stability": "experimental",
            "summary": "Return the Task Token field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 79
          },
          "name": "taskToken",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Data": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "Extract a field from the State Machine data that gets passed around between states."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Data",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fields.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 42
          },
          "name": "isJsonPathString",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Instead of using a literal string list, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 19
          },
          "name": "listAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Instead of using a literal number, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 27
          },
          "name": "numberAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "number"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Instead of using a literal string, get the value from a JSON path."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 11
          },
          "name": "stringAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        }
      ],
      "name": "Data",
      "properties": [
        {
          "docs": {
            "remarks": "Will be an object at invocation time, but is represented in the CDK\napplication as a string.",
            "stability": "experimental",
            "summary": "Use the entire data structure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 38
          },
          "name": "entirePayload",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Errors": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "Predefined error strings."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Errors",
      "initializer": {},
      "kind": "class",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 40
      },
      "name": "Errors",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Matches any Error."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 44
          },
          "name": "ALL",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "A branch of a Parallel state failed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 71
          },
          "name": "BRANCH_FAILED",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "A Choice state failed to find a match for the condition field extracted from its input."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 77
          },
          "name": "NO_CHOICE_MATCHED",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "A Task State failed because it had insufficient privileges to execute the specified code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 61
          },
          "name": "PERMISSIONS",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "A Task State’s “ResultPath” field cannot be applied to the input the state received."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 66
          },
          "name": "RESULT_PATH_MATCH_FAILURE",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "A Task State failed during the execution."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 55
          },
          "name": "TASKS_FAILED",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "A Task State either ran longer than the “TimeoutSeconds” value, or failed to heartbeat for a time longer than the “HeartbeatSeconds” value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 50
          },
          "name": "TIMEOUT",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Fail": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "Reaching a Fail state terminates the state execution in failure.",
        "stability": "experimental",
        "summary": "Define a Fail state in the state machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Fail",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.FailProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/fail.ts",
        "line": 37
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/fail.ts",
            "line": 53
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        }
      ],
      "name": "Fail",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/fail.ts",
            "line": 38
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.FailProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for defining a Fail state."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.FailProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/fail.ts",
        "line": 9
      },
      "name": "FailProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No description",
            "stability": "experimental",
            "summary": "A description for the cause of the failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/fail.ts",
            "line": 29
          },
          "name": "cause",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "experimental",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/fail.ts",
            "line": 15
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No error code",
            "stability": "experimental",
            "summary": "Error code used to represent this failure."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/fail.ts",
            "line": 22
          },
          "name": "error",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.FieldUtils": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "Helper functions to work with structures containing fields."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.FieldUtils",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/fields.ts",
        "line": 100
      },
      "methods": [
        {
          "docs": {
            "remarks": "The field is considered included if the field itself or one of its containing\nfields occurs anywhere in the payload.",
            "stability": "experimental",
            "summary": "Returns whether the given task structure contains the TaskToken field anywhere."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 122
          },
          "name": "containsTaskToken",
          "parameters": [
            {
              "name": "obj",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "boolean"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return all JSON paths used in the given structure."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 112
          },
          "name": "findReferencedPaths",
          "parameters": [
            {
              "name": "obj",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Render a JSON structure containing fields to the right StepFunctions structure."
          },
          "locationInModule": {
            "filename": "lib/fields.ts",
            "line": 105
          },
          "name": "renderObject",
          "parameters": [
            {
              "name": "obj",
              "optional": true,
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "optional": true,
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          },
          "static": true
        }
      ],
      "name": "FieldUtils"
    },
    "@aws-cdk/aws-stepfunctions.FindStateOptions": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for finding reachable states."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.FindStateOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/state.ts",
        "line": 385
      },
      "name": "FindStateOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "stability": "experimental",
            "summary": "Whether or not to follow error-handling transitions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 391
          },
          "name": "includeErrorHandlers",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.IActivity": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.IActivity",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/activity.ts",
        "line": 178
      },
      "name": "IActivity",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 184
          },
          "name": "activityArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the activity."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/activity.ts",
            "line": 191
          },
          "name": "activityName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.IChainable": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for objects that can be used in a Chain."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.IChainable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 20
      },
      "name": "IChainable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The chainable end state(s) of this chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 34
          },
          "name": "endStates",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Descriptive identifier for this chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 24
          },
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The start state of this chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 29
          },
          "name": "startState",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.INextable": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for states that can have 'next' states."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.INextable",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 8
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "returns": "The chain of states built up",
            "stability": "experimental",
            "summary": "Go to the indicated state after this state."
          },
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 14
          },
          "name": "next",
          "parameters": [
            {
              "name": "state",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        }
      ],
      "name": "INextable"
    },
    "@aws-cdk/aws-stepfunctions.IStateMachine": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "A State Machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.IStateMachine",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/state-machine.ts",
        "line": 209
      },
      "name": "IStateMachine",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 214
          },
          "name": "stateMachineArn",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.IStepFunctionsTask": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "Interface for resources that can be used as tasks."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.IStepFunctionsTask",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/step-functions-task.ts",
        "line": 9
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Called when the task object is used in a workflow."
          },
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 13
          },
          "name": "bind",
          "parameters": [
            {
              "name": "task",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Task"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.StepFunctionsTaskConfig"
            }
          }
        }
      ],
      "name": "IStepFunctionsTask"
    },
    "@aws-cdk/aws-stepfunctions.InputType": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "The type of task input."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.InputType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/input.ts",
        "line": 55
      },
      "members": [
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "TEXT"
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "name": "OBJECT"
        }
      ],
      "name": "InputType"
    },
    "@aws-cdk/aws-stepfunctions.Parallel": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "A Parallel state can be used to run one or more state machines at the same\ntime.\n\nThe Result of a Parallel state is an array of the results of its substatemachines.",
        "stability": "experimental",
        "summary": "Define a Parallel state in the state machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Parallel",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.ParallelProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/parallel.ts",
        "line": 58
      },
      "methods": [
        {
          "docs": {
            "remarks": "When a particular error occurs, execution will continue at the error\nhandler instead of failing the state machine execution.",
            "stability": "experimental",
            "summary": "Add a recovery handler for this state."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 84
          },
          "name": "addCatch",
          "parameters": [
            {
              "name": "handler",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.CatchProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
            }
          }
        },
        {
          "docs": {
            "remarks": "This controls if and how the execution will be retried if a particular\nerror occurs.",
            "stability": "experimental",
            "summary": "Add retry configuration for this state."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 73
          },
          "name": "addRetry",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.RetryProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Define one or more branches to run in parallel."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 100
          },
          "name": "branch",
          "parameters": [
            {
              "name": "branches",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              },
              "variadic": true
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
            }
          },
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 92
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 111
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Validate this state."
          },
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 126
          },
          "name": "validate",
          "overrides": "@aws-cdk/core.Construct",
          "protected": true,
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "string"
                },
                "kind": "array"
              }
            }
          }
        }
      ],
      "name": "Parallel",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 59
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.ParallelProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for defining a Parallel state."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.ParallelProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/parallel.ts",
        "line": 11
      },
      "name": "ParallelProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "experimental",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 17
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 27
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 37
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the state's\ninput to become its output.",
            "stability": "experimental",
            "summary": "JSONPath expression to indicate where to inject the state's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/parallel.ts",
            "line": 47
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Pass": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "A Pass state can be used to transform the current exeuction's state.",
        "stability": "experimental",
        "summary": "Define a Pass in the state machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Pass",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.PassProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/pass.ts",
        "line": 106
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 121
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 129
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        }
      ],
      "name": "Pass",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 107
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.PassProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for defining a Pass state."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.PassProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/pass.ts",
        "line": 53
      },
      "name": "PassProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "experimental",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 59
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 69
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 79
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No injected result",
            "remarks": "Can be used to inject or replace the current execution state.",
            "stability": "experimental",
            "summary": "If given, treat as the result of this operation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 98
          },
          "name": "result",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.Result"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the state's\ninput to become its output.",
            "stability": "experimental",
            "summary": "JSONPath expression to indicate where to inject the state's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 89
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Result": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "The result of a Pass operation."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Result",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "value",
            "type": {
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/pass.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The result of the operation is an array."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 42
          },
          "name": "fromArray",
          "parameters": [
            {
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Result"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The result of the operation is a boolean."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 28
          },
          "name": "fromBoolean",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Result"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The result of the operation is a number."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 21
          },
          "name": "fromNumber",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Result"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The result of the operation is an object."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 35
          },
          "name": "fromObject",
          "parameters": [
            {
              "name": "value",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Result"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The result of the operation is a string."
          },
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 14
          },
          "name": "fromString",
          "parameters": [
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Result"
            }
          },
          "static": true
        }
      ],
      "name": "Result",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/pass.ts",
            "line": 46
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.RetryProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Retry details."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.RetryProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/types.ts",
        "line": 83
      },
      "name": "RetryProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "2",
            "stability": "experimental",
            "summary": "Multiplication for how much longer the wait interval gets on every retry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 116
          },
          "name": "backoffRate",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "All errors",
            "remarks": "A list of error strings to retry, which can be either predefined errors\n(for example Errors.NoChoiceMatched) or a self-defined error.",
            "stability": "experimental",
            "summary": "Errors to retry."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 92
          },
          "name": "errors",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(1)",
            "stability": "experimental",
            "summary": "How many seconds to wait initially before retrying."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 99
          },
          "name": "interval",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "3",
            "remarks": "May be 0 to disable retry for specific errors (in case you have\na catch-all retry policy).",
            "stability": "experimental",
            "summary": "How many times to retry this particular error."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/types.ts",
            "line": 109
          },
          "name": "maxAttempts",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "default": "FIRE_AND_FORGET",
        "see": "https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html\n\nHere, they are named as FIRE_AND_FORGET, SYNC and WAIT_FOR_TASK_TOKEN respectly.",
        "stability": "experimental",
        "summary": "Three ways to call an integrated service: Request Response, Run a Job and Wait for a Callback with Task Token."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.ServiceIntegrationPattern",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/step-functions-task.ts",
        "line": 90
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Call a service and progress to the next state immediately after the API call completes."
          },
          "name": "FIRE_AND_FORGET"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Call a service and wait for a job to complete."
          },
          "name": "SYNC"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Call a service with a task token and wait until that token is returned by SendTaskSuccess/SendTaskFailure with paylaod."
          },
          "name": "WAIT_FOR_TASK_TOKEN"
        }
      ],
      "name": "ServiceIntegrationPattern"
    },
    "@aws-cdk/aws-stepfunctions.SingleStateOptions": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Options for creating a single state."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.SingleStateOptions",
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.ParallelProps"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/state-machine-fragment.ts",
        "line": 67
      },
      "name": "SingleStateOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "stateId",
            "stability": "experimental",
            "summary": "String to prefix all stateIds in the state machine with."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 80
          },
          "name": "prefixStates",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Construct ID of the StateMachineFragment",
            "stability": "experimental",
            "summary": "ID of newly created containing state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 73
          },
          "name": "stateId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.State": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "Base class for all other state classes."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.State",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.StateProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IChainable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/state.ts",
        "line": 61
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return only the states that allow chaining from an array of states."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 104
          },
          "name": "filterNextables",
          "parameters": [
            {
              "name": "states",
              "type": {
                "collection": {
                  "elementtype": {
                    "fqn": "@aws-cdk/aws-stepfunctions.State"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-stepfunctions.INextable"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Find the set of end states states reachable through transitions from the given start state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 79
          },
          "name": "findReachableEndStates",
          "parameters": [
            {
              "name": "start",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.FindStateOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/aws-stepfunctions.State"
                },
                "kind": "array"
              }
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a prefix to the stateId of all States found in a construct tree."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 65
          },
          "name": "prefixStates",
          "parameters": [
            {
              "name": "root",
              "type": {
                "fqn": "@aws-cdk/core.IConstruct"
              }
            },
            {
              "name": "prefix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a paralle branch to this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 278
          },
          "name": "addBranch",
          "parameters": [
            {
              "name": "branch",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a choice branch to this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 267
          },
          "name": "addChoice",
          "parameters": [
            {
              "name": "condition",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.Condition"
              }
            },
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a prefix to the stateId of this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 181
          },
          "name": "addPrefix",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Don't call this. It will be called automatically when you work\nwith states normally.",
            "stability": "experimental",
            "summary": "Register this state as part of the given graph."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 193
          },
          "name": "bindToGraph",
          "parameters": [
            {
              "name": "graph",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Make the indicated state the default choice transition of this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 288
          },
          "name": "makeDefault",
          "parameters": [
            {
              "name": "def",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Make the indicated state the default transition of this state."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 252
          },
          "name": "makeNext",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Render parallel branches in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 331
          },
          "name": "renderBranches",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Render the choices in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 310
          },
          "name": "renderChoices",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Render InputPath/Parameters/OutputPath in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 320
          },
          "name": "renderInputOutput",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Render the default next state in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 299
          },
          "name": "renderNextEnd",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Render error recovery options in ASL JSON format."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 340
          },
          "name": "renderRetryCatch",
          "protected": true,
          "returns": {
            "type": {
              "primitive": "any"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Render the state as JSON."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 218
          },
          "name": "toStateJson",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "remarks": "Can be overridden by subclasses.",
            "stability": "experimental",
            "summary": "Called whenever this state is bound to a graph."
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 352
          },
          "name": "whenBoundToGraph",
          "parameters": [
            {
              "name": "graph",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ],
          "protected": true
        }
      ],
      "name": "State",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 128
          },
          "name": "branches",
          "protected": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 116
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Descriptive identifier for this chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 167
          },
          "name": "id",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "First state of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 111
          },
          "name": "startState",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Tokenized string that evaluates to the state's ID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 174
          },
          "name": "stateId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 123
          },
          "name": "comment",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 124
          },
          "name": "inputPath",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 126
          },
          "name": "outputPath",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 125
          },
          "name": "parameters",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "json"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 127
          },
          "name": "resultPath",
          "optional": true,
          "protected": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 129
          },
          "name": "defaultChoice",
          "optional": true,
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.StateGraph": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "remarks": "A StateGraph is used to keep track of all states that are connected (have\ntransitions between them). It does not include the substatemachines in\na Parallel's branches: those are their own StateGraphs, but the graphs\nthemselves have a hierarchical relationship as well.\n\nBy assigning states to a definintive StateGraph, we verify that no state\nmachines are constructed. In particular:\n\n- Every state object can only ever be in 1 StateGraph, and not inadvertently\n   be used in two graphs.\n- Every stateId must be unique across all states in the entire state\n   machine.\n\nAll policy statements in all states in all substatemachines are bubbled so\nthat the top-level StateMachine instantiation can read them all and add\nthem to the IAM Role.\n\nYou do not need to instantiate this class; it is used internally.",
        "stability": "experimental",
        "summary": "A collection of connected states."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateGraph",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "startState",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.State"
            }
          },
          {
            "name": "graphDescription",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/state-graph.ts",
        "line": 27
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Register a Policy Statement used by states in this graph."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 76
          },
          "name": "registerPolicyStatement",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Called by State.bindToGraph().",
            "stability": "experimental",
            "summary": "Register a state as part of this graph."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 68
          },
          "name": "registerState",
          "parameters": [
            {
              "name": "state",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.State"
              }
            }
          ]
        },
        {
          "docs": {
            "remarks": "Resource changes will be bubbled up to the given graph.",
            "stability": "experimental",
            "summary": "Register this graph as a child of the given graph."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 89
          },
          "name": "registerSuperGraph",
          "parameters": [
            {
              "name": "graph",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the Amazon States Language JSON for this graph."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 102
          },
          "name": "toGraphJson",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return a string description of this graph."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 118
          },
          "name": "toString",
          "returns": {
            "type": {
              "primitive": "string"
            }
          }
        }
      ],
      "name": "StateGraph",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The accumulated policy statements."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 41
          },
          "name": "policyStatements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 58
          },
          "name": "startState",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        },
        {
          "docs": {
            "default": "No timeout",
            "remarks": "Read/write. Only makes sense on the top-level graph, subgraphs\ndo not support this feature.",
            "stability": "experimental",
            "summary": "Set a timeout to render into the graph JSON."
          },
          "locationInModule": {
            "filename": "lib/state-graph.ts",
            "line": 36
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.StateMachine": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "stability": "experimental",
        "summary": "Define a StepFunctions State Machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateMachine",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.StateMachineProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IStateMachine"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/state-machine.ts",
        "line": 72
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import a state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 46
          },
          "name": "fromStateMachineArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/core.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "stateMachineArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.IStateMachine"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add the given statement to the role's policy."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 123
          },
          "name": "addToRolePolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Grant the given identity permissions to start an execution of this state machine."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 60
          },
          "name": "grantStartExecution",
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-iam.Grant"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Return the given named metric for this State Machine's executions."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 132
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of executions that were aborted."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 165
          },
          "name": "metricAborted",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of executions that failed."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 147
          },
          "name": "metricFailed",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of executions that were started."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 192
          },
          "name": "metricStarted",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of executions that succeeded."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 174
          },
          "name": "metricSucceeded",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of executions that were throttled."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 156
          },
          "name": "metricThrottled",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the interval, in milliseconds, between the time the execution starts and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 201
          },
          "name": "metricTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of executions that succeeded."
          },
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 183
          },
          "name": "metricTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        }
      ],
      "name": "StateMachine",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Execution role of this state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 76
          },
          "name": "role",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 87
          },
          "name": "stateMachineArn",
          "overrides": "@aws-cdk/aws-stepfunctions.IStateMachine",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 82
          },
          "name": "stateMachineName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.StateMachineFragment": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/core.Construct",
      "docs": {
        "stability": "experimental",
        "summary": "Base class for reusable state machine fragments."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateMachineFragment",
      "initializer": {
        "docs": {
          "stability": "stable",
          "summary": "Creates a new construct node."
        },
        "parameters": [
          {
            "docs": {
              "summary": "The scope in which to define this construct."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "docs": {
              "remarks": "Must be unique amongst siblings. If\nthe ID includes a path separator (`/`), then it will be replaced by double\ndash `--`.",
              "summary": "The scoped construct ID."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.IChainable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/state-machine-fragment.ts",
        "line": 10
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 59
          },
          "name": "next",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "remarks": "Use this to avoid multiple copies of the state machine all having the\nsame state IDs.",
            "stability": "experimental",
            "summary": "Prefix the IDs of all states in this state machine fragment."
          },
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 33
          },
          "name": "prefixStates",
          "parameters": [
            {
              "docs": {
                "remarks": "Will use construct ID by default.",
                "summary": "The prefix to add."
              },
              "name": "prefix",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.StateMachineFragment"
            }
          }
        },
        {
          "docs": {
            "remarks": "This can be used to add retry or error handling onto this state\nmachine fragment.\n\nBe aware that this changes the result of the inner state machine\nto be an array with the result of the state machine in it. Adjust\nyour paths accordingly. For example, change 'outputPath' to\n'$[0]'.",
            "stability": "experimental",
            "summary": "Wrap all states in this state machine fragment up into a single state."
          },
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 49
          },
          "name": "toSingleState",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.SingleStateOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Parallel"
            }
          }
        }
      ],
      "name": "StateMachineFragment",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The states to chain onto if this fragment is used."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 19
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Descriptive identifier for this chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 21
          },
          "name": "id",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The start state of this state machine fragment."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine-fragment.ts",
            "line": 14
          },
          "name": "startState",
          "overrides": "@aws-cdk/aws-stepfunctions.IChainable",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.State"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.StateMachineProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for defining a State Machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateMachineProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/state-machine.ts",
        "line": 11
      },
      "name": "StateMachineProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Definition for this state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 22
          },
          "name": "definition",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "A role is automatically created",
            "stability": "experimental",
            "summary": "The execution role for the state machine service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 29
          },
          "name": "role",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "A name is automatically generated",
            "stability": "experimental",
            "summary": "A name for the state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 17
          },
          "name": "stateMachineName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No timeout",
            "stability": "experimental",
            "summary": "Maximum run time for this state machine."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/state-machine.ts",
            "line": 36
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.StateProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties shared by all states."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/state.ts",
        "line": 9
      },
      "name": "StateProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "experimental",
            "summary": "A comment describing this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 15
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 25
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 45
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No parameters",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-parameters",
            "stability": "experimental",
            "summary": "Parameters pass a collection of key-value pairs, either static values or JSONPath expressions that select from the input."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 35
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the state's\ninput to become its output.",
            "stability": "experimental",
            "summary": "JSONPath expression to indicate where to inject the state's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/state.ts",
            "line": 55
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.StateTransitionMetric": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "remarks": "These rate limits are shared across all state machines.",
        "stability": "experimental",
        "summary": "Metrics on the rate limiting performed on state machine execution."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StateTransitionMetric",
      "initializer": {},
      "kind": "class",
      "locationInModule": {
        "filename": "lib/state-transition-metrics.ts",
        "line": 8
      },
      "methods": [
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "experimental",
            "summary": "Return the given named metric for the service's state transition metrics."
          },
          "locationInModule": {
            "filename": "lib/state-transition-metrics.ts",
            "line": 14
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          },
          "static": true
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of available state transitions per second."
          },
          "locationInModule": {
            "filename": "lib/state-transition-metrics.ts",
            "line": 46
          },
          "name": "metricConsumedCapacity",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          },
          "static": true
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of available state transitions."
          },
          "locationInModule": {
            "filename": "lib/state-transition-metrics.ts",
            "line": 28
          },
          "name": "metricProvisionedBucketSize",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          },
          "static": true
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the provisioned steady-state execution rate."
          },
          "locationInModule": {
            "filename": "lib/state-transition-metrics.ts",
            "line": 37
          },
          "name": "metricProvisionedRefillRate",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          },
          "static": true
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of throttled state transitions."
          },
          "locationInModule": {
            "filename": "lib/state-transition-metrics.ts",
            "line": 55
          },
          "name": "metricThrottledEvents",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          },
          "static": true
        }
      ],
      "name": "StateTransitionMetric"
    },
    "@aws-cdk/aws-stepfunctions.StepFunctionsTaskConfig": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties that define what kind of task should be created."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.StepFunctionsTaskConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/step-functions-task.ts",
        "line": 19
      },
      "name": "StepFunctionsTaskConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "Either the ARN of a Lambda Function or Activity, or a special\nARN.",
            "stability": "experimental",
            "summary": "The resource that represents the work to be executed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 26
          },
          "name": "resourceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No heart beat timeout",
            "remarks": "If the time between heart beats takes longer than this, a 'Timeout' error is raised.\n\nThis is only relevant when using an Activity type as resource.",
            "stability": "experimental",
            "summary": "Maximum time between heart beats."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 51
          },
          "name": "heartbeat",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No metrics",
            "stability": "experimental",
            "summary": "The dimensions to attach to metrics."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 79
          },
          "name": "metricDimensions",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No such metrics",
            "stability": "experimental",
            "summary": "Prefix for plural metric names of activity actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 72
          },
          "name": "metricPrefixPlural",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No such metrics",
            "stability": "experimental",
            "summary": "Prefix for singular metric names of activity actions."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 65
          },
          "name": "metricPrefixSingular",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No parameters",
            "remarks": "What is passed here will be merged with any default parameters\nconfigured by the `resource`. For example, a DynamoDB table target\nwill",
            "see": "https://docs.aws.amazon.com/step-functions/latest/dg/input-output-inputpath-params.html#input-output-parameters",
            "stability": "experimental",
            "summary": "Parameters pass a collection of key-value pairs, either static values or JSONPath expressions that select from the input."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 40
          },
          "name": "parameters",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No policy roles",
            "stability": "experimental",
            "summary": "Additional policy statements to add to the execution role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/step-functions-task.ts",
            "line": 58
          },
          "name": "policyStatements",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Succeed": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "Reaching a Succeed state terminates the state execution in success.",
        "stability": "experimental",
        "summary": "Define a Succeed state in the state machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Succeed",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.SucceedProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/succeed.ts",
        "line": 44
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/succeed.ts",
            "line": 54
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        }
      ],
      "name": "Succeed",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/succeed.ts",
            "line": 45
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.SucceedProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for defining a Succeed state."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.SucceedProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/succeed.ts",
        "line": 9
      },
      "name": "SucceedProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "experimental",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/succeed.ts",
            "line": 15
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/succeed.ts",
            "line": 25
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/succeed.ts",
            "line": 35
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Task": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "Reaching a Task state causes some work to be executed, represented by the\nTask's resource property. Task constructs represent a generic Amazon\nStates Language Task.\n\nFor some resource types, more specific subclasses of Task may be available\nwhich are more convenient to use.",
        "stability": "experimental",
        "summary": "Define a Task state in the state machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Task",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/task.ts",
        "line": 77
      },
      "methods": [
        {
          "docs": {
            "remarks": "When a particular error occurs, execution will continue at the error\nhandler instead of failing the state machine execution.",
            "stability": "experimental",
            "summary": "Add a recovery handler for this state."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 107
          },
          "name": "addCatch",
          "parameters": [
            {
              "name": "handler",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.CatchProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Task"
            }
          }
        },
        {
          "docs": {
            "remarks": "This controls if and how the execution will be retried if a particular\nerror occurs.",
            "stability": "experimental",
            "summary": "Add retry configuration for this state."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 96
          },
          "name": "addRetry",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.RetryProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Task"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Return the given named metric for this Task."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 143
          },
          "name": "metric",
          "parameters": [
            {
              "name": "metricName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times this activity fails."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 221
          },
          "name": "metricFailed",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times the heartbeat times out for this activity."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 230
          },
          "name": "metricHeartbeatTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "experimental",
            "summary": "The interval, in milliseconds, between the time the Task starts and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 158
          },
          "name": "metricRunTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times this activity is scheduled."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 185
          },
          "name": "metricScheduled",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "experimental",
            "summary": "The interval, in milliseconds, for which the activity stays in the schedule state."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 167
          },
          "name": "metricScheduleTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times this activity is started."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 203
          },
          "name": "metricStarted",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times this activity succeeds."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 212
          },
          "name": "metricSucceeded",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "average over 5 minutes",
            "stability": "experimental",
            "summary": "The interval, in milliseconds, between the time the activity is scheduled and the time it closes."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 176
          },
          "name": "metricTime",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "default": "sum over 5 minutes",
            "stability": "experimental",
            "summary": "Metric for the number of times this activity times out."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 194
          },
          "name": "metricTimedOut",
          "parameters": [
            {
              "name": "props",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cloudwatch.MetricOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cloudwatch.Metric"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 115
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 123
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        },
        {
          "docs": {
            "remarks": "Can be overridden by subclasses.",
            "stability": "experimental",
            "summary": "Called whenever this state is bound to a graph."
          },
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 234
          },
          "name": "whenBoundToGraph",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "parameters": [
            {
              "name": "graph",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.StateGraph"
              }
            }
          ],
          "protected": true
        }
      ],
      "name": "Task",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 78
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.TaskInput": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental",
        "summary": "Type union for task classes that accept multiple types of payload."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.TaskInput",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/input.ts",
        "line": 6
      },
      "methods": [
        {
          "docs": {
            "remarks": "Use this when you want to use a subobject or string from\nthe current task context as complete payload\nto a task.",
            "stability": "experimental",
            "summary": "Use a part of the task context as task input."
          },
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 44
          },
          "name": "fromContextAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskInput"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "Use this when you want to use a subobject or string from\nthe current state machine execution as complete payload\nto a task.",
            "stability": "experimental",
            "summary": "Use a part of the execution data as task input."
          },
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 33
          },
          "name": "fromDataAt",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskInput"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This object may contain Data and Context fields\nas object values, if desired.",
            "stability": "experimental",
            "summary": "Use an object as task input."
          },
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 22
          },
          "name": "fromObject",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskInput"
            }
          },
          "static": true
        },
        {
          "docs": {
            "remarks": "This might be a JSON-encoded object, or just a text.",
            "stability": "experimental",
            "summary": "Use a literal string as task input."
          },
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 12
          },
          "name": "fromText",
          "parameters": [
            {
              "name": "text",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.TaskInput"
            }
          },
          "static": true
        }
      ],
      "name": "TaskInput",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 48
          },
          "name": "type",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.InputType"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/input.ts",
            "line": 48
          },
          "name": "value",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.TaskProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props that are common to all tasks."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.TaskProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/task.ts",
        "line": 14
      },
      "name": "TaskProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Actual task to be invoked in this workflow."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 18
          },
          "name": "task",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.IStepFunctionsTask"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "experimental",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 25
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\ninput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the input to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 35
          },
          "name": "inputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the effective\noutput to be the empty object {}.",
            "stability": "experimental",
            "summary": "JSONPath expression to select part of the state to be the output to this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 45
          },
          "name": "outputPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "$",
            "remarks": "May also be the special value DISCARD, which will cause the state's\ninput to become its output.",
            "stability": "experimental",
            "summary": "JSONPath expression to indicate where to inject the state's output."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 55
          },
          "name": "resultPath",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "60",
            "remarks": "If the state takes longer than this amount of time to complete, a 'Timeout' error is raised.",
            "stability": "experimental",
            "summary": "Maximum run time of this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/task.ts",
            "line": 64
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/core.Duration"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.Wait": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "base": "@aws-cdk/aws-stepfunctions.State",
      "docs": {
        "remarks": "A Wait state can be used to delay execution of the state machine for a while.",
        "stability": "experimental",
        "summary": "Define a Wait state in the state machine."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.Wait",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/core.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.WaitProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-stepfunctions.INextable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/wait.ts",
        "line": 66
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continue normal execution with the given state."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 81
          },
          "name": "next",
          "overrides": "@aws-cdk/aws-stepfunctions.INextable",
          "parameters": [
            {
              "name": "next",
              "type": {
                "fqn": "@aws-cdk/aws-stepfunctions.IChainable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.Chain"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Return the Amazon States Language object for this state."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 89
          },
          "name": "toStateJson",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "returns": {
            "type": {
              "primitive": "json"
            }
          }
        }
      ],
      "name": "Wait",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Continuable states of this Chainable."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 67
          },
          "name": "endStates",
          "overrides": "@aws-cdk/aws-stepfunctions.State",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-stepfunctions.INextable"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.WaitProps": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties for defining a Wait state."
      },
      "fqn": "@aws-cdk/aws-stepfunctions.WaitProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/states/wait.ts",
        "line": 47
      },
      "name": "WaitProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Wait duration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 58
          },
          "name": "time",
          "type": {
            "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "No comment",
            "stability": "experimental",
            "summary": "An optional description for this state."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 53
          },
          "name": "comment",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-stepfunctions.WaitTime": {
      "assembly": "@aws-cdk/aws-stepfunctions",
      "docs": {
        "stability": "experimental"
      },
      "fqn": "@aws-cdk/aws-stepfunctions.WaitTime",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/states/wait.ts",
        "line": 7
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Wait a fixed amount of time."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 11
          },
          "name": "duration",
          "parameters": [
            {
              "name": "duration",
              "type": {
                "fqn": "@aws-cdk/core.Duration"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "example": "$.waitSeconds",
            "stability": "experimental",
            "summary": "Wait for a number of seconds stored in the state object."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 25
          },
          "name": "secondsPath",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "example": "2016-03-14T01:59:00Z",
            "stability": "experimental",
            "summary": "Wait until the given ISO8601 timestamp."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 18
          },
          "name": "timestamp",
          "parameters": [
            {
              "name": "timestamp",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
            }
          },
          "static": true
        },
        {
          "docs": {
            "example": "$.waitTimestamp",
            "stability": "experimental",
            "summary": "Wait until a timestamp found in the state object."
          },
          "locationInModule": {
            "filename": "lib/states/wait.ts",
            "line": 32
          },
          "name": "timestampPath",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-stepfunctions.WaitTime"
            }
          },
          "static": true
        }
      ],
      "name": "WaitTime"
    }
  },
  "version": "1.7.0",
  "fingerprint": "oP6BrXK3EPgJUdp/sQVpcLtGf8MJcr0AQXkffD3zRdU="
}
