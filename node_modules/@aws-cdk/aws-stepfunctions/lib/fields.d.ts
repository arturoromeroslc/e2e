/**
 * Extract a field from the State Machine data that gets passed around between states
 */
export declare class Data {
    /**
     * Instead of using a literal string, get the value from a JSON path
     */
    static stringAt(path: string): string;
    /**
     * Instead of using a literal string list, get the value from a JSON path
     */
    static listAt(path: string): string[];
    /**
     * Instead of using a literal number, get the value from a JSON path
     */
    static numberAt(path: string): number;
    /**
     * Use the entire data structure
     *
     * Will be an object at invocation time, but is represented in the CDK
     * application as a string.
     */
    static readonly entirePayload: string;
    static isJsonPathString(value: string): boolean;
    private constructor();
}
/**
 * Extract a field from the State Machine Context data
 *
 * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#wait-token-contextobject
 */
export declare class Context {
    /**
     * Instead of using a literal string, get the value from a JSON path
     */
    static stringAt(path: string): string;
    /**
     * Instead of using a literal number, get the value from a JSON path
     */
    static numberAt(path: string): number;
    /**
     * Return the Task Token field
     *
     * External actions will need this token to report step completion
     * back to StepFunctions using the `SendTaskSuccess` or `SendTaskFailure`
     * calls.
     */
    static readonly taskToken: string;
    /**
     * Use the entire context data structure
     *
     * Will be an object at invocation time, but is represented in the CDK
     * application as a string.
     */
    static readonly entireContext: string;
    private constructor();
}
/**
 * Helper functions to work with structures containing fields
 */
export declare class FieldUtils {
    /**
     * Render a JSON structure containing fields to the right StepFunctions structure
     */
    static renderObject(obj?: {
        [key: string]: any;
    }): {
        [key: string]: any;
    } | undefined;
    /**
     * Return all JSON paths used in the given structure
     */
    static findReferencedPaths(obj?: {
        [key: string]: any;
    }): string[];
    /**
     * Returns whether the given task structure contains the TaskToken field anywhere
     *
     * The field is considered included if the field itself or one of its containing
     * fields occurs anywhere in the payload.
     */
    static containsTaskToken(obj?: {
        [key: string]: any;
    }): boolean;
    private constructor();
}
