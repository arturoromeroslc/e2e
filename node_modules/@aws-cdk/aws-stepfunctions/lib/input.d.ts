/**
 * Type union for task classes that accept multiple types of payload
 */
export declare class TaskInput {
    readonly type: InputType;
    readonly value: any;
    /**
     * Use a literal string as task input
     *
     * This might be a JSON-encoded object, or just a text.
     */
    static fromText(text: string): TaskInput;
    /**
     * Use an object as task input
     *
     * This object may contain Data and Context fields
     * as object values, if desired.
     */
    static fromObject(obj: {
        [key: string]: any;
    }): TaskInput;
    /**
     * Use a part of the execution data as task input
     *
     * Use this when you want to use a subobject or string from
     * the current state machine execution as complete payload
     * to a task.
     */
    static fromDataAt(path: string): TaskInput;
    /**
     * Use a part of the task context as task input
     *
     * Use this when you want to use a subobject or string from
     * the current task context as complete payload
     * to a task.
     */
    static fromContextAt(path: string): TaskInput;
    private constructor();
}
/**
 * The type of task input
 */
export declare enum InputType {
    TEXT = 0,
    OBJECT = 1
}
