"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Predefined error strings
 */
class Errors {
}
exports.Errors = Errors;
/**
 * Matches any Error.
 */
Errors.ALL = 'States.ALL';
/**
 * A Task State either ran longer than the “TimeoutSeconds” value, or
 * failed to heartbeat for a time longer than the “HeartbeatSeconds” value.
 */
Errors.TIMEOUT = 'States.Timeout';
/**
 * A Task State failed during the execution.
 */
Errors.TASKS_FAILED = 'States.TaskFailed';
/**
 * A Task State failed because it had insufficient privileges to execute
 * the specified code.
 */
Errors.PERMISSIONS = 'States.Permissions';
/**
 * A Task State’s “ResultPath” field cannot be applied to the input the state received.
 */
Errors.RESULT_PATH_MATCH_FAILURE = 'States.ResultPathMatchFailure';
/**
 * A branch of a Parallel state failed.
 */
Errors.BRANCH_FAILED = 'States.BranchFailed';
/**
 * A Choice state failed to find a match for the condition field extracted
 * from its input.
 */
Errors.NO_CHOICE_MATCHED = 'States.NoChoiceMatched';
/**
 * Special string value to discard state input, output or result
 */
exports.DISCARD = 'DISCARD';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQW9DQTs7R0FFRztBQUNILE1BQWEsTUFBTTs7QUFBbkIsd0JBc0NDO0FBckNHOztHQUVHO0FBQ29CLFVBQUcsR0FBRyxZQUFZLENBQUM7QUFFMUM7OztHQUdHO0FBQ29CLGNBQU8sR0FBRyxnQkFBZ0IsQ0FBQztBQUVsRDs7R0FFRztBQUNvQixtQkFBWSxHQUFHLG1CQUFtQixDQUFDO0FBRTFEOzs7R0FHRztBQUNvQixrQkFBVyxHQUFHLG9CQUFvQixDQUFDO0FBRTFEOztHQUVHO0FBQ29CLGdDQUF5QixHQUFHLCtCQUErQixDQUFDO0FBRW5GOztHQUVHO0FBQ29CLG9CQUFhLEdBQUcscUJBQXFCLENBQUM7QUFFN0Q7OztHQUdHO0FBQ29CLHdCQUFpQixHQUFHLHdCQUF3QixDQUFDO0FBbUV4RTs7R0FFRztBQUNVLFFBQUEsT0FBTyxHQUFHLFNBQVMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBDaGFpbiB9IGZyb20gJy4vY2hhaW4nO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL3N0YXRlcy9zdGF0ZSc7XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBzdGF0ZXMgdGhhdCBjYW4gaGF2ZSAnbmV4dCcgc3RhdGVzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSU5leHRhYmxlIHtcbiAgICAvKipcbiAgICAgKiBHbyB0byB0aGUgaW5kaWNhdGVkIHN0YXRlIGFmdGVyIHRoaXMgc3RhdGVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBjaGFpbiBvZiBzdGF0ZXMgYnVpbHQgdXBcbiAgICAgKi9cbiAgICBuZXh0KHN0YXRlOiBJQ2hhaW5hYmxlKTogQ2hhaW47XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBvYmplY3RzIHRoYXQgY2FuIGJlIHVzZWQgaW4gYSBDaGFpblxuICovXG5leHBvcnQgaW50ZXJmYWNlIElDaGFpbmFibGUge1xuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aXZlIGlkZW50aWZpZXIgZm9yIHRoaXMgY2hhaW5hYmxlXG4gICAgICovXG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdGFydCBzdGF0ZSBvZiB0aGlzIGNoYWluYWJsZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YXJ0U3RhdGU6IFN0YXRlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNoYWluYWJsZSBlbmQgc3RhdGUocykgb2YgdGhpcyBjaGFpbmFibGVcbiAgICAgKi9cbiAgICByZWFkb25seSBlbmRTdGF0ZXM6IElOZXh0YWJsZVtdO1xufVxuXG4vKipcbiAqIFByZWRlZmluZWQgZXJyb3Igc3RyaW5nc1xuICovXG5leHBvcnQgY2xhc3MgRXJyb3JzIHtcbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIGFueSBFcnJvci5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFMTCA9ICdTdGF0ZXMuQUxMJztcblxuICAgIC8qKlxuICAgICAqIEEgVGFzayBTdGF0ZSBlaXRoZXIgcmFuIGxvbmdlciB0aGFuIHRoZSDigJxUaW1lb3V0U2Vjb25kc+KAnSB2YWx1ZSwgb3JcbiAgICAgKiBmYWlsZWQgdG8gaGVhcnRiZWF0IGZvciBhIHRpbWUgbG9uZ2VyIHRoYW4gdGhlIOKAnEhlYXJ0YmVhdFNlY29uZHPigJ0gdmFsdWUuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBUSU1FT1VUID0gJ1N0YXRlcy5UaW1lb3V0JztcblxuICAgIC8qKlxuICAgICAqIEEgVGFzayBTdGF0ZSBmYWlsZWQgZHVyaW5nIHRoZSBleGVjdXRpb24uXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBUQVNLU19GQUlMRUQgPSAnU3RhdGVzLlRhc2tGYWlsZWQnO1xuXG4gICAgLyoqXG4gICAgICogQSBUYXNrIFN0YXRlIGZhaWxlZCBiZWNhdXNlIGl0IGhhZCBpbnN1ZmZpY2llbnQgcHJpdmlsZWdlcyB0byBleGVjdXRlXG4gICAgICogdGhlIHNwZWNpZmllZCBjb2RlLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUEVSTUlTU0lPTlMgPSAnU3RhdGVzLlBlcm1pc3Npb25zJztcblxuICAgIC8qKlxuICAgICAqIEEgVGFzayBTdGF0ZeKAmXMg4oCcUmVzdWx0UGF0aOKAnSBmaWVsZCBjYW5ub3QgYmUgYXBwbGllZCB0byB0aGUgaW5wdXQgdGhlIHN0YXRlIHJlY2VpdmVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUkVTVUxUX1BBVEhfTUFUQ0hfRkFJTFVSRSA9ICdTdGF0ZXMuUmVzdWx0UGF0aE1hdGNoRmFpbHVyZSc7XG5cbiAgICAvKipcbiAgICAgKiBBIGJyYW5jaCBvZiBhIFBhcmFsbGVsIHN0YXRlIGZhaWxlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEJSQU5DSF9GQUlMRUQgPSAnU3RhdGVzLkJyYW5jaEZhaWxlZCc7XG5cbiAgICAvKipcbiAgICAgKiBBIENob2ljZSBzdGF0ZSBmYWlsZWQgdG8gZmluZCBhIG1hdGNoIGZvciB0aGUgY29uZGl0aW9uIGZpZWxkIGV4dHJhY3RlZFxuICAgICAqIGZyb20gaXRzIGlucHV0LlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTk9fQ0hPSUNFX01BVENIRUQgPSAnU3RhdGVzLk5vQ2hvaWNlTWF0Y2hlZCc7XG59XG5cbi8qKlxuICogUmV0cnkgZGV0YWlsc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJldHJ5UHJvcHMge1xuICAgIC8qKlxuICAgICAqIEVycm9ycyB0byByZXRyeVxuICAgICAqXG4gICAgICogQSBsaXN0IG9mIGVycm9yIHN0cmluZ3MgdG8gcmV0cnksIHdoaWNoIGNhbiBiZSBlaXRoZXIgcHJlZGVmaW5lZCBlcnJvcnNcbiAgICAgKiAoZm9yIGV4YW1wbGUgRXJyb3JzLk5vQ2hvaWNlTWF0Y2hlZCkgb3IgYSBzZWxmLWRlZmluZWQgZXJyb3IuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBBbGwgZXJyb3JzXG4gICAgICovXG4gICAgcmVhZG9ubHkgZXJyb3JzPzogc3RyaW5nW107XG5cbiAgICAvKipcbiAgICAgKiBIb3cgbWFueSBzZWNvbmRzIHRvIHdhaXQgaW5pdGlhbGx5IGJlZm9yZSByZXRyeWluZ1xuICAgICAqXG4gICAgICogQGRlZmF1bHQgRHVyYXRpb24uc2Vjb25kcygxKVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGludGVydmFsPzogRHVyYXRpb247XG5cbiAgICAvKipcbiAgICAgKiBIb3cgbWFueSB0aW1lcyB0byByZXRyeSB0aGlzIHBhcnRpY3VsYXIgZXJyb3IuXG4gICAgICpcbiAgICAgKiBNYXkgYmUgMCB0byBkaXNhYmxlIHJldHJ5IGZvciBzcGVjaWZpYyBlcnJvcnMgKGluIGNhc2UgeW91IGhhdmVcbiAgICAgKiBhIGNhdGNoLWFsbCByZXRyeSBwb2xpY3kpLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgM1xuICAgICAqL1xuICAgIHJlYWRvbmx5IG1heEF0dGVtcHRzPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGljYXRpb24gZm9yIGhvdyBtdWNoIGxvbmdlciB0aGUgd2FpdCBpbnRlcnZhbCBnZXRzIG9uIGV2ZXJ5IHJldHJ5XG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAyXG4gICAgICovXG4gICAgcmVhZG9ubHkgYmFja29mZlJhdGU/OiBudW1iZXI7XG59XG5cbi8qKlxuICogRXJyb3IgaGFuZGxlciBkZXRhaWxzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2F0Y2hQcm9wcyB7XG4gICAgLyoqXG4gICAgICogRXJyb3JzIHRvIHJlY292ZXIgZnJvbSBieSBnb2luZyB0byB0aGUgZ2l2ZW4gc3RhdGVcbiAgICAgKlxuICAgICAqIEEgbGlzdCBvZiBlcnJvciBzdHJpbmdzIHRvIHJldHJ5LCB3aGljaCBjYW4gYmUgZWl0aGVyIHByZWRlZmluZWQgZXJyb3JzXG4gICAgICogKGZvciBleGFtcGxlIEVycm9ycy5Ob0Nob2ljZU1hdGNoZWQpIG9yIGEgc2VsZi1kZWZpbmVkIGVycm9yLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgQWxsIGVycm9yc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGVycm9ycz86IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogSlNPTlBhdGggZXhwcmVzc2lvbiB0byBpbmRpY2F0ZSB3aGVyZSB0byBpbmplY3QgdGhlIGVycm9yIGRhdGFcbiAgICAgKlxuICAgICAqIE1heSBhbHNvIGJlIHRoZSBzcGVjaWFsIHZhbHVlIERJU0NBUkQsIHdoaWNoIHdpbGwgY2F1c2UgdGhlIGVycm9yXG4gICAgICogZGF0YSB0byBiZSBkaXNjYXJkZWQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAkXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzdWx0UGF0aD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBTcGVjaWFsIHN0cmluZyB2YWx1ZSB0byBkaXNjYXJkIHN0YXRlIGlucHV0LCBvdXRwdXQgb3IgcmVzdWx0XG4gKi9cbmV4cG9ydCBjb25zdCBESVNDQVJEID0gJ0RJU0NBUkQnO1xuIl19