"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Three ways to call an integrated service: Request Response, Run a Job and Wait for a Callback with Task Token.
 * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html
 *
 * Here, they are named as FIRE_AND_FORGET, SYNC and WAIT_FOR_TASK_TOKEN respectly.
 *
 * @default FIRE_AND_FORGET
 */
var ServiceIntegrationPattern;
(function (ServiceIntegrationPattern) {
    /**
     * Call a service and progress to the next state immediately after the API call completes
     */
    ServiceIntegrationPattern["FIRE_AND_FORGET"] = "FIRE_AND_FORGET";
    /**
     * Call a service and wait for a job to complete.
     */
    ServiceIntegrationPattern["SYNC"] = "SYNC";
    /**
     * Call a service with a task token and wait until that token is returned by SendTaskSuccess/SendTaskFailure with paylaod
     */
    ServiceIntegrationPattern["WAIT_FOR_TASK_TOKEN"] = "WAIT_FOR_TASK_TOKEN";
})(ServiceIntegrationPattern = exports.ServiceIntegrationPattern || (exports.ServiceIntegrationPattern = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC1mdW5jdGlvbnMtdGFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0ZXAtZnVuY3Rpb25zLXRhc2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFpRkE7Ozs7Ozs7R0FPRztBQUNILElBQVkseUJBZVg7QUFmRCxXQUFZLHlCQUF5QjtJQUNuQzs7T0FFRztJQUNILGdFQUFtQyxDQUFBO0lBRW5DOztPQUVHO0lBQ0gsMENBQWEsQ0FBQTtJQUViOztPQUVHO0lBQ0gsd0VBQTJDLENBQUE7QUFDN0MsQ0FBQyxFQWZXLHlCQUF5QixHQUF6QixpQ0FBeUIsS0FBekIsaUNBQXlCLFFBZXBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsb3Vkd2F0Y2ggPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY2xvdWR3YXRjaCcpO1xuaW1wb3J0IGlhbSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1pYW0nKTtcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAnLi9zdGF0ZXMvdGFzayc7XG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciByZXNvdXJjZXMgdGhhdCBjYW4gYmUgdXNlZCBhcyB0YXNrc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElTdGVwRnVuY3Rpb25zVGFzayB7XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdGFzayBvYmplY3QgaXMgdXNlZCBpbiBhIHdvcmtmbG93XG4gICAqL1xuICBiaW5kKHRhc2s6IFRhc2spOiBTdGVwRnVuY3Rpb25zVGFza0NvbmZpZztcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIHRoYXQgZGVmaW5lIHdoYXQga2luZCBvZiB0YXNrIHNob3VsZCBiZSBjcmVhdGVkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RlcEZ1bmN0aW9uc1Rhc2tDb25maWcge1xuICAvKipcbiAgICogVGhlIHJlc291cmNlIHRoYXQgcmVwcmVzZW50cyB0aGUgd29yayB0byBiZSBleGVjdXRlZFxuICAgKlxuICAgKiBFaXRoZXIgdGhlIEFSTiBvZiBhIExhbWJkYSBGdW5jdGlvbiBvciBBY3Rpdml0eSwgb3IgYSBzcGVjaWFsXG4gICAqIEFSTi5cbiAgICovXG4gIHJlYWRvbmx5IHJlc291cmNlQXJuOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFBhcmFtZXRlcnMgcGFzcyBhIGNvbGxlY3Rpb24gb2Yga2V5LXZhbHVlIHBhaXJzLCBlaXRoZXIgc3RhdGljIHZhbHVlcyBvciBKU09OUGF0aCBleHByZXNzaW9ucyB0aGF0IHNlbGVjdCBmcm9tIHRoZSBpbnB1dC5cbiAgICpcbiAgICogV2hhdCBpcyBwYXNzZWQgaGVyZSB3aWxsIGJlIG1lcmdlZCB3aXRoIGFueSBkZWZhdWx0IHBhcmFtZXRlcnNcbiAgICogY29uZmlndXJlZCBieSB0aGUgYHJlc291cmNlYC4gRm9yIGV4YW1wbGUsIGEgRHluYW1vREIgdGFibGUgdGFyZ2V0XG4gICAqIHdpbGxcbiAgICpcbiAgICogQHNlZVxuICAgKiBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vc3RlcC1mdW5jdGlvbnMvbGF0ZXN0L2RnL2lucHV0LW91dHB1dC1pbnB1dHBhdGgtcGFyYW1zLmh0bWwjaW5wdXQtb3V0cHV0LXBhcmFtZXRlcnNcbiAgICpcbiAgICogQGRlZmF1bHQgTm8gcGFyYW1ldGVyc1xuICAgKi9cbiAgcmVhZG9ubHkgcGFyYW1ldGVycz86IHsgW25hbWU6IHN0cmluZ106IGFueSB9O1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHRpbWUgYmV0d2VlbiBoZWFydCBiZWF0c1xuICAgKlxuICAgKiBJZiB0aGUgdGltZSBiZXR3ZWVuIGhlYXJ0IGJlYXRzIHRha2VzIGxvbmdlciB0aGFuIHRoaXMsIGEgJ1RpbWVvdXQnIGVycm9yIGlzIHJhaXNlZC5cbiAgICpcbiAgICogVGhpcyBpcyBvbmx5IHJlbGV2YW50IHdoZW4gdXNpbmcgYW4gQWN0aXZpdHkgdHlwZSBhcyByZXNvdXJjZS5cbiAgICpcbiAgICogQGRlZmF1bHQgTm8gaGVhcnQgYmVhdCB0aW1lb3V0XG4gICAqL1xuICByZWFkb25seSBoZWFydGJlYXQ/OiBEdXJhdGlvbjtcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBwb2xpY3kgc3RhdGVtZW50cyB0byBhZGQgdG8gdGhlIGV4ZWN1dGlvbiByb2xlXG4gICAqXG4gICAqIEBkZWZhdWx0IE5vIHBvbGljeSByb2xlc1xuICAgKi9cbiAgcmVhZG9ubHkgcG9saWN5U3RhdGVtZW50cz86IGlhbS5Qb2xpY3lTdGF0ZW1lbnRbXTtcblxuICAvKipcbiAgICogUHJlZml4IGZvciBzaW5ndWxhciBtZXRyaWMgbmFtZXMgb2YgYWN0aXZpdHkgYWN0aW9uc1xuICAgKlxuICAgKiBAZGVmYXVsdCBObyBzdWNoIG1ldHJpY3NcbiAgICovXG4gIHJlYWRvbmx5IG1ldHJpY1ByZWZpeFNpbmd1bGFyPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBQcmVmaXggZm9yIHBsdXJhbCBtZXRyaWMgbmFtZXMgb2YgYWN0aXZpdHkgYWN0aW9uc1xuICAgKlxuICAgKiBAZGVmYXVsdCBObyBzdWNoIG1ldHJpY3NcbiAgICovXG4gIHJlYWRvbmx5IG1ldHJpY1ByZWZpeFBsdXJhbD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGRpbWVuc2lvbnMgdG8gYXR0YWNoIHRvIG1ldHJpY3NcbiAgICpcbiAgICogQGRlZmF1bHQgTm8gbWV0cmljc1xuICAgKi9cbiAgcmVhZG9ubHkgbWV0cmljRGltZW5zaW9ucz86IGNsb3Vkd2F0Y2guRGltZW5zaW9uSGFzaDtcbn1cblxuLyoqXG4gKiBUaHJlZSB3YXlzIHRvIGNhbGwgYW4gaW50ZWdyYXRlZCBzZXJ2aWNlOiBSZXF1ZXN0IFJlc3BvbnNlLCBSdW4gYSBKb2IgYW5kIFdhaXQgZm9yIGEgQ2FsbGJhY2sgd2l0aCBUYXNrIFRva2VuLlxuICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vc3RlcC1mdW5jdGlvbnMvbGF0ZXN0L2RnL2Nvbm5lY3QtdG8tcmVzb3VyY2UuaHRtbFxuICpcbiAqIEhlcmUsIHRoZXkgYXJlIG5hbWVkIGFzIEZJUkVfQU5EX0ZPUkdFVCwgU1lOQyBhbmQgV0FJVF9GT1JfVEFTS19UT0tFTiByZXNwZWN0bHkuXG4gKlxuICogQGRlZmF1bHQgRklSRV9BTkRfRk9SR0VUXG4gKi9cbmV4cG9ydCBlbnVtIFNlcnZpY2VJbnRlZ3JhdGlvblBhdHRlcm4ge1xuICAvKipcbiAgICogQ2FsbCBhIHNlcnZpY2UgYW5kIHByb2dyZXNzIHRvIHRoZSBuZXh0IHN0YXRlIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBBUEkgY2FsbCBjb21wbGV0ZXNcbiAgICovXG4gIEZJUkVfQU5EX0ZPUkdFVCA9ICdGSVJFX0FORF9GT1JHRVQnLFxuXG4gIC8qKlxuICAgKiBDYWxsIGEgc2VydmljZSBhbmQgd2FpdCBmb3IgYSBqb2IgdG8gY29tcGxldGUuXG4gICAqL1xuICBTWU5DID0gJ1NZTkMnLFxuXG4gIC8qKlxuICAgKiBDYWxsIGEgc2VydmljZSB3aXRoIGEgdGFzayB0b2tlbiBhbmQgd2FpdCB1bnRpbCB0aGF0IHRva2VuIGlzIHJldHVybmVkIGJ5IFNlbmRUYXNrU3VjY2Vzcy9TZW5kVGFza0ZhaWx1cmUgd2l0aCBwYXlsYW9kXG4gICAqL1xuICBXQUlUX0ZPUl9UQVNLX1RPS0VOID0gJ1dBSVRfRk9SX1RBU0tfVE9LRU4nXG59XG4iXX0=