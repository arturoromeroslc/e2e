"use strict";
const lib_1 = require("../lib");
module.exports = {
    'deep replace correctly handles fields in arrays'(test) {
        test.deepEqual(lib_1.FieldUtils.renderObject({
            unknown: undefined,
            bool: true,
            literal: 'literal',
            field: lib_1.Data.stringAt('$.stringField'),
            listField: lib_1.Data.listAt('$.listField'),
            deep: [
                'literal',
                {
                    deepField: lib_1.Data.numberAt('$.numField'),
                }
            ]
        }), {
            'bool': true,
            'literal': 'literal',
            'field.$': '$.stringField',
            'listField.$': '$.listField',
            'deep': [
                'literal',
                {
                    'deepField.$': '$.numField'
                }
            ],
        });
        test.done();
    },
    'exercise contextpaths'(test) {
        test.deepEqual(lib_1.FieldUtils.renderObject({
            str: lib_1.Context.stringAt('$$.Execution.StartTime'),
            count: lib_1.Context.numberAt('$$.State.RetryCount'),
            token: lib_1.Context.taskToken,
            entire: lib_1.Context.entireContext
        }), {
            'str.$': '$$.Execution.StartTime',
            'count.$': '$$.State.RetryCount',
            'token.$': '$$.Task.Token',
            'entire.$': '$$'
        });
        test.done();
    },
    'find all referenced paths'(test) {
        test.deepEqual(lib_1.FieldUtils.findReferencedPaths({
            bool: false,
            literal: 'literal',
            field: lib_1.Data.stringAt('$.stringField'),
            listField: lib_1.Data.listAt('$.listField'),
            deep: [
                'literal',
                {
                    field: lib_1.Data.stringAt('$.stringField'),
                    deepField: lib_1.Data.numberAt('$.numField'),
                }
            ]
        }), [
            '$.listField',
            '$.numField',
            '$.stringField',
        ]);
        test.done();
    },
    'cannot have JsonPath fields in arrays'(test) {
        test.throws(() => {
            lib_1.FieldUtils.renderObject({
                deep: [lib_1.Data.stringAt('$.hello')]
            });
        }, /Cannot use JsonPath fields in an array/);
        test.done();
    },
    'datafield path must be correct'(test) {
        test.throws(() => {
            lib_1.Data.stringAt('hello');
        }, /must start with '\$.'/);
        test.done();
    },
    'context path must be correct'(test) {
        test.throws(() => {
            lib_1.Context.stringAt('hello');
        }, /must start with '\$\$.'/);
        test.done();
    },
    'test contains task token'(test) {
        test.equal(true, lib_1.FieldUtils.containsTaskToken({
            field: lib_1.Context.taskToken
        }));
        test.equal(true, lib_1.FieldUtils.containsTaskToken({
            field: lib_1.Context.stringAt('$$.Task'),
        }));
        test.equal(true, lib_1.FieldUtils.containsTaskToken({
            field: lib_1.Context.entireContext
        }));
        test.equal(false, lib_1.FieldUtils.containsTaskToken({
            oops: 'not here'
        }));
        test.equal(false, lib_1.FieldUtils.containsTaskToken({
            oops: lib_1.Context.stringAt('$$.Execution.StartTime')
        }));
        test.done();
    },
    'arbitrary JSONPath fields are not replaced'(test) {
        test.deepEqual(lib_1.FieldUtils.renderObject({
            field: '$.content',
        }), {
            field: '$.content'
        });
        test.done();
    },
    'fields cannot be used somewhere in a string interpolation'(test) {
        test.throws(() => {
            lib_1.FieldUtils.renderObject({
                field: `contains ${lib_1.Data.stringAt('$.hello')}`
            });
        }, /Field references must be the entire string/);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,