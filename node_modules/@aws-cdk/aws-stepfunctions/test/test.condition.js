"use strict";
const stepfunctions = require("../lib");
function assertRendersTo(test, cond, expected) {
    test.deepEqual(cond.renderCondition(), expected);
}
module.exports = {
    'Condition variables must start with $.'(test) {
        test.throws(() => {
            stepfunctions.Condition.stringEquals('a', 'b');
        });
        test.done();
    },
    'NotConditon must render properly'(test) {
        assertRendersTo(test, stepfunctions.Condition.not(stepfunctions.Condition.stringEquals('$.a', 'b')), { Not: { Variable: '$.a', StringEquals: 'b' } });
        test.done();
    },
    'CompoundCondition must render properly'(test) {
        assertRendersTo(test, stepfunctions.Condition.and(stepfunctions.Condition.booleanEquals('$.a', true), stepfunctions.Condition.numberGreaterThan('$.b', 3)), { And: [{ Variable: '$.a', BooleanEquals: true }, { Variable: '$.b', NumericGreaterThan: 3 }] });
        test.done();
    },
    'Exercise a number of other conditions'(test) {
        const cases = [
            [
                stepfunctions.Condition.stringLessThan('$.a', 'foo'),
                { Variable: '$.a', StringLessThan: 'foo' },
            ],
            [
                stepfunctions.Condition.stringLessThanEquals('$.a', 'foo'),
                { Variable: '$.a', StringLessThanEquals: 'foo' },
            ],
            [
                stepfunctions.Condition.stringGreaterThan('$.a', 'foo'),
                { Variable: '$.a', StringGreaterThan: 'foo' },
            ],
            [
                stepfunctions.Condition.stringGreaterThanEquals('$.a', 'foo'),
                { Variable: '$.a', StringGreaterThanEquals: 'foo' },
            ],
            [
                stepfunctions.Condition.numberEquals('$.a', 5),
                { Variable: '$.a', NumericEquals: 5 }
            ],
        ];
        for (const [cond, expected] of cases) {
            assertRendersTo(test, cond, expected);
        }
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jb25kaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LmNvbmRpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0Esd0NBQXlDO0FBNkR6QyxTQUFTLGVBQWUsQ0FBQyxJQUFVLEVBQUUsSUFBNkIsRUFBRSxRQUFhO0lBQzdFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUE3REQsaUJBQVM7SUFDTCx3Q0FBd0MsQ0FBQyxJQUFVO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ2IsYUFBYSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxrQ0FBa0MsQ0FBQyxJQUFVO1FBQ3pDLGVBQWUsQ0FBQyxJQUFJLEVBQ2hCLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUM3RSxFQUFDLEdBQUcsRUFBRSxFQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBQyxFQUFDLENBQzlDLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUNELHdDQUF3QyxDQUFDLElBQVU7UUFDL0MsZUFBZSxDQUFDLElBQUksRUFDaEIsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQ3ZCLGFBQWEsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFDbEQsYUFBYSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQ3RELEVBQ0QsRUFBRSxHQUFHLEVBQUUsQ0FBRSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRSxDQUFDLEVBQUUsQ0FBRSxFQUFFLENBQ3BHLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUNELHVDQUF1QyxDQUFDLElBQVU7UUFDOUMsTUFBTSxLQUFLLEdBQTZDO1lBQ3BEO2dCQUNJLGFBQWEsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7Z0JBQ3BELEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFO2FBQzdDO1lBQ0Q7Z0JBQ0ksYUFBYSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO2dCQUMxRCxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFO2FBQ25EO1lBQ0Q7Z0JBQ0ksYUFBYSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO2dCQUN2RCxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFO2FBQ2hEO1lBQ0Q7Z0JBQ0ksYUFBYSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO2dCQUM3RCxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFO2FBQ3REO1lBQ0Q7Z0JBQ0ksYUFBYSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDOUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxDQUFDLEVBQUU7YUFDeEM7U0FDSixDQUFDO1FBRUYsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLEtBQUssRUFBRTtZQUNsQyxlQUFlLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgc3RlcGZ1bmN0aW9ucyA9IHJlcXVpcmUoJy4uL2xpYicpO1xuXG5leHBvcnQgPSB7XG4gICAgJ0NvbmRpdGlvbiB2YXJpYWJsZXMgbXVzdCBzdGFydCB3aXRoICQuJyh0ZXN0OiBUZXN0KSB7XG4gICAgICAgIHRlc3QudGhyb3dzKCgpID0+IHtcbiAgICAgICAgICAgIHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnYScsICdiJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG4gICAgJ05vdENvbmRpdG9uIG11c3QgcmVuZGVyIHByb3Blcmx5Jyh0ZXN0OiBUZXN0KSB7XG4gICAgICAgIGFzc2VydFJlbmRlcnNUbyh0ZXN0LFxuICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24ubm90KHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5hJywgJ2InKSksXG4gICAgICAgICAgICB7Tm90OiB7VmFyaWFibGU6ICckLmEnLCBTdHJpbmdFcXVhbHM6ICdiJ319XG4gICAgICAgICk7XG5cbiAgICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcbiAgICAnQ29tcG91bmRDb25kaXRpb24gbXVzdCByZW5kZXIgcHJvcGVybHknKHRlc3Q6IFRlc3QpIHtcbiAgICAgICAgYXNzZXJ0UmVuZGVyc1RvKHRlc3QsXG4gICAgICAgICAgICBzdGVwZnVuY3Rpb25zLkNvbmRpdGlvbi5hbmQoXG4gICAgICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24uYm9vbGVhbkVxdWFscygnJC5hJywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24ubnVtYmVyR3JlYXRlclRoYW4oJyQuYicsIDMpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgeyBBbmQ6IFsgeyBWYXJpYWJsZTogJyQuYScsIEJvb2xlYW5FcXVhbHM6IHRydWUgfSwgeyBWYXJpYWJsZTogJyQuYicsIE51bWVyaWNHcmVhdGVyVGhhbjogMyB9IF0gfVxuICAgICAgICApO1xuXG4gICAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG4gICAgJ0V4ZXJjaXNlIGEgbnVtYmVyIG9mIG90aGVyIGNvbmRpdGlvbnMnKHRlc3Q6IFRlc3QpIHtcbiAgICAgICAgY29uc3QgY2FzZXM6IEFycmF5PFtzdGVwZnVuY3Rpb25zLkNvbmRpdGlvbiwgb2JqZWN0XT4gPSBbXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24uc3RyaW5nTGVzc1RoYW4oJyQuYScsICdmb28nKSxcbiAgICAgICAgICAgICAgICB7IFZhcmlhYmxlOiAnJC5hJywgU3RyaW5nTGVzc1RoYW46ICdmb28nIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLnN0cmluZ0xlc3NUaGFuRXF1YWxzKCckLmEnLCAnZm9vJyksXG4gICAgICAgICAgICAgICAgeyBWYXJpYWJsZTogJyQuYScsIFN0cmluZ0xlc3NUaGFuRXF1YWxzOiAnZm9vJyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBzdGVwZnVuY3Rpb25zLkNvbmRpdGlvbi5zdHJpbmdHcmVhdGVyVGhhbignJC5hJywgJ2ZvbycpLFxuICAgICAgICAgICAgICAgIHsgVmFyaWFibGU6ICckLmEnLCBTdHJpbmdHcmVhdGVyVGhhbjogJ2ZvbycgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgc3RlcGZ1bmN0aW9ucy5Db25kaXRpb24uc3RyaW5nR3JlYXRlclRoYW5FcXVhbHMoJyQuYScsICdmb28nKSxcbiAgICAgICAgICAgICAgICB7IFZhcmlhYmxlOiAnJC5hJywgU3RyaW5nR3JlYXRlclRoYW5FcXVhbHM6ICdmb28nIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLm51bWJlckVxdWFscygnJC5hJywgNSksXG4gICAgICAgICAgICAgICAgeyBWYXJpYWJsZTogJyQuYScsIE51bWVyaWNFcXVhbHM6IDUgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgXTtcblxuICAgICAgICBmb3IgKGNvbnN0IFtjb25kLCBleHBlY3RlZF0gb2YgY2FzZXMpIHtcbiAgICAgICAgICAgIGFzc2VydFJlbmRlcnNUbyh0ZXN0LCBjb25kLCBleHBlY3RlZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9LFxufTtcblxuZnVuY3Rpb24gYXNzZXJ0UmVuZGVyc1RvKHRlc3Q6IFRlc3QsIGNvbmQ6IHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLCBleHBlY3RlZDogYW55KSB7XG4gICAgdGVzdC5kZWVwRXF1YWwoY29uZC5yZW5kZXJDb25kaXRpb24oKSwgZXhwZWN0ZWQpO1xufVxuIl19