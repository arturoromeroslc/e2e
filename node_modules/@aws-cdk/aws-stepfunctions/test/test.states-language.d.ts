import { Test } from 'nodeunit';
declare const _default: {
    'Basic composition': {
        'A single task is a State Machine'(test: Test): void;
        'A sequence of two tasks is a State Machine'(test: Test): void;
        'You dont need to hold on to the state to render the entire state machine correctly'(test: Test): void;
        'A chain can be appended to'(test: Test): void;
        'A state machine can be appended to another state machine'(test: Test): void;
        'A state machine definition can be instantiated and chained'(test: Test): void;
        'A success state cannot be chained onto'(test: Test): void;
        'A failure state cannot be chained onto'(test: Test): void;
        'Parallels can contain direct states'(test: Test): void;
        'Parallels can contain instantiated reusable definitions'(test: Test): void;
        'State Machine Fragments can be wrapped in a single state'(test: Test): void;
        'Chaining onto branched failure state ignores failure state'(test: Test): void;
        'Can include OTHERWISE transition for Choice in afterwards()'(test: Test): void;
    };
    'Goto support': {
        'State machines can have unconstrainted gotos'(test: Test): void;
    };
    'Catches': {
        'States can have error branches'(test: Test): void;
        'Retries and errors with a result path'(test: Test): void;
        'Can wrap chain and attach error handler'(test: Test): void;
        'Chaining does not chain onto error handler state'(test: Test): void;
        'Chaining does not chain onto error handler, extended'(test: Test): void;
        'Error handler with a fragment'(test: Test): void;
        'Can merge state machines with shared states'(test: Test): void;
    };
    'State machine validation': {
        'No duplicate state IDs'(test: Test): void;
        'No duplicate state IDs even across Parallel branches'(test: Test): void;
        'No cross-parallel jumps'(test: Test): void;
    };
};
export = _default;
