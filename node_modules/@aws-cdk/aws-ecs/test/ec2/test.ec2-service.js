"use strict";
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const elb = require("@aws-cdk/aws-elasticloadbalancing");
const elbv2 = require("@aws-cdk/aws-elasticloadbalancingv2");
const cloudmap = require("@aws-cdk/aws-servicediscovery");
const cdk = require("@aws-cdk/core");
const ecs = require("../../lib");
const lib_1 = require("../../lib");
const base_service_1 = require("../../lib/base/base-service");
const placement_1 = require("../../lib/placement");
module.exports = {
    "When creating an EC2 Service": {
        "with only required properties set, it correctly sets default properties"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                TaskDefinition: {
                    Ref: "Ec2TaskDef0226F28C"
                },
                Cluster: {
                    Ref: "EcsCluster97242B84"
                },
                DeploymentConfiguration: {
                    MaximumPercent: 200,
                    MinimumHealthyPercent: 50
                },
                DesiredCount: 1,
                LaunchType: base_service_1.LaunchType.EC2,
                SchedulingStrategy: "REPLICA",
                EnableECSManagedTags: false,
            }));
            test.done();
        },
        "with all properties set"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                networkMode: lib_1.NetworkMode.AWS_VPC
            });
            cluster.addDefaultCloudMapNamespace({
                name: 'foo.com',
                type: cloudmap.NamespaceType.DNS_PRIVATE
            });
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512,
            });
            // WHEN
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
                desiredCount: 2,
                assignPublicIp: true,
                cloudMapOptions: {
                    name: "myapp",
                    dnsRecordType: cloudmap.DnsRecordType.A,
                    dnsTtl: cdk.Duration.seconds(50),
                    failureThreshold: 20
                },
                daemon: false,
                healthCheckGracePeriod: cdk.Duration.seconds(60),
                maxHealthyPercent: 150,
                minHealthyPercent: 55,
                securityGroup: new ec2.SecurityGroup(stack, 'SecurityGroup1', {
                    allowAllOutbound: true,
                    description: 'Example',
                    securityGroupName: 'Bob',
                    vpc,
                }),
                serviceName: "bonjour",
                vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC }
            });
            service.addPlacementConstraints(placement_1.PlacementConstraint.memberOf("attribute:ecs.instance-type =~ t2.*"));
            service.addPlacementStrategies(placement_1.PlacementStrategy.spreadAcross(lib_1.BuiltInAttributes.AVAILABILITY_ZONE));
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                TaskDefinition: {
                    Ref: "Ec2TaskDef0226F28C"
                },
                Cluster: {
                    Ref: "EcsCluster97242B84"
                },
                DeploymentConfiguration: {
                    MaximumPercent: 150,
                    MinimumHealthyPercent: 55
                },
                DesiredCount: 2,
                LaunchType: base_service_1.LaunchType.EC2,
                NetworkConfiguration: {
                    AwsvpcConfiguration: {
                        AssignPublicIp: "ENABLED",
                        SecurityGroups: [
                            {
                                "Fn::GetAtt": [
                                    "SecurityGroup1F554B36F",
                                    "GroupId"
                                ]
                            }
                        ],
                        Subnets: [
                            {
                                Ref: "MyVpcPublicSubnet1SubnetF6608456"
                            },
                            {
                                Ref: "MyVpcPublicSubnet2Subnet492B6BFB"
                            }
                        ]
                    }
                },
                PlacementConstraints: [
                    {
                        Expression: "attribute:ecs.instance-type =~ t2.*",
                        Type: "memberOf"
                    }
                ],
                PlacementStrategies: [
                    {
                        Field: "attribute:ecs.availability-zone",
                        Type: "spread"
                    }
                ],
                SchedulingStrategy: "REPLICA",
                ServiceName: "bonjour",
                ServiceRegistries: [
                    {
                        RegistryArn: {
                            "Fn::GetAtt": [
                                "Ec2ServiceCloudmapService45B52C0F",
                                "Arn"
                            ]
                        }
                    }
                ]
            }));
            test.done();
        },
        "throws when task definition is not EC2 compatible"(test) {
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            const taskDefinition = new ecs.TaskDefinition(stack, 'FargateTaskDef', {
                compatibility: ecs.Compatibility.FARGATE,
                cpu: "256",
                memoryMiB: "512"
            });
            taskDefinition.addContainer('BaseContainer', {
                image: ecs.ContainerImage.fromRegistry('test'),
                memoryReservationMiB: 10,
            });
            // THEN
            test.throws(() => {
                new ecs.Ec2Service(stack, "Ec2Service", {
                    cluster,
                    taskDefinition,
                });
            }, /Supplied TaskDefinition is not configured for compatibility with EC2/);
            test.done();
        },
        "errors if daemon and desiredCount both specified"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer('BaseContainer', {
                image: ecs.ContainerImage.fromRegistry('test'),
                memoryReservationMiB: 10,
            });
            // THEN
            test.throws(() => {
                new ecs.Ec2Service(stack, "Ec2Service", {
                    cluster,
                    taskDefinition,
                    daemon: true,
                    desiredCount: 2
                });
            }, /Don't supply desiredCount/);
            test.done();
        },
        "errors if daemon and maximumPercent not 100"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer('BaseContainer', {
                image: ecs.ContainerImage.fromRegistry('test'),
                memoryReservationMiB: 10,
            });
            // THEN
            test.throws(() => {
                new ecs.Ec2Service(stack, "Ec2Service", {
                    cluster,
                    taskDefinition,
                    daemon: true,
                    maxHealthyPercent: 300
                });
            }, /Maximum percent must be 100 for daemon mode./);
            test.done();
        },
        "errors if daemon and minimum not 0"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer('BaseContainer', {
                image: ecs.ContainerImage.fromRegistry('test'),
                memoryReservationMiB: 10,
            });
            // THEN
            test.throws(() => {
                new ecs.Ec2Service(stack, "Ec2Service", {
                    cluster,
                    taskDefinition,
                    daemon: true,
                    minHealthyPercent: 50
                });
            }, /Minimum healthy percent must be 0 for daemon mode./);
            test.done();
        },
        'Output does not contain DesiredCount if daemon mode is set'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer('BaseContainer', {
                image: ecs.ContainerImage.fromRegistry('test'),
                memoryReservationMiB: 10,
            });
            // WHEN
            new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
                daemon: true,
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::ECS::Service', (service) => {
                return service.LaunchType === base_service_1.LaunchType.EC2 && service.DesiredCount === undefined;
            }));
            test.done();
        },
        "errors if no container definitions"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            // THEN
            test.throws(() => {
                new ecs.Ec2Service(stack, "Ec2Service", {
                    cluster,
                    taskDefinition,
                });
            });
            test.done();
        },
        "sets daemon scheduling strategy"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
                daemon: true
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                SchedulingStrategy: "DAEMON",
                DeploymentConfiguration: {
                    MaximumPercent: 100,
                    MinimumHealthyPercent: 0
                },
            }));
            test.done();
        },
        "with a TaskDefinition with Bridge network mode": {
            "it errors if vpcSubnets is specified"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const vpc = new ec2.Vpc(stack, 'MyVpc', {});
                const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
                cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                    networkMode: lib_1.NetworkMode.BRIDGE
                });
                taskDefinition.addContainer("web", {
                    image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                    memoryLimitMiB: 512
                });
                // THEN
                test.throws(() => {
                    new ecs.Ec2Service(stack, "Ec2Service", {
                        cluster,
                        taskDefinition,
                        vpcSubnets: {
                            subnetType: ec2.SubnetType.PUBLIC
                        }
                    });
                });
                // THEN
                test.done();
            },
            "it errors if assignPublicIp is true"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const vpc = new ec2.Vpc(stack, 'MyVpc', {});
                const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
                cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                    networkMode: lib_1.NetworkMode.BRIDGE
                });
                taskDefinition.addContainer("web", {
                    image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                    memoryLimitMiB: 512
                });
                // THEN
                test.throws(() => {
                    new ecs.Ec2Service(stack, "Ec2Service", {
                        cluster,
                        taskDefinition,
                        assignPublicIp: true
                    });
                });
                // THEN
                test.done();
            },
        },
        "with a TaskDefinition with AwsVpc network mode": {
            "it creates a security group for the service"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const vpc = new ec2.Vpc(stack, 'MyVpc', {});
                const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
                cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                    networkMode: lib_1.NetworkMode.AWS_VPC
                });
                taskDefinition.addContainer("web", {
                    image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                    memoryLimitMiB: 512
                });
                new ecs.Ec2Service(stack, "Ec2Service", {
                    cluster,
                    taskDefinition,
                });
                // THEN
                assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                    NetworkConfiguration: {
                        AwsvpcConfiguration: {
                            AssignPublicIp: "DISABLED",
                            SecurityGroups: [
                                {
                                    "Fn::GetAtt": [
                                        "Ec2ServiceSecurityGroupAEC30825",
                                        "GroupId"
                                    ]
                                }
                            ],
                            Subnets: [
                                {
                                    Ref: "MyVpcPrivateSubnet1Subnet5057CF7E"
                                },
                                {
                                    Ref: "MyVpcPrivateSubnet2Subnet0040C983"
                                },
                            ]
                        }
                    }
                }));
                test.done();
            },
            "it allows vpcSubnets"(test) {
                // GIVEN
                const stack = new cdk.Stack();
                const vpc = new ec2.Vpc(stack, 'MyVpc', {});
                const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
                cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
                const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                    networkMode: lib_1.NetworkMode.AWS_VPC
                });
                taskDefinition.addContainer("web", {
                    image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                    memoryLimitMiB: 512
                });
                new ecs.Ec2Service(stack, "Ec2Service", {
                    cluster,
                    taskDefinition,
                    vpcSubnets: {
                        subnetType: ec2.SubnetType.PUBLIC
                    }
                });
                // THEN
                test.done();
            },
        },
        "with distinctInstance placement constraint"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
                placementConstraints: [ecs.PlacementConstraint.distinctInstances()]
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                PlacementConstraints: [{
                        Type: "distinctInstance"
                    }]
            }));
            test.done();
        },
        "with memberOf placement constraints"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
            });
            service.addPlacementConstraints(placement_1.PlacementConstraint.memberOf("attribute:ecs.instance-type =~ t2.*"));
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                PlacementConstraints: [{
                        Expression: "attribute:ecs.instance-type =~ t2.*",
                        Type: "memberOf"
                    }]
            }));
            test.done();
        },
        "with spreadAcross container instances strategy"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
            });
            // WHEN
            service.addPlacementStrategies(placement_1.PlacementStrategy.spreadAcrossInstances());
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                PlacementStrategies: [{
                        Field: "instanceId",
                        Type: "spread"
                    }]
            }));
            test.done();
        },
        "with spreadAcross placement strategy"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
            });
            service.addPlacementStrategies(placement_1.PlacementStrategy.spreadAcross(lib_1.BuiltInAttributes.AVAILABILITY_ZONE));
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                PlacementStrategies: [{
                        Field: "attribute:ecs.availability-zone",
                        Type: "spread"
                    }]
            }));
            test.done();
        },
        "can turn PlacementStrategy into json format"(test) {
            // THEN
            test.deepEqual(placement_1.PlacementStrategy.spreadAcross(lib_1.BuiltInAttributes.AVAILABILITY_ZONE).toJson(), [{
                    type: 'spread',
                    field: 'attribute:ecs.availability-zone'
                }]);
            test.done();
        },
        "can turn PlacementConstraints into json format"(test) {
            // THEN
            test.deepEqual(placement_1.PlacementConstraint.distinctInstances().toJson(), [{
                    type: 'distinctInstance'
                }]);
            test.done();
        },
        "errors when spreadAcross with no input"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
            });
            // THEN
            test.throws(() => {
                service.addPlacementStrategies(placement_1.PlacementStrategy.spreadAcross());
            }, 'spreadAcross: give at least one field to spread by');
            test.done();
        },
        "errors with spreadAcross placement strategy if daemon specified"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
                daemon: true
            });
            // THEN
            test.throws(() => {
                service.addPlacementStrategies(placement_1.PlacementStrategy.spreadAcross(lib_1.BuiltInAttributes.AVAILABILITY_ZONE));
            });
            test.done();
        },
        "with no placement constraints"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
            });
            // THEN
            assert_1.expect(stack).notTo(assert_1.haveResource("AWS::ECS::Service", {
                PlacementConstraints: undefined
            }));
            test.done();
        },
        "with no placement strategy if daemon specified"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
                daemon: true
            });
            // THEN
            assert_1.expect(stack).notTo(assert_1.haveResource("AWS::ECS::Service", {
                PlacementStrategies: undefined
            }));
            test.done();
        },
        "with random placement strategy"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc');
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
            });
            service.addPlacementStrategies(placement_1.PlacementStrategy.randomly());
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                PlacementStrategies: [{
                        Type: "random"
                    }]
            }));
            test.done();
        },
        "errors with random placement strategy if daemon specified"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc');
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
                daemon: true
            });
            // THEN
            test.throws(() => {
                service.addPlacementStrategies(placement_1.PlacementStrategy.randomly());
            });
            test.done();
        },
        "with packedbyCpu placement strategy"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
            });
            service.addPlacementStrategies(placement_1.PlacementStrategy.packedByCpu());
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                PlacementStrategies: [{
                        Field: "cpu",
                        Type: "binpack"
                    }]
            }));
            test.done();
        },
        "with packedbyMemory placement strategy"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
            });
            service.addPlacementStrategies(placement_1.PlacementStrategy.packedByMemory());
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                PlacementStrategies: [{
                        Field: "memory",
                        Type: "binpack"
                    }]
            }));
            test.done();
        },
        "with packedBy placement strategy"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
            });
            service.addPlacementStrategies(placement_1.PlacementStrategy.packedBy(lib_1.BinPackResource.MEMORY));
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                PlacementStrategies: [{
                        Field: "memory",
                        Type: "binpack"
                    }]
            }));
            test.done();
        },
        "errors with packedBy placement strategy if daemon specified"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            taskDefinition.addContainer("web", {
                image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample"),
                memoryLimitMiB: 512
            });
            const service = new ecs.Ec2Service(stack, "Ec2Service", {
                cluster,
                taskDefinition,
                daemon: true
            });
            // THEN
            test.throws(() => {
                service.addPlacementStrategies(placement_1.PlacementStrategy.packedBy(lib_1.BinPackResource.MEMORY));
            });
            test.done();
        }
    },
    "attachToClassicLB": {
        "allows network mode of task definition to be host"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'VPC');
            const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TD', { networkMode: ecs.NetworkMode.HOST });
            const container = taskDefinition.addContainer('web', {
                image: ecs.ContainerImage.fromRegistry('test'),
                memoryLimitMiB: 1024,
            });
            container.addPortMappings({ containerPort: 808 });
            const service = new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition
            });
            // THEN
            const lb = new elb.LoadBalancer(stack, 'LB', { vpc });
            service.attachToClassicLB(lb);
            test.done();
        },
        'allows network mode of task definition to be AwsVpc'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'VPC');
            const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TD', { networkMode: ecs.NetworkMode.AWS_VPC });
            const container = taskDefinition.addContainer('web', {
                image: ecs.ContainerImage.fromRegistry('test'),
                memoryLimitMiB: 1024,
            });
            container.addPortMappings({ containerPort: 808 });
            const service = new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition
            });
            // THEN
            const lb = new elb.LoadBalancer(stack, 'LB', { vpc });
            service.attachToClassicLB(lb);
            test.done();
        },
        'throws when network mode of task definition is bridge'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'VPC');
            const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TD', { networkMode: ecs.NetworkMode.BRIDGE });
            const container = taskDefinition.addContainer('web', {
                image: ecs.ContainerImage.fromRegistry('test'),
                memoryLimitMiB: 1024,
            });
            container.addPortMappings({ containerPort: 808 });
            const service = new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition
            });
            // THEN
            const lb = new elb.LoadBalancer(stack, 'LB', { vpc });
            test.throws(() => {
                service.attachToClassicLB(lb);
            }, /Cannot use a Classic Load Balancer if NetworkMode is Bridge. Use Host or AwsVpc instead./);
            test.done();
        },
        'throws when network mode of task definition is none'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'VPC');
            const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TD', { networkMode: ecs.NetworkMode.NONE });
            const container = taskDefinition.addContainer('web', {
                image: ecs.ContainerImage.fromRegistry('test'),
                memoryLimitMiB: 1024,
            });
            container.addPortMappings({ containerPort: 808 });
            const service = new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition
            });
            // THEN
            const lb = new elb.LoadBalancer(stack, 'LB', { vpc });
            test.throws(() => {
                service.attachToClassicLB(lb);
            }, /Cannot use a Classic Load Balancer if NetworkMode is None. Use Host or AwsVpc instead./);
            test.done();
        }
    },
    "attachToApplicationTargetGroup": {
        "allows network mode of task definition to be other than none"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', { networkMode: ecs.NetworkMode.AWS_VPC });
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
            });
            container.addPortMappings({ containerPort: 8000 });
            const service = new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition
            });
            const lb = new elbv2.ApplicationLoadBalancer(stack, "lb", { vpc });
            const listener = lb.addListener("listener", { port: 80 });
            const targetGroup = listener.addTargets("target", {
                port: 80,
            });
            // THEN
            service.attachToApplicationTargetGroup(targetGroup);
            test.done();
        },
        "throws when network mode of task definition is none"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', { networkMode: ecs.NetworkMode.NONE });
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
            });
            container.addPortMappings({ containerPort: 8000 });
            const service = new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition
            });
            const lb = new elbv2.ApplicationLoadBalancer(stack, "lb", { vpc });
            const listener = lb.addListener("listener", { port: 80 });
            const targetGroup = listener.addTargets("target", {
                port: 80,
            });
            // THEN
            test.throws(() => {
                service.attachToApplicationTargetGroup(targetGroup);
            }, /Cannot use a load balancer if NetworkMode is None. Use Bridge, Host or AwsVpc instead./);
            test.done();
        }
    },
    "attachToNetworkTargetGroup": {
        "allows network mode of task definition to be other than none"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', { networkMode: ecs.NetworkMode.AWS_VPC });
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
            });
            container.addPortMappings({ containerPort: 8000 });
            const service = new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition
            });
            const lb = new elbv2.NetworkLoadBalancer(stack, "lb", { vpc });
            const listener = lb.addListener("listener", { port: 80 });
            const targetGroup = listener.addTargets("target", {
                port: 80,
            });
            // THEN
            service.attachToNetworkTargetGroup(targetGroup);
            test.done();
        },
        "throws when network mode of task definition is none"(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', { networkMode: ecs.NetworkMode.NONE });
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
            });
            container.addPortMappings({ containerPort: 8000 });
            const service = new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition
            });
            const lb = new elbv2.NetworkLoadBalancer(stack, "lb", { vpc });
            const listener = lb.addListener("listener", { port: 80 });
            const targetGroup = listener.addTargets("target", {
                port: 80,
            });
            // THEN
            test.throws(() => {
                service.attachToNetworkTargetGroup(targetGroup);
            }, /Cannot use a load balancer if NetworkMode is None. Use Bridge, Host or AwsVpc instead./);
            test.done();
        }
    },
    'classic ELB': {
        'can attach to classic ELB'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'VPC');
            const cluster = new ecs.Cluster(stack, 'Cluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TD', { networkMode: ecs.NetworkMode.HOST });
            const container = taskDefinition.addContainer('web', {
                image: ecs.ContainerImage.fromRegistry('test'),
                memoryLimitMiB: 1024,
            });
            container.addPortMappings({ containerPort: 808 });
            const service = new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition
            });
            // WHEN
            const lb = new elb.LoadBalancer(stack, 'LB', { vpc });
            lb.addTarget(service);
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource('AWS::ECS::Service', {
                LoadBalancers: [
                    {
                        ContainerName: "web",
                        ContainerPort: 808,
                        LoadBalancerName: { Ref: "LB8A12904C" }
                    }
                ]
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::ECS::Service', {
                // if any load balancer is configured and healthCheckGracePeriodSeconds is not
                // set, then it should default to 60 seconds.
                HealthCheckGracePeriodSeconds: 60
            }));
            test.done();
        }
    },
    'When enabling service discovery': {
        'throws if namespace has not been added to cluster'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            // default network mode is bridge
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
                memoryLimitMiB: 512
            });
            container.addPortMappings({ containerPort: 8000 });
            // THEN
            test.throws(() => {
                new ecs.Ec2Service(stack, 'Service', {
                    cluster,
                    taskDefinition,
                    cloudMapOptions: {
                        name: 'myApp',
                    }
                });
            }, /Cannot enable service discovery if a Cloudmap Namespace has not been created in the cluster./);
            test.done();
        },
        'throws if network mode is none'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                networkMode: lib_1.NetworkMode.NONE
            });
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
                memoryLimitMiB: 512
            });
            container.addPortMappings({ containerPort: 8000 });
            cluster.addDefaultCloudMapNamespace({ name: 'foo.com' });
            // THEN
            test.throws(() => {
                new ecs.Ec2Service(stack, 'Service', {
                    cluster,
                    taskDefinition,
                    cloudMapOptions: {
                        name: 'myApp',
                    }
                });
            }, /Cannot use a service discovery if NetworkMode is None. Use Bridge, Host or AwsVpc instead./);
            test.done();
        },
        'creates AWS Cloud Map service for Private DNS namespace with bridge network mode'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            // default network mode is bridge
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
                memoryLimitMiB: 512
            });
            container.addPortMappings({ containerPort: 8000 });
            // WHEN
            cluster.addDefaultCloudMapNamespace({
                name: 'foo.com',
                type: cloudmap.NamespaceType.DNS_PRIVATE
            });
            new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition,
                cloudMapOptions: {
                    name: 'myApp',
                }
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                ServiceRegistries: [
                    {
                        ContainerName: "MainContainer",
                        ContainerPort: 8000,
                        RegistryArn: {
                            "Fn::GetAtt": [
                                "ServiceCloudmapService046058A4",
                                "Arn"
                            ]
                        }
                    }
                ]
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::ServiceDiscovery::Service', {
                DnsConfig: {
                    DnsRecords: [
                        {
                            TTL: 60,
                            Type: "SRV"
                        }
                    ],
                    NamespaceId: {
                        'Fn::GetAtt': [
                            'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                            'Id'
                        ]
                    },
                    RoutingPolicy: 'MULTIVALUE'
                },
                HealthCheckCustomConfig: {
                    FailureThreshold: 1
                },
                Name: "myApp",
                NamespaceId: {
                    'Fn::GetAtt': [
                        'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                        'Id'
                    ]
                }
            }));
            test.done();
        },
        'creates AWS Cloud Map service for Private DNS namespace with host network mode'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                networkMode: lib_1.NetworkMode.HOST
            });
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
                memoryLimitMiB: 512
            });
            container.addPortMappings({ containerPort: 8000 });
            // WHEN
            cluster.addDefaultCloudMapNamespace({
                name: 'foo.com',
                type: cloudmap.NamespaceType.DNS_PRIVATE
            });
            new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition,
                cloudMapOptions: {
                    name: 'myApp',
                }
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                ServiceRegistries: [
                    {
                        ContainerName: "MainContainer",
                        ContainerPort: 8000,
                        RegistryArn: {
                            "Fn::GetAtt": [
                                "ServiceCloudmapService046058A4",
                                "Arn"
                            ]
                        }
                    }
                ]
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::ServiceDiscovery::Service', {
                DnsConfig: {
                    DnsRecords: [
                        {
                            TTL: 60,
                            Type: "SRV"
                        }
                    ],
                    NamespaceId: {
                        'Fn::GetAtt': [
                            'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                            'Id'
                        ]
                    },
                    RoutingPolicy: 'MULTIVALUE'
                },
                HealthCheckCustomConfig: {
                    FailureThreshold: 1
                },
                Name: "myApp",
                NamespaceId: {
                    'Fn::GetAtt': [
                        'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                        'Id'
                    ]
                }
            }));
            test.done();
        },
        'throws if wrong DNS record type specified with bridge network mode'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            // default network mode is bridge
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef');
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
                memoryLimitMiB: 512
            });
            container.addPortMappings({ containerPort: 8000 });
            cluster.addDefaultCloudMapNamespace({
                name: 'foo.com',
            });
            // THEN
            test.throws(() => {
                new ecs.Ec2Service(stack, 'Service', {
                    cluster,
                    taskDefinition,
                    cloudMapOptions: {
                        name: 'myApp',
                        dnsRecordType: cloudmap.DnsRecordType.A
                    }
                });
            }, /SRV records must be used when network mode is Bridge or Host./);
            test.done();
        },
        'creates AWS Cloud Map service for Private DNS namespace with AwsVpc network mode'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                networkMode: lib_1.NetworkMode.AWS_VPC
            });
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
                memoryLimitMiB: 512
            });
            container.addPortMappings({ containerPort: 8000 });
            // WHEN
            cluster.addDefaultCloudMapNamespace({
                name: 'foo.com',
                type: cloudmap.NamespaceType.DNS_PRIVATE
            });
            new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition,
                cloudMapOptions: {
                    name: 'myApp',
                }
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                ServiceRegistries: [
                    {
                        RegistryArn: {
                            "Fn::GetAtt": [
                                "ServiceCloudmapService046058A4",
                                "Arn"
                            ]
                        }
                    }
                ]
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::ServiceDiscovery::Service', {
                DnsConfig: {
                    DnsRecords: [
                        {
                            TTL: 60,
                            Type: "A"
                        }
                    ],
                    NamespaceId: {
                        'Fn::GetAtt': [
                            'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                            'Id'
                        ]
                    },
                    RoutingPolicy: 'MULTIVALUE'
                },
                HealthCheckCustomConfig: {
                    FailureThreshold: 1
                },
                Name: "myApp",
                NamespaceId: {
                    'Fn::GetAtt': [
                        'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                        'Id'
                    ]
                }
            }));
            test.done();
        },
        'creates AWS Cloud Map service for Private DNS namespace with AwsVpc network mode with SRV records'(test) {
            // GIVEN
            const stack = new cdk.Stack();
            const vpc = new ec2.Vpc(stack, 'MyVpc', {});
            const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
            cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
            const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'Ec2TaskDef', {
                networkMode: lib_1.NetworkMode.AWS_VPC
            });
            const container = taskDefinition.addContainer('MainContainer', {
                image: lib_1.ContainerImage.fromRegistry('hello'),
                memoryLimitMiB: 512
            });
            container.addPortMappings({ containerPort: 8000 });
            // WHEN
            cluster.addDefaultCloudMapNamespace({
                name: 'foo.com',
                type: cloudmap.NamespaceType.DNS_PRIVATE
            });
            new ecs.Ec2Service(stack, 'Service', {
                cluster,
                taskDefinition,
                cloudMapOptions: {
                    name: 'myApp',
                    dnsRecordType: cloudmap.DnsRecordType.SRV
                }
            });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource("AWS::ECS::Service", {
                ServiceRegistries: [
                    {
                        ContainerName: "MainContainer",
                        ContainerPort: 8000,
                        RegistryArn: {
                            "Fn::GetAtt": [
                                "ServiceCloudmapService046058A4",
                                "Arn"
                            ]
                        }
                    }
                ]
            }));
            assert_1.expect(stack).to(assert_1.haveResource('AWS::ServiceDiscovery::Service', {
                DnsConfig: {
                    DnsRecords: [
                        {
                            TTL: 60,
                            Type: "SRV"
                        }
                    ],
                    NamespaceId: {
                        'Fn::GetAtt': [
                            'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                            'Id'
                        ]
                    },
                    RoutingPolicy: 'MULTIVALUE'
                },
                HealthCheckCustomConfig: {
                    FailureThreshold: 1
                },
                Name: "myApp",
                NamespaceId: {
                    'Fn::GetAtt': [
                        'EcsClusterDefaultServiceDiscoveryNamespaceB0971B2F',
                        'Id'
                    ]
                }
            }));
            test.done();
        },
    },
    'Metric'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const vpc = new ec2.Vpc(stack, 'MyVpc', {});
        const cluster = new ecs.Cluster(stack, 'EcsCluster', { vpc });
        cluster.addCapacity('DefaultAutoScalingGroup', { instanceType: new ec2.InstanceType('t2.micro') });
        const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'FargateTaskDef');
        taskDefinition.addContainer('Container', {
            image: ecs.ContainerImage.fromRegistry('hello')
        });
        // WHEN
        const service = new ecs.Ec2Service(stack, 'Service', {
            cluster,
            taskDefinition,
        });
        // THEN
        test.deepEqual(stack.resolve(service.metricMemoryUtilization()), {
            dimensions: {
                ClusterName: { Ref: 'EcsCluster97242B84' },
                ServiceName: { 'Fn::GetAtt': ['ServiceD69D759B', 'Name'] }
            },
            namespace: 'AWS/ECS',
            metricName: 'MemoryUtilization',
            period: cdk.Duration.minutes(5),
            statistic: 'Average'
        });
        test.deepEqual(stack.resolve(service.metricCpuUtilization()), {
            dimensions: {
                ClusterName: { Ref: 'EcsCluster97242B84' },
                ServiceName: { 'Fn::GetAtt': ['ServiceD69D759B', 'Name'] }
            },
            namespace: 'AWS/ECS',
            metricName: 'CPUUtilization',
            period: cdk.Duration.minutes(5),
            statistic: 'Average'
        });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,