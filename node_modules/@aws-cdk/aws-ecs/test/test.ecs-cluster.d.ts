import { Test } from 'nodeunit';
declare const _default: {
    "When creating an ECS Cluster": {
        "with no properties set, it correctly sets default properties"(test: Test): void;
        "with only vpc set, it correctly sets default properties"(test: Test): void;
        "multiple clusters with default capacity"(test: Test): void;
        'lifecycle hook is automatically added'(test: Test): void;
        "with capacity and cloudmap namespace properties set"(test: Test): void;
    };
    "allows specifying instance type"(test: Test): void;
    "allows specifying cluster size"(test: Test): void;
    "allows specifying special HW AMI Type"(test: Test): void;
    "errors if amazon linux given with special HW type"(test: Test): void;
    "allows specifying windows image"(test: Test): void;
    "errors if windows given with special HW type"(test: Test): void;
    "errors if windowsVersion and linux generation are set"(test: Test): void;
    "allows returning the correct image for windows for EcsOptimizedAmi"(test: Test): void;
    "allows returning the correct image for linux for EcsOptimizedAmi"(test: Test): void;
    "allows returning the correct image for linux 2 for EcsOptimizedAmi"(test: Test): void;
    "allows returning the correct image for linux for EcsOptimizedImage"(test: Test): void;
    "allows returning the correct image for linux 2 for EcsOptimizedImage"(test: Test): void;
    "allows returning the correct image for windows for EcsOptimizedImage"(test: Test): void;
    "allows specifying special HW AMI Type v2"(test: Test): void;
    "allows specifying Amazon Linux v1 AMI"(test: Test): void;
    "allows specifying windows image v2"(test: Test): void;
    "allows specifying spot fleet"(test: Test): void;
    "allows specifying drain time"(test: Test): void;
    "allows containers access to instance metadata service"(test: Test): void;
    "allows adding default service discovery namespace"(test: Test): void;
    "allows adding public service discovery namespace"(test: Test): void;
    "throws if default service discovery namespace added more than once"(test: Test): void;
    'export/import of a cluster with a namespace'(test: Test): void;
    'imported cluster with imported security groups honors allowAllOutbound'(test: Test): void;
    "Metric"(test: Test): void;
};
export = _default;
