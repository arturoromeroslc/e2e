"use strict";
const assert_1 = require("@aws-cdk/assert");
const logs = require("@aws-cdk/aws-logs");
const cdk = require("@aws-cdk/core");
const ecs = require("../lib");
let stack;
let td;
const image = ecs.ContainerImage.fromRegistry('test-image');
module.exports = {
    'setUp'(cb) {
        stack = new cdk.Stack();
        td = new ecs.FargateTaskDefinition(stack, 'TaskDefinition');
        cb();
    },
    'create an aws log driver'(test) {
        // WHEN
        td.addContainer('Container', {
            image,
            logging: new ecs.AwsLogDriver({
                datetimeFormat: 'format',
                logRetention: logs.RetentionDays.ONE_MONTH,
                multilinePattern: 'pattern',
                streamPrefix: 'hello'
            })
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Logs::LogGroup', {
            RetentionInDays: logs.RetentionDays.ONE_MONTH
        }));
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    LogConfiguration: {
                        LogDriver: 'awslogs',
                        Options: {
                            'awslogs-group': { Ref: 'TaskDefinitionContainerLogGroup4D0A87C1' },
                            'awslogs-stream-prefix': 'hello',
                            'awslogs-region': { Ref: 'AWS::Region' },
                            'awslogs-datetime-format': 'format',
                            'awslogs-multiline-pattern': 'pattern'
                        }
                    }
                }
            ]
        }));
        test.done();
    },
    "create an aws log driver using awsLogs"(test) {
        // WHEN
        td.addContainer('Container', {
            image,
            logging: ecs.AwsLogDriver.awsLogs({
                datetimeFormat: 'format',
                logRetention: logs.RetentionDays.ONE_MONTH,
                multilinePattern: 'pattern',
                streamPrefix: 'hello'
            })
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Logs::LogGroup', {
            RetentionInDays: logs.RetentionDays.ONE_MONTH
        }));
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    LogConfiguration: {
                        LogDriver: 'awslogs',
                        Options: {
                            'awslogs-group': { Ref: 'TaskDefinitionContainerLogGroup4D0A87C1' },
                            'awslogs-stream-prefix': 'hello',
                            'awslogs-region': { Ref: 'AWS::Region' },
                            'awslogs-datetime-format': 'format',
                            'awslogs-multiline-pattern': 'pattern'
                        }
                    }
                }
            ]
        }));
        test.done();
    },
    'with a defined log group'(test) {
        // GIVEN
        const logGroup = new logs.LogGroup(stack, 'LogGroup');
        // WHEN
        td.addContainer('Container', {
            image,
            logging: new ecs.AwsLogDriver({
                logGroup,
                streamPrefix: 'hello'
            })
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Logs::LogGroup', {
            RetentionInDays: logs.RetentionDays.TWO_YEARS
        }));
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::ECS::TaskDefinition', {
            ContainerDefinitions: [
                {
                    LogConfiguration: {
                        LogDriver: 'awslogs',
                        Options: {
                            'awslogs-group': { Ref: 'LogGroupF5B46931' },
                            'awslogs-stream-prefix': 'hello',
                            'awslogs-region': { Ref: 'AWS::Region' }
                        }
                    }
                }
            ]
        }));
        test.done();
    },
    'without a defined log group'(test) {
        // GIVEN
        td.addContainer('Container', {
            image,
            logging: new ecs.AwsLogDriver({
                streamPrefix: 'hello',
            })
        });
        // THEN
        assert_1.expect(stack).notTo(assert_1.haveResource('AWS::Logs::LogGroup', {}));
        test.done();
    },
    'throws when specifying log retention and log group'(test) {
        // GIVEN
        const logGroup = new logs.LogGroup(stack, 'LogGroup');
        // THEN
        test.throws(() => new ecs.AwsLogDriver({
            logGroup,
            logRetention: logs.RetentionDays.FIVE_DAYS,
            streamPrefix: 'hello'
        }), /`logGroup`.*`logRetentionDays`/);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,