"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const events = require("@aws-cdk/aws-events");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/core");
const targets = require("../../lib");
test('use lambda as an event rule target', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const fn = newTestLambda(stack);
    const rule1 = new events.Rule(stack, 'Rule', {
        schedule: events.Schedule.rate(cdk.Duration.minutes(1)),
    });
    const rule2 = new events.Rule(stack, 'Rule2', {
        schedule: events.Schedule.rate(cdk.Duration.minutes(5)),
    });
    // WHEN
    rule1.addTarget(new targets.LambdaFunction(fn));
    rule2.addTarget(new targets.LambdaFunction(fn));
    // THEN
    const lambdaId = "MyLambdaCCE802FB";
    assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Permission', {
        Action: "lambda:InvokeFunction",
        FunctionName: {
            "Fn::GetAtt": [
                lambdaId,
                "Arn"
            ]
        },
        Principal: "events.amazonaws.com",
        SourceArn: { "Fn::GetAtt": ["Rule4C995B7F", "Arn"] }
    }));
    assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Permission', {
        Action: "lambda:InvokeFunction",
        FunctionName: {
            "Fn::GetAtt": [
                lambdaId,
                "Arn"
            ]
        },
        Principal: "events.amazonaws.com",
        SourceArn: { "Fn::GetAtt": ["Rule270732244", "Arn"] }
    }));
    assert_1.expect(stack).to(assert_1.countResources('AWS::Events::Rule', 2));
    assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
        Targets: [
            {
                Arn: { "Fn::GetAtt": [lambdaId, "Arn"] },
                Id: "Target0"
            }
        ]
    }));
});
test('adding same lambda function as target mutiple times creates permission only once', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const fn = newTestLambda(stack);
    const rule = new events.Rule(stack, 'Rule', {
        schedule: events.Schedule.rate(cdk.Duration.minutes(1)),
    });
    // WHEN
    rule.addTarget(new targets.LambdaFunction(fn, {
        event: events.RuleTargetInput.fromObject({ key: 'value1' })
    }));
    rule.addTarget(new targets.LambdaFunction(fn, {
        event: events.RuleTargetInput.fromObject({ key: 'value2' })
    }));
    // THEN
    assert_1.expect(stack).to(assert_1.countResources('AWS::Lambda::Permission', 1));
});
test('adding same singleton lambda function as target mutiple times creates permission only once', () => {
    // GIVEN
    const stack = new cdk.Stack();
    const fn = new lambda.SingletonFunction(stack, 'MyLambda', {
        code: new lambda.InlineCode('foo'),
        handler: 'bar',
        runtime: lambda.Runtime.PYTHON_2_7,
        uuid: 'uuid'
    });
    const rule = new events.Rule(stack, 'Rule', {
        schedule: events.Schedule.rate(cdk.Duration.minutes(1)),
    });
    // WHEN
    rule.addTarget(new targets.LambdaFunction(fn, {
        event: events.RuleTargetInput.fromObject({ key: 'value1' })
    }));
    rule.addTarget(new targets.LambdaFunction(fn, {
        event: events.RuleTargetInput.fromObject({ key: 'value2' })
    }));
    // THEN
    assert_1.expect(stack).to(assert_1.countResources('AWS::Lambda::Permission', 1));
});
function newTestLambda(scope) {
    return new lambda.Function(scope, 'MyLambda', {
        code: new lambda.InlineCode('foo'),
        handler: 'bar',
        runtime: lambda.Runtime.PYTHON_2_7
    });
}
//# sourceMappingURL=data:application/json;base64,