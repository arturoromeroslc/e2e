"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk-mock");
const aws_api_handler_1 = require("../../lib/aws-api-handler");
console.log = jest.fn();
const event = {
    service: 'ECS',
    action: 'updateService',
    parameters: {
        service: 'cool-service',
        forceNewDeployment: true,
    },
};
beforeEach(() => {
    AWS.restore();
});
test('calls the SDK with the right parameters', async () => {
    const updateServiceMock = jest.fn().mockResolvedValue({ success: true });
    AWS.mock('ECS', 'updateService', updateServiceMock);
    await aws_api_handler_1.handler(event);
    expect(updateServiceMock).toHaveBeenCalledWith({
        service: 'cool-service',
        forceNewDeployment: true
    }, expect.any(Function));
    expect(console.log).toHaveBeenLastCalledWith('Response: %j', {
        success: true
    });
});
test('throws and logs in case of error', async () => {
    const updateServiceMock = jest.fn().mockRejectedValue({ code: 'Error' });
    AWS.mock('ECS', 'updateService', updateServiceMock);
    await expect(aws_api_handler_1.handler(event)).rejects.toEqual({ code: 'Error' });
    expect(console.log).toHaveBeenLastCalledWith({ code: 'Error' });
});
test('catches and logs error', async () => {
    const catchEvent = {
        ...event,
        catchErrorPattern: 'Invalid'
    };
    const updateServiceMock = jest.fn().mockRejectedValue({ code: 'Invalid' });
    AWS.mock('ECS', 'updateService', updateServiceMock);
    await aws_api_handler_1.handler(catchEvent);
    expect(console.log).toHaveBeenLastCalledWith({ code: 'Invalid' });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLWFwaS1oYW5kbGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhd3MtYXBpLWhhbmRsZXIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLG9DQUFxQztBQUVyQywrREFBb0Q7QUFFcEQsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFFeEIsTUFBTSxLQUFLLEdBQWdCO0lBQ3pCLE9BQU8sRUFBRSxLQUFLO0lBQ2QsTUFBTSxFQUFFLGVBQWU7SUFDdkIsVUFBVSxFQUFFO1FBQ1YsT0FBTyxFQUFFLGNBQWM7UUFDdkIsa0JBQWtCLEVBQUUsSUFBSTtLQUNPO0NBQ2xDLENBQUM7QUFFRixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHlDQUF5QyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3pELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFekUsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFFcEQsTUFBTSx5QkFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXJCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO1FBQzdDLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLGtCQUFrQixFQUFFLElBQUk7S0FDekIsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFFekIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxjQUFjLEVBQUU7UUFDM0QsT0FBTyxFQUFFLElBQUk7S0FDZCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNsRCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBRXpFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXBELE1BQU0sTUFBTSxDQUFDLHlCQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFFaEUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBQ2pFLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHdCQUF3QixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3hDLE1BQU0sVUFBVSxHQUFnQjtRQUMvQixHQUFHLEtBQUs7UUFDUCxpQkFBaUIsRUFBRSxTQUFTO0tBQzdCLENBQUM7SUFFRixNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBRTNFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBRXBELE1BQU0seUJBQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUUxQixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTpuby1jb25zb2xlXG5pbXBvcnQgU0RLID0gcmVxdWlyZSgnYXdzLXNkaycpO1xuaW1wb3J0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGstbW9jaycpO1xuaW1wb3J0IHsgQXdzQXBpUHJvcHMgfSBmcm9tICcuLi8uLi9saWInO1xuaW1wb3J0IHsgaGFuZGxlciB9IGZyb20gJy4uLy4uL2xpYi9hd3MtYXBpLWhhbmRsZXInO1xuXG5jb25zb2xlLmxvZyA9IGplc3QuZm4oKTtcblxuY29uc3QgZXZlbnQ6IEF3c0FwaVByb3BzID0ge1xuICBzZXJ2aWNlOiAnRUNTJyxcbiAgYWN0aW9uOiAndXBkYXRlU2VydmljZScsXG4gIHBhcmFtZXRlcnM6IHtcbiAgICBzZXJ2aWNlOiAnY29vbC1zZXJ2aWNlJyxcbiAgICBmb3JjZU5ld0RlcGxveW1lbnQ6IHRydWUsXG4gIH0gYXMgU0RLLkVDUy5VcGRhdGVTZXJ2aWNlUmVxdWVzdCxcbn07XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBBV1MucmVzdG9yZSgpO1xufSk7XG5cbnRlc3QoJ2NhbGxzIHRoZSBTREsgd2l0aCB0aGUgcmlnaHQgcGFyYW1ldGVycycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgdXBkYXRlU2VydmljZU1vY2sgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBzdWNjZXNzOiB0cnVlIH0pO1xuXG4gIEFXUy5tb2NrKCdFQ1MnLCAndXBkYXRlU2VydmljZScsIHVwZGF0ZVNlcnZpY2VNb2NrKTtcblxuICBhd2FpdCBoYW5kbGVyKGV2ZW50KTtcblxuICBleHBlY3QodXBkYXRlU2VydmljZU1vY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICBzZXJ2aWNlOiAnY29vbC1zZXJ2aWNlJyxcbiAgICBmb3JjZU5ld0RlcGxveW1lbnQ6IHRydWVcbiAgfSwgZXhwZWN0LmFueShGdW5jdGlvbikpO1xuXG4gIGV4cGVjdChjb25zb2xlLmxvZykudG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoKCdSZXNwb25zZTogJWonLCB7XG4gICAgc3VjY2VzczogdHJ1ZVxuICB9KTtcbn0pO1xuXG50ZXN0KCd0aHJvd3MgYW5kIGxvZ3MgaW4gY2FzZSBvZiBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgdXBkYXRlU2VydmljZU1vY2sgPSBqZXN0LmZuKCkubW9ja1JlamVjdGVkVmFsdWUoeyBjb2RlOiAnRXJyb3InIH0pO1xuXG4gIEFXUy5tb2NrKCdFQ1MnLCAndXBkYXRlU2VydmljZScsIHVwZGF0ZVNlcnZpY2VNb2NrKTtcblxuICBhd2FpdCBleHBlY3QoaGFuZGxlcihldmVudCkpLnJlamVjdHMudG9FcXVhbCh7IGNvZGU6ICdFcnJvcicgfSk7XG5cbiAgZXhwZWN0KGNvbnNvbGUubG9nKS50b0hhdmVCZWVuTGFzdENhbGxlZFdpdGgoeyBjb2RlOiAnRXJyb3InfSk7XG59KTtcblxudGVzdCgnY2F0Y2hlcyBhbmQgbG9ncyBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgY2F0Y2hFdmVudDogQXdzQXBpUHJvcHMgPSB7XG4gICAuLi5ldmVudCxcbiAgICBjYXRjaEVycm9yUGF0dGVybjogJ0ludmFsaWQnXG4gIH07XG5cbiAgY29uc3QgdXBkYXRlU2VydmljZU1vY2sgPSBqZXN0LmZuKCkubW9ja1JlamVjdGVkVmFsdWUoeyBjb2RlOiAnSW52YWxpZCcgfSk7XG5cbiAgQVdTLm1vY2soJ0VDUycsICd1cGRhdGVTZXJ2aWNlJywgdXBkYXRlU2VydmljZU1vY2spO1xuXG4gIGF3YWl0IGhhbmRsZXIoY2F0Y2hFdmVudCk7XG5cbiAgZXhwZWN0KGNvbnNvbGUubG9nKS50b0hhdmVCZWVuTGFzdENhbGxlZFdpdGgoeyBjb2RlOiAnSW52YWxpZCd9KTtcbn0pO1xuIl19