"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const events = require("@aws-cdk/aws-events");
const core_1 = require("@aws-cdk/core");
const targets = require("../../lib");
test('use AwsApi as an event rule target', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const rule = new events.Rule(stack, 'Rule', {
        schedule: events.Schedule.expression('rate(15 minutes)')
    });
    // WHEN
    rule.addTarget(new targets.AwsApi({
        service: 'ECS',
        action: 'updateService',
        parameters: {
            service: 'cool-service',
            forceNewDeployment: true
        },
        apiVersion: '2019-01-01',
        catchErrorPattern: 'error'
    }));
    rule.addTarget(new targets.AwsApi({
        service: 'RDS',
        action: 'createDBSnapshot',
        parameters: {
            DBInstanceIdentifier: 'cool-instance'
        },
    }));
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
        Targets: [
            {
                Arn: {
                    "Fn::GetAtt": [
                        "AWSb4cf1abd4e4f4bc699441af7ccd9ec371511E620",
                        "Arn"
                    ]
                },
                Id: "Target0",
                Input: JSON.stringify({
                    service: 'ECS',
                    action: 'updateService',
                    parameters: {
                        service: 'cool-service',
                        forceNewDeployment: true
                    },
                    apiVersion: '2019-01-01',
                    catchErrorPattern: 'error'
                })
            },
            {
                Arn: {
                    "Fn::GetAtt": [
                        "AWSb4cf1abd4e4f4bc699441af7ccd9ec371511E620",
                        "Arn"
                    ]
                },
                Id: "Target1",
                Input: JSON.stringify({
                    service: 'RDS',
                    action: 'createDBSnapshot',
                    parameters: {
                        DBInstanceIdentifier: 'cool-instance'
                    },
                })
            }
        ]
    }));
    // Uses a singleton function
    assert_1.expect(stack).to(assert_1.countResources('AWS::Lambda::Function', 1));
    assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: "ecs:UpdateService",
                    Effect: "Allow",
                    Resource: "*"
                },
                {
                    Action: "rds:CreateDBSnapshot",
                    Effect: "Allow",
                    Resource: "*"
                }
            ],
            Version: "2012-10-17"
        }
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLWFwaS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXdzLWFwaS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNENBQXVFO0FBQ3ZFLDhDQUErQztBQUMvQyx3Q0FBc0M7QUFDdEMscUNBQXNDO0FBRXRDLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7SUFDOUMsUUFBUTtJQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7SUFDMUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7UUFDMUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDO0tBQ3pELENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNoQyxPQUFPLEVBQUUsS0FBSztRQUNkLE1BQU0sRUFBRSxlQUFlO1FBQ3ZCLFVBQVUsRUFBRTtZQUNWLE9BQU8sRUFBRSxjQUFjO1lBQ3ZCLGtCQUFrQixFQUFFLElBQUk7U0FDTztRQUNqQyxVQUFVLEVBQUUsWUFBWTtRQUN4QixpQkFBaUIsRUFBRSxPQUFPO0tBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRUosSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDaEMsT0FBTyxFQUFFLEtBQUs7UUFDZCxNQUFNLEVBQUUsa0JBQWtCO1FBQzFCLFVBQVUsRUFBRTtZQUNWLG9CQUFvQixFQUFFLGVBQWU7U0FDSDtLQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVKLE9BQU87SUFDUCxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsbUJBQW1CLEVBQUU7UUFDakQsT0FBTyxFQUFFO1lBQ1A7Z0JBQ0UsR0FBRyxFQUFFO29CQUNILFlBQVksRUFBRTt3QkFDWiw2Q0FBNkM7d0JBQzdDLEtBQUs7cUJBQ047aUJBQ0Y7Z0JBQ0QsRUFBRSxFQUFFLFNBQVM7Z0JBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQ3BCLE9BQU8sRUFBRSxLQUFLO29CQUNkLE1BQU0sRUFBRSxlQUFlO29CQUN2QixVQUFVLEVBQUU7d0JBQ1YsT0FBTyxFQUFFLGNBQWM7d0JBQ3ZCLGtCQUFrQixFQUFFLElBQUk7cUJBQ3pCO29CQUNELFVBQVUsRUFBRSxZQUFZO29CQUN4QixpQkFBaUIsRUFBRSxPQUFPO2lCQUMzQixDQUFDO2FBQ0g7WUFDRDtnQkFDRSxHQUFHLEVBQUU7b0JBQ0gsWUFBWSxFQUFFO3dCQUNaLDZDQUE2Qzt3QkFDN0MsS0FBSztxQkFDTjtpQkFDRjtnQkFDRCxFQUFFLEVBQUUsU0FBUztnQkFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDcEIsT0FBTyxFQUFFLEtBQUs7b0JBQ2QsTUFBTSxFQUFFLGtCQUFrQjtvQkFDMUIsVUFBVSxFQUFFO3dCQUNWLG9CQUFvQixFQUFFLGVBQWU7cUJBQ3RDO2lCQUNGLENBQUM7YUFDSDtTQUNGO0tBQ0YsQ0FBQyxDQUFDLENBQUM7SUFFSiw0QkFBNEI7SUFDNUIsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyx1QkFBYyxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFN0QsZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLGtCQUFrQixFQUFFO1FBQ2hELGNBQWMsRUFBRTtZQUNkLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxNQUFNLEVBQUUsbUJBQW1CO29CQUMzQixNQUFNLEVBQUUsT0FBTztvQkFDZixRQUFRLEVBQUUsR0FBRztpQkFDZDtnQkFDRDtvQkFDRSxNQUFNLEVBQUUsc0JBQXNCO29CQUM5QixNQUFNLEVBQUUsT0FBTztvQkFDZixRQUFRLEVBQUUsR0FBRztpQkFDZDthQUNGO1lBQ0QsT0FBTyxFQUFFLFlBQVk7U0FDdEI7S0FDRixDQUFDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY291bnRSZXNvdXJjZXMsIGV4cGVjdCwgaGF2ZVJlc291cmNlIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCBldmVudHMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtZXZlbnRzJyk7XG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHRhcmdldHMgPSByZXF1aXJlKCcuLi8uLi9saWInKTtcblxudGVzdCgndXNlIEF3c0FwaSBhcyBhbiBldmVudCBydWxlIHRhcmdldCcsICgpID0+IHtcbiAgLy8gR0lWRU5cbiAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgY29uc3QgcnVsZSA9IG5ldyBldmVudHMuUnVsZShzdGFjaywgJ1J1bGUnLCB7XG4gICAgc2NoZWR1bGU6IGV2ZW50cy5TY2hlZHVsZS5leHByZXNzaW9uKCdyYXRlKDE1IG1pbnV0ZXMpJylcbiAgfSk7XG5cbiAgLy8gV0hFTlxuICBydWxlLmFkZFRhcmdldChuZXcgdGFyZ2V0cy5Bd3NBcGkoe1xuICAgIHNlcnZpY2U6ICdFQ1MnLFxuICAgIGFjdGlvbjogJ3VwZGF0ZVNlcnZpY2UnLFxuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgIHNlcnZpY2U6ICdjb29sLXNlcnZpY2UnLFxuICAgICAgZm9yY2VOZXdEZXBsb3ltZW50OiB0cnVlXG4gICAgfSBhcyBBV1MuRUNTLlVwZGF0ZVNlcnZpY2VSZXF1ZXN0LFxuICAgIGFwaVZlcnNpb246ICcyMDE5LTAxLTAxJyxcbiAgICBjYXRjaEVycm9yUGF0dGVybjogJ2Vycm9yJ1xuICB9KSk7XG5cbiAgcnVsZS5hZGRUYXJnZXQobmV3IHRhcmdldHMuQXdzQXBpKHtcbiAgICBzZXJ2aWNlOiAnUkRTJyxcbiAgICBhY3Rpb246ICdjcmVhdGVEQlNuYXBzaG90JyxcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICBEQkluc3RhbmNlSWRlbnRpZmllcjogJ2Nvb2wtaW5zdGFuY2UnXG4gICAgfSBhcyBBV1MuUkRTLkNyZWF0ZURCU25hcHNob3RNZXNzYWdlLFxuICB9KSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpFdmVudHM6OlJ1bGUnLCB7XG4gICAgVGFyZ2V0czogW1xuICAgICAge1xuICAgICAgICBBcm46IHtcbiAgICAgICAgICBcIkZuOjpHZXRBdHRcIjogW1xuICAgICAgICAgICAgXCJBV1NiNGNmMWFiZDRlNGY0YmM2OTk0NDFhZjdjY2Q5ZWMzNzE1MTFFNjIwXCIsXG4gICAgICAgICAgICBcIkFyblwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBJZDogXCJUYXJnZXQwXCIsXG4gICAgICAgIElucHV0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgc2VydmljZTogJ0VDUycsXG4gICAgICAgICAgYWN0aW9uOiAndXBkYXRlU2VydmljZScsXG4gICAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgICAgc2VydmljZTogJ2Nvb2wtc2VydmljZScsXG4gICAgICAgICAgICBmb3JjZU5ld0RlcGxveW1lbnQ6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFwaVZlcnNpb246ICcyMDE5LTAxLTAxJyxcbiAgICAgICAgICBjYXRjaEVycm9yUGF0dGVybjogJ2Vycm9yJ1xuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgQXJuOiB7XG4gICAgICAgICAgXCJGbjo6R2V0QXR0XCI6IFtcbiAgICAgICAgICAgIFwiQVdTYjRjZjFhYmQ0ZTRmNGJjNjk5NDQxYWY3Y2NkOWVjMzcxNTExRTYyMFwiLFxuICAgICAgICAgICAgXCJBcm5cIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgSWQ6IFwiVGFyZ2V0MVwiLFxuICAgICAgICBJbnB1dDogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHNlcnZpY2U6ICdSRFMnLFxuICAgICAgICAgIGFjdGlvbjogJ2NyZWF0ZURCU25hcHNob3QnLFxuICAgICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgIERCSW5zdGFuY2VJZGVudGlmaWVyOiAnY29vbC1pbnN0YW5jZSdcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIF1cbiAgfSkpO1xuXG4gIC8vIFVzZXMgYSBzaW5nbGV0b24gZnVuY3Rpb25cbiAgZXhwZWN0KHN0YWNrKS50byhjb3VudFJlc291cmNlcygnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJywgMSkpO1xuXG4gIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OklBTTo6UG9saWN5Jywge1xuICAgIFBvbGljeURvY3VtZW50OiB7XG4gICAgICBTdGF0ZW1lbnQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIEFjdGlvbjogXCJlY3M6VXBkYXRlU2VydmljZVwiLFxuICAgICAgICAgIEVmZmVjdDogXCJBbGxvd1wiLFxuICAgICAgICAgIFJlc291cmNlOiBcIipcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgQWN0aW9uOiBcInJkczpDcmVhdGVEQlNuYXBzaG90XCIsXG4gICAgICAgICAgRWZmZWN0OiBcIkFsbG93XCIsXG4gICAgICAgICAgUmVzb3VyY2U6IFwiKlwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBWZXJzaW9uOiBcIjIwMTItMTAtMTdcIlxuICAgIH1cbiAgfSkpO1xufSk7XG4iXX0=