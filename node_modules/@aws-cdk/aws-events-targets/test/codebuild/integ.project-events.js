#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codebuild = require("@aws-cdk/aws-codebuild");
const codecommit = require("@aws-cdk/aws-codecommit");
const events = require("@aws-cdk/aws-events");
const sns = require("@aws-cdk/aws-sns");
const subs = require("@aws-cdk/aws-sns-subscriptions");
const sqs = require("@aws-cdk/aws-sqs");
const cdk = require("@aws-cdk/core");
const targets = require("../../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-codebuild-events');
const repo = new codecommit.Repository(stack, 'MyRepo', {
    repositoryName: 'aws-cdk-codebuild-events',
});
const project = new codebuild.Project(stack, 'MyProject', {
    source: codebuild.Source.codeCommit({ repository: repo }),
});
const queue = new sqs.Queue(stack, 'MyQueue');
const topic = new sns.Topic(stack, 'MyTopic');
topic.addSubscription(new subs.SqsSubscription(queue));
// this will send an email with the JSON event for every state change of this
// build project.
project.onStateChange('StateChange', { target: new targets.SnsTopic(topic) });
// this will send an email with the message "Build phase changed to <phase>".
// The phase will be extracted from the "completed-phase" field of the event
// details.
project.onPhaseChange('PhaseChange', {
    target: new targets.SnsTopic(topic, {
        message: events.RuleTargetInput.fromText(`Build phase changed to ${codebuild.PhaseChangeEvent.completedPhase}`)
    })
});
// trigger a build when a commit is pushed to the repo
const onCommitRule = repo.onCommit('OnCommit', {
    target: new targets.CodeBuildProject(project),
    branches: ['master']
});
onCommitRule.addTarget(new targets.SnsTopic(topic, {
    message: events.RuleTargetInput.fromText(`A commit was pushed to the repository ${codecommit.ReferenceEvent.repositoryName} on branch ${codecommit.ReferenceEvent.referenceName}`)
}));
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucHJvamVjdC1ldmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5wcm9qZWN0LWV2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxvREFBcUQ7QUFDckQsc0RBQXVEO0FBQ3ZELDhDQUErQztBQUMvQyx3Q0FBeUM7QUFDekMsdURBQXdEO0FBQ3hELHdDQUF5QztBQUN6QyxxQ0FBc0M7QUFDdEMscUNBQXNDO0FBRXRDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztBQUU3RCxNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtJQUN0RCxjQUFjLEVBQUUsMEJBQTBCO0NBQzNDLENBQUMsQ0FBQztBQUNILE1BQU0sT0FBTyxHQUFHLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFO0lBQ3hELE1BQU0sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztDQUMxRCxDQUFDLENBQUM7QUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBRTlDLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDOUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUV2RCw2RUFBNkU7QUFDN0UsaUJBQWlCO0FBQ2pCLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFOUUsNkVBQTZFO0FBQzdFLDRFQUE0RTtBQUM1RSxXQUFXO0FBQ1gsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUU7SUFDbkMsTUFBTSxFQUFFLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7UUFDbEMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLDBCQUEwQixTQUFTLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLENBQUM7S0FDaEgsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVILHNEQUFzRDtBQUN0RCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRTtJQUM3QyxNQUFNLEVBQUUsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO0lBQzdDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztDQUNyQixDQUFDLENBQUM7QUFFSCxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7SUFDakQsT0FBTyxFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUN0Qyx5Q0FBeUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxjQUFjLGNBQWMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FDekk7Q0FDRixDQUFDLENBQUMsQ0FBQztBQUVKLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCBjb2RlYnVpbGQgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY29kZWJ1aWxkJyk7XG5pbXBvcnQgY29kZWNvbW1pdCA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1jb2RlY29tbWl0Jyk7XG5pbXBvcnQgZXZlbnRzID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWV2ZW50cycpO1xuaW1wb3J0IHNucyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zbnMnKTtcbmltcG9ydCBzdWJzID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXNucy1zdWJzY3JpcHRpb25zJyk7XG5pbXBvcnQgc3FzID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXNxcycpO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NvcmUnKTtcbmltcG9ydCB0YXJnZXRzID0gcmVxdWlyZSgnLi4vLi4vbGliJyk7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLWNvZGVidWlsZC1ldmVudHMnKTtcblxuY29uc3QgcmVwbyA9IG5ldyBjb2RlY29tbWl0LlJlcG9zaXRvcnkoc3RhY2ssICdNeVJlcG8nLCB7XG4gIHJlcG9zaXRvcnlOYW1lOiAnYXdzLWNkay1jb2RlYnVpbGQtZXZlbnRzJyxcbn0pO1xuY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcsIHtcbiAgc291cmNlOiBjb2RlYnVpbGQuU291cmNlLmNvZGVDb21taXQoeyByZXBvc2l0b3J5OiByZXBvIH0pLFxufSk7XG5cbmNvbnN0IHF1ZXVlID0gbmV3IHNxcy5RdWV1ZShzdGFjaywgJ015UXVldWUnKTtcblxuY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnTXlUb3BpYycpO1xudG9waWMuYWRkU3Vic2NyaXB0aW9uKG5ldyBzdWJzLlNxc1N1YnNjcmlwdGlvbihxdWV1ZSkpO1xuXG4vLyB0aGlzIHdpbGwgc2VuZCBhbiBlbWFpbCB3aXRoIHRoZSBKU09OIGV2ZW50IGZvciBldmVyeSBzdGF0ZSBjaGFuZ2Ugb2YgdGhpc1xuLy8gYnVpbGQgcHJvamVjdC5cbnByb2plY3Qub25TdGF0ZUNoYW5nZSgnU3RhdGVDaGFuZ2UnLCB7IHRhcmdldDogbmV3IHRhcmdldHMuU25zVG9waWModG9waWMpIH0pO1xuXG4vLyB0aGlzIHdpbGwgc2VuZCBhbiBlbWFpbCB3aXRoIHRoZSBtZXNzYWdlIFwiQnVpbGQgcGhhc2UgY2hhbmdlZCB0byA8cGhhc2U+XCIuXG4vLyBUaGUgcGhhc2Ugd2lsbCBiZSBleHRyYWN0ZWQgZnJvbSB0aGUgXCJjb21wbGV0ZWQtcGhhc2VcIiBmaWVsZCBvZiB0aGUgZXZlbnRcbi8vIGRldGFpbHMuXG5wcm9qZWN0Lm9uUGhhc2VDaGFuZ2UoJ1BoYXNlQ2hhbmdlJywge1xuICB0YXJnZXQ6IG5ldyB0YXJnZXRzLlNuc1RvcGljKHRvcGljLCB7XG4gICAgbWVzc2FnZTogZXZlbnRzLlJ1bGVUYXJnZXRJbnB1dC5mcm9tVGV4dChgQnVpbGQgcGhhc2UgY2hhbmdlZCB0byAke2NvZGVidWlsZC5QaGFzZUNoYW5nZUV2ZW50LmNvbXBsZXRlZFBoYXNlfWApXG4gIH0pXG59KTtcblxuLy8gdHJpZ2dlciBhIGJ1aWxkIHdoZW4gYSBjb21taXQgaXMgcHVzaGVkIHRvIHRoZSByZXBvXG5jb25zdCBvbkNvbW1pdFJ1bGUgPSByZXBvLm9uQ29tbWl0KCdPbkNvbW1pdCcsIHtcbiAgdGFyZ2V0OiBuZXcgdGFyZ2V0cy5Db2RlQnVpbGRQcm9qZWN0KHByb2plY3QpLFxuICBicmFuY2hlczogWydtYXN0ZXInXVxufSk7XG5cbm9uQ29tbWl0UnVsZS5hZGRUYXJnZXQobmV3IHRhcmdldHMuU25zVG9waWModG9waWMsIHtcbiAgbWVzc2FnZTogZXZlbnRzLlJ1bGVUYXJnZXRJbnB1dC5mcm9tVGV4dChcbiAgICBgQSBjb21taXQgd2FzIHB1c2hlZCB0byB0aGUgcmVwb3NpdG9yeSAke2NvZGVjb21taXQuUmVmZXJlbmNlRXZlbnQucmVwb3NpdG9yeU5hbWV9IG9uIGJyYW5jaCAke2NvZGVjb21taXQuUmVmZXJlbmNlRXZlbnQucmVmZXJlbmNlTmFtZX1gXG4gIClcbn0pKTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=