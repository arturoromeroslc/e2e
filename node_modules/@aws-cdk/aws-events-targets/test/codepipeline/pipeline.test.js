"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const codepipeline = require("@aws-cdk/aws-codepipeline");
const events = require("@aws-cdk/aws-events");
const core_1 = require("@aws-cdk/core");
const targets = require("../../lib");
test('use codebuild project as an eventrule target', () => {
    // GIVEN
    const stack = new core_1.Stack();
    const pipeline = new codepipeline.Pipeline(stack, 'Pipeline');
    const srcArtifact = new codepipeline.Artifact('Src');
    const buildArtifact = new codepipeline.Artifact('Bld');
    pipeline.addStage({
        stageName: 'Source',
        actions: [new TestAction({
                actionName: 'Hello',
                category: codepipeline.ActionCategory.SOURCE,
                provider: 'x',
                artifactBounds: { minInputs: 0, maxInputs: 0, minOutputs: 1, maxOutputs: 1, },
                outputs: [srcArtifact]
            })]
    });
    pipeline.addStage({
        stageName: 'Build',
        actions: [new TestAction({
                actionName: 'Hello',
                category: codepipeline.ActionCategory.BUILD,
                provider: 'y',
                inputs: [srcArtifact],
                outputs: [buildArtifact],
                artifactBounds: { minInputs: 1, maxInputs: 1, minOutputs: 1, maxOutputs: 1, }
            })]
    });
    const rule = new events.Rule(stack, 'rule', {
        schedule: events.Schedule.expression('rate(1 minute)'),
    });
    // WHEN
    rule.addTarget(new targets.CodePipeline(pipeline));
    const pipelineArn = {
        "Fn::Join": ["", [
                "arn:",
                { Ref: "AWS::Partition" },
                ":codepipeline:",
                { Ref: "AWS::Region" },
                ":",
                { Ref: "AWS::AccountId" },
                ":",
                { Ref: "PipelineC660917D" }
            ]
        ]
    };
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::Events::Rule', {
        Targets: [
            {
                Arn: pipelineArn,
                Id: "Target0",
                RoleArn: { "Fn::GetAtt": ["PipelineEventsRole46BEEA7C", "Arn"] }
            }
        ]
    }));
    assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
        PolicyDocument: {
            Statement: [
                {
                    Action: "codepipeline:StartPipelineExecution",
                    Effect: "Allow",
                    Resource: pipelineArn,
                }
            ],
            Version: "2012-10-17"
        }
    }));
});
class TestAction {
    constructor(actionProperties) {
        this.actionProperties = actionProperties;
        // nothing to do
    }
    bind(_scope, _stage, _options) {
        return {};
    }
    onStateChange(_name, _target, _options) {
        throw new Error('onStateChange() is not available on MockAction');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBpcGVsaW5lLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBdUQ7QUFDdkQsMERBQTJEO0FBQzNELDhDQUErQztBQUMvQyx3Q0FBaUQ7QUFDakQscUNBQXNDO0FBRXRDLElBQUksQ0FBQyw4Q0FBOEMsRUFBRSxHQUFHLEVBQUU7SUFDeEQsUUFBUTtJQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxFQUFFLENBQUM7SUFDMUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUU5RCxNQUFNLFdBQVcsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckQsTUFBTSxhQUFhLEdBQUcsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDaEIsU0FBUyxFQUFFLFFBQVE7UUFDbkIsT0FBTyxFQUFFLENBQUMsSUFBSSxVQUFVLENBQUM7Z0JBQ3ZCLFVBQVUsRUFBRSxPQUFPO2dCQUNuQixRQUFRLEVBQUUsWUFBWSxDQUFDLGNBQWMsQ0FBQyxNQUFNO2dCQUM1QyxRQUFRLEVBQUUsR0FBRztnQkFDYixjQUFjLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUcsVUFBVSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxHQUFHO2dCQUM5RSxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUM7YUFBQyxDQUFDLENBQUM7S0FDNUIsQ0FBQyxDQUFDO0lBQ0gsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNoQixTQUFTLEVBQUUsT0FBTztRQUNsQixPQUFPLEVBQUUsQ0FBQyxJQUFJLFVBQVUsQ0FBQztnQkFDdkIsVUFBVSxFQUFFLE9BQU87Z0JBQ25CLFFBQVEsRUFBRSxZQUFZLENBQUMsY0FBYyxDQUFDLEtBQUs7Z0JBQzNDLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQztnQkFDckIsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDO2dCQUN4QixjQUFjLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUcsVUFBVSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxHQUFHO2FBQUMsQ0FBQyxDQUFDO0tBQ3BGLENBQUMsQ0FBQztJQUVILE1BQU0sSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO1FBQzFDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztLQUN2RCxDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUVuRCxNQUFNLFdBQVcsR0FBRztRQUNsQixVQUFVLEVBQUUsQ0FBRSxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU07Z0JBQ04sRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBQ3pCLGdCQUFnQjtnQkFDaEIsRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFO2dCQUN0QixHQUFHO2dCQUNILEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFO2dCQUN6QixHQUFHO2dCQUNILEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFO2FBQUM7U0FDN0I7S0FDRixDQUFDO0lBRUYsT0FBTztJQUNQLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxtQkFBbUIsRUFBRTtRQUNqRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxHQUFHLEVBQUUsV0FBVztnQkFDaEIsRUFBRSxFQUFFLFNBQVM7Z0JBQ2IsT0FBTyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUUsNEJBQTRCLEVBQUUsS0FBSyxDQUFFLEVBQUU7YUFDbkU7U0FDRjtLQUNGLENBQUMsQ0FBQyxDQUFDO0lBRUosZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLGtCQUFrQixFQUFFO1FBQ2hELGNBQWMsRUFBRTtZQUNkLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxNQUFNLEVBQUUscUNBQXFDO29CQUM3QyxNQUFNLEVBQUUsT0FBTztvQkFDZixRQUFRLEVBQUUsV0FBVztpQkFDdEI7YUFDRjtZQUNELE9BQU8sRUFBRSxZQUFZO1NBQ3RCO0tBQ0YsQ0FBQyxDQUFDLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVTtJQUNkLFlBQTRCLGdCQUErQztRQUEvQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQStCO1FBQ3pFLGdCQUFnQjtJQUNsQixDQUFDO0lBRU0sSUFBSSxDQUFDLE1BQWlCLEVBQUUsTUFBMkIsRUFBRSxRQUF3QztRQUVsRyxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTSxhQUFhLENBQUMsS0FBYSxFQUFFLE9BQTRCLEVBQUUsUUFBMkI7UUFDM0YsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVjdCwgaGF2ZVJlc291cmNlIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0JztcbmltcG9ydCBjb2RlcGlwZWxpbmUgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lJyk7XG5pbXBvcnQgZXZlbnRzID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWV2ZW50cycpO1xuaW1wb3J0IHsgQ29uc3RydWN0LCBTdGFjayB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHRhcmdldHMgPSByZXF1aXJlKCcuLi8uLi9saWInKTtcblxudGVzdCgndXNlIGNvZGVidWlsZCBwcm9qZWN0IGFzIGFuIGV2ZW50cnVsZSB0YXJnZXQnLCAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gIGNvbnN0IHBpcGVsaW5lID0gbmV3IGNvZGVwaXBlbGluZS5QaXBlbGluZShzdGFjaywgJ1BpcGVsaW5lJyk7XG5cbiAgY29uc3Qgc3JjQXJ0aWZhY3QgPSBuZXcgY29kZXBpcGVsaW5lLkFydGlmYWN0KCdTcmMnKTtcbiAgY29uc3QgYnVpbGRBcnRpZmFjdCA9IG5ldyBjb2RlcGlwZWxpbmUuQXJ0aWZhY3QoJ0JsZCcpO1xuICBwaXBlbGluZS5hZGRTdGFnZSh7XG4gICAgc3RhZ2VOYW1lOiAnU291cmNlJyxcbiAgICBhY3Rpb25zOiBbbmV3IFRlc3RBY3Rpb24oe1xuICAgICAgYWN0aW9uTmFtZTogJ0hlbGxvJyxcbiAgICAgIGNhdGVnb3J5OiBjb2RlcGlwZWxpbmUuQWN0aW9uQ2F0ZWdvcnkuU09VUkNFLFxuICAgICAgcHJvdmlkZXI6ICd4JyxcbiAgICAgIGFydGlmYWN0Qm91bmRzOiB7IG1pbklucHV0czogMCwgbWF4SW5wdXRzOiAwICwgbWluT3V0cHV0czogMSwgbWF4T3V0cHV0czogMSwgfSxcbiAgICAgIG91dHB1dHM6IFtzcmNBcnRpZmFjdF19KV1cbiAgfSk7XG4gIHBpcGVsaW5lLmFkZFN0YWdlKHtcbiAgICBzdGFnZU5hbWU6ICdCdWlsZCcsXG4gICAgYWN0aW9uczogW25ldyBUZXN0QWN0aW9uKHtcbiAgICAgIGFjdGlvbk5hbWU6ICdIZWxsbycsXG4gICAgICBjYXRlZ29yeTogY29kZXBpcGVsaW5lLkFjdGlvbkNhdGVnb3J5LkJVSUxELFxuICAgICAgcHJvdmlkZXI6ICd5JyxcbiAgICAgIGlucHV0czogW3NyY0FydGlmYWN0XSxcbiAgICAgIG91dHB1dHM6IFtidWlsZEFydGlmYWN0XSxcbiAgICAgIGFydGlmYWN0Qm91bmRzOiB7IG1pbklucHV0czogMSwgbWF4SW5wdXRzOiAxICwgbWluT3V0cHV0czogMSwgbWF4T3V0cHV0czogMSwgfX0pXVxuICB9KTtcblxuICBjb25zdCBydWxlID0gbmV3IGV2ZW50cy5SdWxlKHN0YWNrLCAncnVsZScsIHtcbiAgICBzY2hlZHVsZTogZXZlbnRzLlNjaGVkdWxlLmV4cHJlc3Npb24oJ3JhdGUoMSBtaW51dGUpJyksXG4gIH0pO1xuXG4gIC8vIFdIRU5cbiAgcnVsZS5hZGRUYXJnZXQobmV3IHRhcmdldHMuQ29kZVBpcGVsaW5lKHBpcGVsaW5lKSk7XG5cbiAgY29uc3QgcGlwZWxpbmVBcm4gPSB7XG4gICAgXCJGbjo6Sm9pblwiOiBbIFwiXCIsIFtcbiAgICAgIFwiYXJuOlwiLFxuICAgICAgeyBSZWY6IFwiQVdTOjpQYXJ0aXRpb25cIiB9LFxuICAgICAgXCI6Y29kZXBpcGVsaW5lOlwiLFxuICAgICAgeyBSZWY6IFwiQVdTOjpSZWdpb25cIiB9LFxuICAgICAgXCI6XCIsXG4gICAgICB7IFJlZjogXCJBV1M6OkFjY291bnRJZFwiIH0sXG4gICAgICBcIjpcIixcbiAgICAgIHsgUmVmOiBcIlBpcGVsaW5lQzY2MDkxN0RcIiB9XVxuICAgIF1cbiAgfTtcblxuICAvLyBUSEVOXG4gIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkV2ZW50czo6UnVsZScsIHtcbiAgICBUYXJnZXRzOiBbXG4gICAgICB7XG4gICAgICAgIEFybjogcGlwZWxpbmVBcm4sXG4gICAgICAgIElkOiBcIlRhcmdldDBcIixcbiAgICAgICAgUm9sZUFybjogeyBcIkZuOjpHZXRBdHRcIjogWyBcIlBpcGVsaW5lRXZlbnRzUm9sZTQ2QkVFQTdDXCIsIFwiQXJuXCIgXSB9XG4gICAgICB9XG4gICAgXVxuICB9KSk7XG5cbiAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6SUFNOjpQb2xpY3knLCB7XG4gICAgUG9saWN5RG9jdW1lbnQ6IHtcbiAgICAgIFN0YXRlbWVudDogW1xuICAgICAgICB7XG4gICAgICAgICAgQWN0aW9uOiBcImNvZGVwaXBlbGluZTpTdGFydFBpcGVsaW5lRXhlY3V0aW9uXCIsXG4gICAgICAgICAgRWZmZWN0OiBcIkFsbG93XCIsXG4gICAgICAgICAgUmVzb3VyY2U6IHBpcGVsaW5lQXJuLFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgVmVyc2lvbjogXCIyMDEyLTEwLTE3XCJcbiAgICB9XG4gIH0pKTtcbn0pO1xuXG5jbGFzcyBUZXN0QWN0aW9uIGltcGxlbWVudHMgY29kZXBpcGVsaW5lLklBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgYWN0aW9uUHJvcGVydGllczogY29kZXBpcGVsaW5lLkFjdGlvblByb3BlcnRpZXMpIHtcbiAgICAvLyBub3RoaW5nIHRvIGRvXG4gIH1cblxuICBwdWJsaWMgYmluZChfc2NvcGU6IENvbnN0cnVjdCwgX3N0YWdlOiBjb2RlcGlwZWxpbmUuSVN0YWdlLCBfb3B0aW9uczogY29kZXBpcGVsaW5lLkFjdGlvbkJpbmRPcHRpb25zKTpcbiAgICAgIGNvZGVwaXBlbGluZS5BY3Rpb25Db25maWcge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHB1YmxpYyBvblN0YXRlQ2hhbmdlKF9uYW1lOiBzdHJpbmcsIF90YXJnZXQ/OiBldmVudHMuSVJ1bGVUYXJnZXQsIF9vcHRpb25zPzogZXZlbnRzLlJ1bGVQcm9wcyk6IGV2ZW50cy5SdWxlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ29uU3RhdGVDaGFuZ2UoKSBpcyBub3QgYXZhaWxhYmxlIG9uIE1vY2tBY3Rpb24nKTtcbiAgfVxufVxuIl19