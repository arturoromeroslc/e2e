"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Artifacts definition for a CodeBuild Project.
 */
class Artifacts {
    constructor(props) {
        this.identifier = props.identifier;
    }
    static s3(props) {
        return new S3Artifacts(props);
    }
    bind(_scope, _project) {
        return {
            artifactsProperty: {
                artifactIdentifier: this.identifier,
                type: this.type,
            },
        };
    }
}
exports.Artifacts = Artifacts;
/**
 * S3 Artifact definition for a CodeBuild Project.
 */
class S3Artifacts extends Artifacts {
    constructor(props) {
        super(props);
        this.props = props;
        this.type = 'S3';
    }
    bind(_scope, project) {
        this.props.bucket.grantReadWrite(project);
        const superConfig = super.bind(_scope, project);
        return {
            artifactsProperty: {
                ...superConfig.artifactsProperty,
                location: this.props.bucket.bucketName,
                path: this.props.path,
                namespaceType: this.props.includeBuildId === false ? 'NONE' : 'BUILD_ID',
                name: this.props.name,
                packaging: this.props.packageZip === false ? 'NONE' : 'ZIP',
                encryptionDisabled: this.props.encryption === false ? true : undefined,
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXJ0aWZhY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBbURBOztHQUVHO0FBQ0gsTUFBc0IsU0FBUztJQVE3QixZQUFzQixLQUFxQjtRQUN6QyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7SUFDckMsQ0FBQztJQVRNLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBdUI7UUFDdEMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBU00sSUFBSSxDQUFDLE1BQWlCLEVBQUUsUUFBa0I7UUFDL0MsT0FBTztZQUNMLGlCQUFpQixFQUFFO2dCQUNqQixrQkFBa0IsRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDbkMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2FBQ2hCO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXBCRCw4QkFvQkM7QUFtREQ7O0dBRUc7QUFDSCxNQUFNLFdBQVksU0FBUSxTQUFTO0lBR2pDLFlBQTZCLEtBQXVCO1FBQ2xELEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQURjLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBRnBDLFNBQUksR0FBRyxJQUFJLENBQUM7SUFJNUIsQ0FBQztJQUVNLElBQUksQ0FBQyxNQUFpQixFQUFFLE9BQWlCO1FBQzlDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNoRCxPQUFPO1lBQ0wsaUJBQWlCLEVBQUU7Z0JBQ2pCLEdBQUcsV0FBVyxDQUFDLGlCQUFpQjtnQkFDaEMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVU7Z0JBQ3RDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7Z0JBQ3JCLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVTtnQkFDeEUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSTtnQkFDckIsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLO2dCQUMzRCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUzthQUN2RTtTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgczMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtczMnKTtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgQ2ZuUHJvamVjdCB9IGZyb20gJy4vY29kZWJ1aWxkLmdlbmVyYXRlZCc7XG5pbXBvcnQgeyBJUHJvamVjdCB9IGZyb20gJy4vcHJvamVjdCc7XG5cbi8qKlxuICogVGhlIHR5cGUgcmV0dXJuZWQgZnJvbSB7QGxpbmsgSUFydGlmYWN0cyNiaW5kfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcnRpZmFjdHNDb25maWcge1xuICAvKipcbiAgICogVGhlIGxvdy1sZXZlbCBDbG91ZEZvcm1hdGlvbiBhcnRpZmFjdHMgcHJvcGVydHkuXG4gICAqL1xuICByZWFkb25seSBhcnRpZmFjdHNQcm9wZXJ0eTogQ2ZuUHJvamVjdC5BcnRpZmFjdHNQcm9wZXJ0eTtcbn1cblxuLyoqXG4gKiBUaGUgYWJzdHJhY3QgaW50ZXJmYWNlIG9mIGEgQ29kZUJ1aWxkIGJ1aWxkIG91dHB1dC5cbiAqIEltcGxlbWVudGVkIGJ5IHtAbGluayBBcnRpZmFjdHN9LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElBcnRpZmFjdHMge1xuICAvKipcbiAgICogVGhlIGFydGlmYWN0IGlkZW50aWZpZXIuXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgcmVxdWlyZWQgb24gc2Vjb25kYXJ5IGFydGlmYWN0cy5cbiAgICovXG4gIHJlYWRvbmx5IGlkZW50aWZpZXI/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBDb2RlQnVpbGQgdHlwZSBvZiB0aGlzIGFydGlmYWN0LlxuICAgKi9cbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB3aGVuIGFuIEFydGlmYWN0cyBjbGFzcyBpcyB1c2VkIGluIGEgQ29kZUJ1aWxkIFByb2plY3QuXG4gICAqXG4gICAqIEBwYXJhbSBzY29wZSBhIHJvb3QgQ29uc3RydWN0IHRoYXQgYWxsb3dzIGNyZWF0aW5nIG5ldyBDb25zdHJ1Y3RzXG4gICAqIEBwYXJhbSBwcm9qZWN0IHRoZSBQcm9qZWN0IHRoaXMgQXJ0aWZhY3RzIGlzIHVzZWQgaW5cbiAgICovXG4gIGJpbmQoc2NvcGU6IENvbnN0cnVjdCwgcHJvamVjdDogSVByb2plY3QpOiBBcnRpZmFjdHNDb25maWc7XG59XG5cbi8qKlxuICogUHJvcGVydGllcyBjb21tb24gdG8gYWxsIEFydGlmYWN0cyBjbGFzc2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFydGlmYWN0c1Byb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBhcnRpZmFjdCBpZGVudGlmaWVyLlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIHJlcXVpcmVkIG9uIHNlY29uZGFyeSBhcnRpZmFjdHMuXG4gICAqL1xuICByZWFkb25seSBpZGVudGlmaWVyPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEFydGlmYWN0cyBkZWZpbml0aW9uIGZvciBhIENvZGVCdWlsZCBQcm9qZWN0LlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXJ0aWZhY3RzIGltcGxlbWVudHMgSUFydGlmYWN0cyB7XG4gIHB1YmxpYyBzdGF0aWMgczMocHJvcHM6IFMzQXJ0aWZhY3RzUHJvcHMpOiBJQXJ0aWZhY3RzIHtcbiAgICByZXR1cm4gbmV3IFMzQXJ0aWZhY3RzKHByb3BzKTtcbiAgfVxuXG4gIHB1YmxpYyByZWFkb25seSBpZGVudGlmaWVyPzogc3RyaW5nO1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcm9wczogQXJ0aWZhY3RzUHJvcHMpIHtcbiAgICB0aGlzLmlkZW50aWZpZXIgPSBwcm9wcy5pZGVudGlmaWVyO1xuICB9XG5cbiAgcHVibGljIGJpbmQoX3Njb3BlOiBDb25zdHJ1Y3QsIF9wcm9qZWN0OiBJUHJvamVjdCk6IEFydGlmYWN0c0NvbmZpZyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFydGlmYWN0c1Byb3BlcnR5OiB7XG4gICAgICAgIGFydGlmYWN0SWRlbnRpZmllcjogdGhpcy5pZGVudGlmaWVyLFxuICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3Rpb24gcHJvcGVydGllcyBmb3Ige0BsaW5rIFMzQXJ0aWZhY3RzfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTM0FydGlmYWN0c1Byb3BzIGV4dGVuZHMgQXJ0aWZhY3RzUHJvcHMge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIG91dHB1dCBidWNrZXQuXG4gICAqL1xuICByZWFkb25seSBidWNrZXQ6IHMzLklCdWNrZXQ7XG5cbiAgLyoqXG4gICAqIFRoZSBwYXRoIGluc2lkZSBvZiB0aGUgYnVja2V0IGZvciB0aGUgYnVpbGQgb3V0cHV0IC56aXAgZmlsZSBvciBmb2xkZXIuXG4gICAqIElmIGEgdmFsdWUgaXMgbm90IHNwZWNpZmllZCwgdGhlbiBidWlsZCBvdXRwdXQgd2lsbCBiZSBzdG9yZWQgYXQgdGhlIHJvb3Qgb2YgdGhlXG4gICAqIGJ1Y2tldCAob3IgdW5kZXIgdGhlIDxidWlsZC1pZD4gZGlyZWN0b3J5IGlmIGBpbmNsdWRlQnVpbGRJZGAgaXMgc2V0IHRvIHRydWUpLlxuICAgKi9cbiAgcmVhZG9ubHkgcGF0aD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGJ1aWxkIG91dHB1dCBaSVAgZmlsZSBvciBmb2xkZXIgaW5zaWRlIHRoZSBidWNrZXQuXG4gICAqXG4gICAqIFRoZSBmdWxsIFMzIG9iamVjdCBrZXkgd2lsbCBiZSBcIjxwYXRoPi88YnVpbGQtaWQ+LzxuYW1lPlwiIG9yXG4gICAqIFwiPHBhdGg+LzxuYW1lPlwiIGRlcGVuZGluZyBvbiB3aGV0aGVyIGBpbmNsdWRlQnVpbGRJZGAgaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGUgYnVpbGQgSUQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSBwYXRoLiBJZiB0aGlzIGlzIHNldCB0byB0cnVlLFxuICAgKiB0aGVuIHRoZSBidWlsZCBhcnRpZmFjdCB3aWxsIGJlIHN0b3JlZCBpbiBcIjxwYXRoPi88YnVpbGQtaWQ+LzxuYW1lPlwiLlxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICByZWFkb25seSBpbmNsdWRlQnVpbGRJZD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIElmIHRoaXMgaXMgdHJ1ZSwgYWxsIGJ1aWxkIG91dHB1dCB3aWxsIGJlIHBhY2thZ2VkIGludG8gYSBzaW5nbGUgLnppcCBmaWxlLlxuICAgKiBPdGhlcndpc2UsIGFsbCBmaWxlcyB3aWxsIGJlIHVwbG9hZGVkIHRvIDxwYXRoPi88bmFtZT5cbiAgICpcbiAgICogQGRlZmF1bHQgdHJ1ZSAtIGZpbGVzIHdpbGwgYmUgYXJjaGl2ZWRcbiAgICovXG4gIHJlYWRvbmx5IHBhY2thZ2VaaXA/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBJZiB0aGlzIGlzIGZhbHNlLCBidWlsZCBvdXRwdXQgd2lsbCBub3QgYmUgZW5jcnlwdGVkLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgYXJ0aWZhY3QgdG8gcHVibGlzaCBhIHN0YXRpYyB3ZWJzaXRlIG9yIHNoYXJpbmcgY29udGVudCB3aXRoIG90aGVyc1xuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlIC0gb3V0cHV0IHdpbGwgYmUgZW5jcnlwdGVkXG4gICAqL1xuICByZWFkb25seSBlbmNyeXB0aW9uPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBTMyBBcnRpZmFjdCBkZWZpbml0aW9uIGZvciBhIENvZGVCdWlsZCBQcm9qZWN0LlxuICovXG5jbGFzcyBTM0FydGlmYWN0cyBleHRlbmRzIEFydGlmYWN0cyB7XG4gIHB1YmxpYyByZWFkb25seSB0eXBlID0gJ1MzJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBTM0FydGlmYWN0c1Byb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcHVibGljIGJpbmQoX3Njb3BlOiBDb25zdHJ1Y3QsIHByb2plY3Q6IElQcm9qZWN0KTogQXJ0aWZhY3RzQ29uZmlnIHtcbiAgICB0aGlzLnByb3BzLmJ1Y2tldC5ncmFudFJlYWRXcml0ZShwcm9qZWN0KTtcbiAgICBjb25zdCBzdXBlckNvbmZpZyA9IHN1cGVyLmJpbmQoX3Njb3BlLCBwcm9qZWN0KTtcbiAgICByZXR1cm4ge1xuICAgICAgYXJ0aWZhY3RzUHJvcGVydHk6IHtcbiAgICAgICAgLi4uc3VwZXJDb25maWcuYXJ0aWZhY3RzUHJvcGVydHksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgICBwYXRoOiB0aGlzLnByb3BzLnBhdGgsXG4gICAgICAgIG5hbWVzcGFjZVR5cGU6IHRoaXMucHJvcHMuaW5jbHVkZUJ1aWxkSWQgPT09IGZhbHNlID8gJ05PTkUnIDogJ0JVSUxEX0lEJyxcbiAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxuICAgICAgICBwYWNrYWdpbmc6IHRoaXMucHJvcHMucGFja2FnZVppcCA9PT0gZmFsc2UgPyAnTk9ORScgOiAnWklQJyxcbiAgICAgICAgZW5jcnlwdGlvbkRpc2FibGVkOiB0aGlzLnByb3BzLmVuY3J5cHRpb24gPT09IGZhbHNlID8gdHJ1ZSA6IHVuZGVmaW5lZCxcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG4iXX0=