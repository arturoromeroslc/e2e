"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events = require("@aws-cdk/aws-events");
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const iam = require("@aws-cdk/aws-iam");
const targets = require("@aws-cdk/aws-events-targets");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/core");
const path = require("path");
const METRIC_NAME_SPACE = 'e2e';
const DURATION = 2;
class LambdaE2EStack extends cdk.Stack {
    constructor(app, id) {
        super(app, id);
        const statement = new iam.PolicyStatement();
        statement.addActions('cloudwatch:PutMetricData');
        statement.addResources('*');
        const lambdaFn = new lambda.Function(this, 'LambdaFunction', {
            runtime: lambda.Runtime.NODEJS_8_10,
            handler: 'index.handler',
            code: lambda.Code.fromAsset(path.join(__dirname, 'lambda-handler/index.zip')),
            memorySize: 512,
            timeout: cdk.Duration.minutes(5)
        });
        const rule = new events.Rule(this, `Run every ${DURATION} minutes`, {
            schedule: events.Schedule.rate(cdk.Duration.minutes(DURATION)),
            enabled: false
        });
        rule.addTarget(new targets.LambdaFunction(lambdaFn));
        const faliedMetric = new cloudwatch.Metric({
            namespace: METRIC_NAME_SPACE,
            metricName: 'failed-workflow'
        });
        new cloudwatch.Alarm(this, 'Alarm', {
            alarmDescription: 'e2e critical path failed',
            metric: faliedMetric,
            threshold: 100,
            evaluationPeriods: DURATION,
            statistic: 'Sum',
            period: cdk.Duration.minutes(DURATION),
            treatMissingData: cloudwatch.TreatMissingData.BREACHING
        });
        lambdaFn.addToRolePolicy(statement);
    }
}
exports.LambdaE2EStack = LambdaE2EStack;
const app = new cdk.App();
new LambdaE2EStack(app, 'LambdaE2EExample');
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUE4QztBQUM5QyxzREFBc0Q7QUFDdEQsd0NBQXdDO0FBQ3hDLHVEQUF1RDtBQUN2RCw4Q0FBOEM7QUFDOUMscUNBQXFDO0FBQ3JDLDZCQUE2QjtBQUU3QixNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQTtBQUMvQixNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUE7QUFFbEIsTUFBYSxjQUFlLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDM0MsWUFBWSxHQUFZLEVBQUUsRUFBVTtRQUNsQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBRWQsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUE7UUFDM0MsU0FBUyxDQUFDLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO1FBQ2hELFNBQVMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFM0IsTUFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUMzRCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLE9BQU8sRUFBRSxlQUFlO1lBQ3hCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsMEJBQTBCLENBQUMsQ0FDakQ7WUFDRCxVQUFVLEVBQUUsR0FBRztZQUNmLE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDakMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxhQUFhLFFBQVEsVUFBVSxFQUFFO1lBQ2xFLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5RCxPQUFPLEVBQUUsS0FBSztTQUNmLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFFcEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ3pDLFNBQVMsRUFBRSxpQkFBaUI7WUFDNUIsVUFBVSxFQUFFLGlCQUFpQjtTQUM5QixDQUFDLENBQUE7UUFFRixJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtZQUNsQyxnQkFBZ0IsRUFBRSwwQkFBMEI7WUFDNUMsTUFBTSxFQUFFLFlBQVk7WUFDcEIsU0FBUyxFQUFFLEdBQUc7WUFDZCxpQkFBaUIsRUFBRSxRQUFRO1lBQzNCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLE1BQU0sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDdEMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFNBQVM7U0FDeEQsQ0FBQyxDQUFBO1FBRUYsUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0NBQ0Y7QUExQ0Qsd0NBMENDO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDekIsSUFBSSxjQUFjLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUE7QUFDM0MsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV2ZW50cyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1ldmVudHMnKVxuaW1wb3J0IGNsb3Vkd2F0Y2ggPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtY2xvdWR3YXRjaCcpXG5pbXBvcnQgaWFtID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWlhbScpXG5pbXBvcnQgdGFyZ2V0cyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1ldmVudHMtdGFyZ2V0cycpXG5pbXBvcnQgbGFtYmRhID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWxhbWJkYScpXG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY29yZScpXG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuXG5jb25zdCBNRVRSSUNfTkFNRV9TUEFDRSA9ICdlMmUnXG5jb25zdCBEVVJBVElPTiA9IDJcblxuZXhwb3J0IGNsYXNzIExhbWJkYUUyRVN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3IoYXBwOiBjZGsuQXBwLCBpZDogc3RyaW5nKSB7XG4gICAgc3VwZXIoYXBwLCBpZClcblxuICAgIGNvbnN0IHN0YXRlbWVudCA9IG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KClcbiAgICBzdGF0ZW1lbnQuYWRkQWN0aW9ucygnY2xvdWR3YXRjaDpQdXRNZXRyaWNEYXRhJylcbiAgICBzdGF0ZW1lbnQuYWRkUmVzb3VyY2VzKCcqJylcblxuICAgIGNvbnN0IGxhbWJkYUZuID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnTGFtYmRhRnVuY3Rpb24nLCB7XG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfOF8xMCxcbiAgICAgIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChcbiAgICAgICAgcGF0aC5qb2luKF9fZGlybmFtZSwgJ2xhbWJkYS1oYW5kbGVyL2luZGV4LnppcCcpXG4gICAgICApLFxuICAgICAgbWVtb3J5U2l6ZTogNTEyLFxuICAgICAgdGltZW91dDogY2RrLkR1cmF0aW9uLm1pbnV0ZXMoNSlcbiAgICB9KVxuXG4gICAgY29uc3QgcnVsZSA9IG5ldyBldmVudHMuUnVsZSh0aGlzLCBgUnVuIGV2ZXJ5ICR7RFVSQVRJT059IG1pbnV0ZXNgLCB7XG4gICAgICBzY2hlZHVsZTogZXZlbnRzLlNjaGVkdWxlLnJhdGUoY2RrLkR1cmF0aW9uLm1pbnV0ZXMoRFVSQVRJT04pKSxcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfSlcblxuICAgIHJ1bGUuYWRkVGFyZ2V0KG5ldyB0YXJnZXRzLkxhbWJkYUZ1bmN0aW9uKGxhbWJkYUZuKSlcblxuICAgIGNvbnN0IGZhbGllZE1ldHJpYyA9IG5ldyBjbG91ZHdhdGNoLk1ldHJpYyh7XG4gICAgICBuYW1lc3BhY2U6IE1FVFJJQ19OQU1FX1NQQUNFLFxuICAgICAgbWV0cmljTmFtZTogJ2ZhaWxlZC13b3JrZmxvdydcbiAgICB9KVxuXG4gICAgbmV3IGNsb3Vkd2F0Y2guQWxhcm0odGhpcywgJ0FsYXJtJywge1xuICAgICAgYWxhcm1EZXNjcmlwdGlvbjogJ2UyZSBjcml0aWNhbCBwYXRoIGZhaWxlZCcsXG4gICAgICBtZXRyaWM6IGZhbGllZE1ldHJpYyxcbiAgICAgIHRocmVzaG9sZDogMTAwLFxuICAgICAgZXZhbHVhdGlvblBlcmlvZHM6IERVUkFUSU9OLFxuICAgICAgc3RhdGlzdGljOiAnU3VtJyxcbiAgICAgIHBlcmlvZDogY2RrLkR1cmF0aW9uLm1pbnV0ZXMoRFVSQVRJT04pLFxuICAgICAgdHJlYXRNaXNzaW5nRGF0YTogY2xvdWR3YXRjaC5UcmVhdE1pc3NpbmdEYXRhLkJSRUFDSElOR1xuICAgIH0pXG5cbiAgICBsYW1iZGFGbi5hZGRUb1JvbGVQb2xpY3koc3RhdGVtZW50KVxuICB9XG59XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKClcbm5ldyBMYW1iZGFFMkVTdGFjayhhcHAsICdMYW1iZGFFMkVFeGFtcGxlJylcbmFwcC5zeW50aCgpXG4iXX0=